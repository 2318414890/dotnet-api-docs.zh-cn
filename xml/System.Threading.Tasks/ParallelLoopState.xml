<Type Name="ParallelLoopState" FullName="System.Threading.Tasks.ParallelLoopState">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3e4244160069333f5d930b81c7b54173c2ad6d6a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30530211" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ParallelLoopState" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParallelLoopState extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.ParallelLoopState" />
  <TypeSignature Language="VB.NET" Value="Public Class ParallelLoopState" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParallelLoopState" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("ShouldExitCurrentIteration = {ShouldExitCurrentIteration}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>可使并行循环迭代与其他迭代交互。 此类的实例由 <see cref="T:System.Threading.Tasks.Parallel" /> 类提供给每个循环；不能在您的用户代码中创建实例。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 请注意，不能实例化此类的实例。 自动生成由编译器作为自变量对的调用中<xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType>或<xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法。 说明如示例所示。  
  
 构造，例如`for`和`foreach`（在 C# 中) 和`For`和`For Each`（在 Visual Basic 中) 中执行按顺序从最低到最高或从一组中的第一个对象到最后一个。 与此相反，<xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType>和<xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法不这样做。 因为并行运行单独的循环迭代，他们可以开始和结束按任何顺序。 <xref:System.Threading.Tasks.ParallelLoopState>类允许并行循环之间的交互的单个迭代。 <xref:System.Threading.Tasks.ParallelLoopState>类允许你：  
  
-   退出当前迭代并阻止任何其他迭代通过调用启动<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法。 这不会影响已开始执行的迭代。  
  
-   阻止索引大于当前索引的任何迭代通过调用执行<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法。 这不会影响已开始执行的迭代。  
  
-   确定是否异常发生在任何循环迭代中通过检索的值的<xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A>属性。  
  
-   确定循环的任何迭代是否已调用<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法检索的值的<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>属性。 你可以使用此属性返回到调用之前启动的循环迭代从<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法但仍在执行。  
  
-   确定循环的任何迭代是否已调用<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>或<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法或通过检索的值的引发了异常<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>属性。  
  
-   从其索引大于的迭代中调用中断所在通过检索的值的索引的长时间运行迭代退出<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>属性。  
  
   
  
## Examples  
 下面的示例以并行方式执行最多 100 个循环迭代。 为从 1 到 1000 毫秒的随机间隔暂停每次迭代。 随机生成的值确定的循环的迭代上<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>调用方法。 如示例所示，其索引大于任何迭代输出<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>在调用后的属性值 start<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法。  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 因为的循环迭代仍可能会执行时<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法被调用时，每个迭代调用<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>属性检查是否已调用另一个迭代<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法。 如果属性值是`true`，迭代检查的值<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>属性，如果它大于当前迭代索引值，将立即返回。  
  
 ]]></format>
    </remarks>
    <threadsafe>A<see cref="T:System.Threading.Tasks.ParallelLoopState" />实例旨在只在循环到提供实例的正文中使用。  不安全地使用提供<see cref="T:System.Threading.Tasks.ParallelLoopState" />实例关联的循环后结束，也不是安全显式将其提交给其他线程并具有在任何时候访问这些线程。  不同<see cref="T:System.Threading.Tasks.ParallelLoopState" />实例将提供给一个循环中涉及的每个线程。</threadsafe>
  </Docs>
  <Members>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public void Break ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Break() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Break" />
      <MemberSignature Language="VB.NET" Value="Public Sub Break ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Break();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>告知 <see cref="T:System.Threading.Tasks.Parallel" /> 循环应在系统方便的时候尽早停止执行当前迭代之外的迭代。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 指示应运行当前迭代之后没有迭代次数。 它有效地取消循环的任何其他迭代。 但是，它不会停止任何迭代已开始执行。 例如，如果<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>从循环从 0 到 1000，所有迭代小于 100 应仍继续运行，但到 1000，尚未启动不从 101 起通过迭代执行并行循环的第 100 迭代调用。  
  
 对于可能已执行的长时间运行迭代<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>设置<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>属性设置为当前迭代索引的当前索引是否的当前值小于<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>。 若要停止其索引大于从竞争执行的最低中断迭代的迭代，应执行以下操作：  
  
1.  检查是否<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>属性是`true`。  
  
2.  退出迭代中，如果其索引大于<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>属性值。  
  
 说明如示例所示。  
  
 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 通常会使用在其中进行的排序是数据源中存在的基于搜索的算法。  
  
   
  
## Examples  
 下面的示例以并行方式执行最多 100 个循环迭代。 为从 1 到 1000 毫秒的随机间隔暂停每次迭代。 随机生成的值确定的循环的迭代上<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>调用方法。 如示例所示，其索引大于任何迭代输出<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>在调用后的属性值 start<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法。  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 因为的循环迭代仍可能会执行时<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法被调用时，每个迭代调用<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>属性检查是否已调用另一个迭代<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法。 如果属性值是`true`，迭代检查的值<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>属性，如果它大于当前迭代索引值，将立即返回。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> 方法以前被调用过。 <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> 和 <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> 不能被相同循环的迭代组合使用。</exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      </Docs>
    </Member>
    <Member MemberName="IsExceptional">
      <MemberSignature Language="C#" Value="public bool IsExceptional { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExceptional" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExceptional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExceptional { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取循环的任何迭代是否已引发相应迭代未处理的异常。</summary>
        <value>
          如果引发了未经处理的异常，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStopped">
      <MemberSignature Language="C#" Value="public bool IsStopped { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStopped" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStopped As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStopped { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取循环的任何迭代是否已调用 <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> 方法。</summary>
        <value>
          如果任何迭代通过调用 <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> 方法已停止循环，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于长时间运行的循环迭代，你可以检索的值<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>属性来确定是否循环的任何迭代的开始到调用之前执行<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>仍在执行方法。 然后可以使用的值<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>属性来确定它们是否应立即返回或正常执行。  
  
   
  
## Examples  
 下面的示例以并行方式执行最多 10,000 个循环迭代。 为从 1 到 1000 毫秒的随机间隔暂停每次迭代。 随机生成的值确定的循环的迭代上<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>调用方法。 因为的循环迭代仍可能会执行时<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>调用方法时，lambda 表达式调用<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>方法来检查是否已调用另一个迭代<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法。 如果它返回`true`，迭代立即返回。  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LowestBreakIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;long&gt; LowestBreakIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; LowestBreakIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LowestBreakIteration As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;long&gt; LowestBreakIteration { Nullable&lt;long&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取从中调用 <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> 的最低循环迭代。</summary>
        <value>从中调用 <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> 的最低迭代。 如果是 <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> 循环，该值会基于内部生成的索引。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可能的并行循环调用多个迭代<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法。 如果是的话，此值是调用一次迭代的最小索引<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>。 如果任何迭代循环不调用<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>，此属性返回`null`。 请注意，属性值是通过调用受影响<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法。  
  
 在中后调用的迭代的所有迭代的长时间运行迭代<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法不需要运行，<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>属性用于终止开始到调用之前执行的迭代<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法。 若要停止其索引大于从竞争执行的最低中断迭代的迭代，应执行以下操作：  
  
1.  检查是否<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>属性是`true`。  
  
2.  退出迭代中，如果其索引大于<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>属性值。  
  
 说明如示例所示。  
  
   
  
## Examples  
 下面的示例以并行方式执行最多 100 个循环迭代。 为从 1 到 1000 毫秒的随机间隔暂停每次迭代。 随机生成的值确定的循环的迭代上<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>调用方法。 这可以防止其索引大于的迭代<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>属性值从调用的后面启动<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法，但它不会影响已开始执行的任何迭代。 若要防止这些完成，每个迭代调用<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>方法来检查是否已调用另一个迭代<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法。 因此，迭代检查的值如果<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>属性，如果它大于当前迭代索引值，将立即返回。  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 请注意，因为<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>值的值超出在并行循环的作用域，必须将其分配给一个变量，如果你想要保留其值是位于循环外可见。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
      </Docs>
    </Member>
    <Member MemberName="ShouldExitCurrentIteration">
      <MemberSignature Language="C#" Value="public bool ShouldExitCurrentIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldExitCurrentIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShouldExitCurrentIteration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldExitCurrentIteration { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取循环的当前迭代是否应基于此迭代或其他迭代发出的请求退出。</summary>
        <value>
          如果当前迭代应退出，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>属性设置为`true`任何以下条件下：  
  
-   迭代的循环调用<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>或<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>。  
  
-   循环的迭代引发异常。  
  
-   循环都会被取消。  
  
 当此属性是`true`、<xref:System.Threading.Tasks.Parallel>类将主动尝试来禁止其他的循环迭代开始执行。 但是，可能无法阻止其他迭代启动的情况。  
  
 这也可能是长时间运行迭代已经开始执行这种情况。 在这种情况下，迭代可能显式检查<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>如果属性返回的属性和终止执行`true`。  
  
   
  
## Examples  
 下面的示例以并行方式执行最多 100 个循环迭代。 为从 1 到 1000 毫秒的随机间隔暂停每次迭代。 随机生成的值确定的循环的迭代上<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>调用方法。 这可以防止其索引大于的迭代<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>属性值从调用的后面启动<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法，但它不会影响已开始执行的任何迭代。 若要防止这些完成，每个迭代调用<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>方法来检查是否已调用另一个迭代<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法。 因此，迭代检查的值如果<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>属性，如果它大于当前迭代索引值，将立即返回。  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>告知 <see cref="T:System.Threading.Tasks.Parallel" /> 循环应在系统方便的时候尽早停止执行。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法指示不需要运行尚未启动的任何迭代循环。 它有效地取消循环的任何其他迭代。 但是，它不会停止任何迭代已开始执行。  
  
 调用<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法使<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>属性以返回`true`仍在执行循环的任何迭代。 这很适合用于长时间运行迭代，可以检查<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>属性并退出尽早如果其值为`true`。  
  
 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 通常在其中一个结果后找到，则任何其他迭代需要执行的搜索算法，使用。  
  
   
  
## Examples  
 下面的示例以并行方式执行最多 10,000 个循环迭代。 为从 1 到 1000 毫秒的随机间隔暂停每次迭代。 随机生成的值确定的循环的迭代上<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>调用方法。 如示例输出所示，在调用之后执行任何迭代<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法。  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 因为的循环迭代仍可能会执行时<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法被调用时，每个迭代调用<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>方法来检查是否已调用另一个迭代<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法。 如果它返回`true`，迭代立即返回。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">以前调用过 <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> 方法。 <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> 和 <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> 不能被相同循环的迭代组合使用。</exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      </Docs>
    </Member>
  </Members>
</Type>