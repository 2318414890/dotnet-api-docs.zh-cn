<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TaskExtensions.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5e1dde85ae7c10af9a001c513d6bcae9abb382db4.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e1dde85ae7c10af9a001c513d6bcae9abb382db4</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.TaskExtensions">
          <source>Provides a set of static (Shared in Visual Basic) methods for working with specific kinds of <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> instances.</source>
          <target state="translated">提供一组用于处理特定类型的 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> 实例的静态方法（在 Visual Basic 中为共享方法）。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
          <source>The <ph id="ph1">&lt;see langword="Task&amp;lt;Task&amp;gt;" /&gt;</ph> (C#) or <ph id="ph2">&lt;see langword="Task (Of Task)" /&gt;</ph> (Visual Basic) to unwrap.</source>
          <target state="translated">要解包的 <ph id="ph1">&lt;see langword="Task&amp;lt;Task&amp;gt;" /&gt;</ph> (C#) 或者 <ph id="ph2">&lt;see langword="Task (Of Task)" /&gt;</ph> (Visual Basic)。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
          <source>Creates a proxy <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> that represents the asynchronous operation of a <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)" /&gt;</ph>.</source>
          <target state="translated">创建一个表示 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> 的异步操作的代理 <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
          <source>A Task that represents the asynchronous operation of the provided <ph id="ph1">&lt;see langword="System.Threading.Tasks.Task(Of Task)" /&gt;</ph>.</source>
          <target state="translated">表示所提供的 <ph id="ph1">&lt;see langword="System.Threading.Tasks.Task(Of Task)" /&gt;</ph> 的异步操作的 Task。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
          <source>It is often useful to be able to return a Task from a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>, where the inner Task represents work done as part of the outer <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.</source>
          <target state="translated">通常很有用，能够返回从任务<ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>，其中在内部任务表示的外部一部分完成工作<ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
          <source>However, doing so results in a <ph id="ph1">`Task&lt;Task&gt;`</ph> (C#) or <ph id="ph2">`Task (Of Task)`</ph> (Visual Basic), which, if not dealt with carefully, could produce unexpected behavior.</source>
          <target state="translated">但是，这样做会导致<ph id="ph1">`Task&lt;Task&gt;`</ph>(C#) 或<ph id="ph2">`Task (Of Task)`</ph>(Visual Basic 中)，其中，如果不处理仔细，可能产生意外的行为。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
          <source>Unwrap solves this problem by creating a proxy Task that represents the entire asynchronous operation of such a task.</source>
          <target state="translated">解包可通过创建代理任务，它表示此类任务的整个异步操作来解决此问题。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
          <source>The following example shows how to unwrap a task:</source>
          <target state="translated">下面的示例演示如何解包任务：</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
          <source>The exception that is thrown if the <ph id="ph1">&lt;paramref name="task" /&gt;</ph> argument is null.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="task" /&gt;</ph> 参数为 null 时引发的异常。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
          <source>The type of the task's result.</source>
          <target state="translated">任务结果的类型。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
          <source>The <ph id="ph1">&lt;see langword="Task&amp;lt;Task&amp;lt;T&amp;gt;&amp;gt;" /&gt;</ph> (C#) or <ph id="ph2">&lt;see langword="Task (Of Task(Of T))" /&gt;</ph> (Visual Basic) to unwrap.</source>
          <target state="translated">要解包的 <ph id="ph1">&lt;see langword="Task&amp;lt;Task&amp;lt;T&amp;gt;&amp;gt;" /&gt;</ph> (C#) 或者 <ph id="ph2">&lt;see langword="Task (Of Task(Of T))" /&gt;</ph> (Visual Basic)。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
          <source>Creates a proxy <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> that represents the asynchronous operation of a <ph id="ph2">&lt;see langword="Task&amp;lt;Task&amp;lt;T&amp;gt;&amp;gt;" /&gt;</ph> (C#) or <ph id="ph3">&lt;see langword="Task (Of Task(Of T))" /&gt;</ph> (Visual Basic).</source>
          <target state="translated">创建一个表示 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> 的异步操作的代理 <ph id="ph2">&lt;see langword="Task&amp;lt;Task&amp;lt;T&amp;gt;&amp;gt;" /&gt;</ph> (C#) or <ph id="ph3">&lt;see langword="Task (Of Task(Of T))" /&gt;</ph> (Visual Basic)。 </target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> that represents the asynchronous operation of the provided <ph id="ph2">&lt;see langword="Task&amp;lt;Task&amp;lt;T&amp;gt;&amp;gt;" /&gt;</ph> (C#) or <ph id="ph3">&lt;see langword="Task (Of Task(Of T))" /&gt;</ph> (Visual Basic).</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> 它表示所提供的 <ph id="ph2">&lt;see langword="Task&amp;lt;Task&amp;lt;T&amp;gt;&amp;gt;" /&gt;</ph> (C#) 或 <ph id="ph3">&lt;see langword="Task (Of Task(Of T))" /&gt;</ph> (Visual Basic) 的异步运算。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
          <source>It is often useful to be able to return a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> from a <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph>, where the inner <ph id="ph3">&lt;xref:System.Threading.Tasks.Task&gt;</ph> represents work done as part of the outer <ph id="ph4">&lt;xref:System.Threading.Tasks.Task&gt;</ph>.</source>
          <target state="translated">通常很有用，能够返回<ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph>从<ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph>，其中内部<ph id="ph3">&lt;xref:System.Threading.Tasks.Task&gt;</ph>表示完成一部分的外部工作<ph id="ph4">&lt;xref:System.Threading.Tasks.Task&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
          <source>However, doing so results in a <ph id="ph1">`Task&lt;Task&lt;T&gt;&gt;`</ph> (C#) or <ph id="ph2">`Task (Of Task(Of T))`</ph> (Visual Basic), which, if not dealt with carefully, could produce unexpected behavior.</source>
          <target state="translated">但是，这样做会导致<ph id="ph1">`Task&lt;Task&lt;T&gt;&gt;`</ph>(C#) 或<ph id="ph2">`Task (Of Task(Of T))`</ph>(Visual Basic 中)，其中，如果不处理仔细，可能产生意外的行为。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
          <source>Unwrap solves this problem by creating a proxy <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> that represents the entire asynchronous operation of such a <ph id="ph2">`Task&lt;Task&lt;T&gt;&gt;`</ph> (C#) or <ph id="ph3">`Task (Of Task(Of T))`</ph> (Visual Basic).</source>
          <target state="translated">Unwrap 可解决此问题，通过创建代理<ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>表示整个异步操作的如<ph id="ph2">`Task&lt;Task&lt;T&gt;&gt;`</ph>(C#) 或<ph id="ph3">`Task (Of Task(Of T))`</ph>(Visual Basic 中)。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
          <source>The exception that is thrown if the <ph id="ph1">&lt;paramref name="task" /&gt;</ph> argument is null.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="task" /&gt;</ph> 参数为 null 时引发的异常。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>