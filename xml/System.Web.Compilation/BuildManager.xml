<Type Name="BuildManager" FullName="System.Web.Compilation.BuildManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d259521b1a7b4eee6ffd51a49ced63825510a32f" />
    <Meta Name="ms.sourcegitcommit" Value="4b4804968da1dfdf71c501075a5b66957b54f2e8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/27/2018" />
    <Meta Name="ms.locfileid" Value="32037441" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class BuildManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit BuildManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Compilation.BuildManager" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class BuildManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class BuildManager sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供一组有助于管理 ASP.NET 应用程序编译的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Compilation.BuildManager>类管理编译的程序集和应用程序页的过程。 它是一个密封的类，并不能被继承。  
  
 <xref:System.Web.Compilation.BuildManager> 包含提供有关已编译的程序集信息的静态成员。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Compilation.ClientBuildManager" />
    <altmember cref="T:System.Web.Compilation.BuildProvider" />
    <altmember cref="T:System.Web.Compilation.AssemblyBuilder" />
  </Docs>
  <Members>
    <Member MemberName="AddCompilationDependency">
      <MemberSignature Language="C#" Value="public static void AddCompilationDependency (string dependency);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddCompilationDependency(string dependency) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildManager.AddCompilationDependency(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddCompilationDependency (dependency As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddCompilationDependency(System::String ^ dependency);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependency" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dependency">一个表示依赖项的字符串。</param>
        <summary>指定表示生成管理器使用的依赖项帮助确定是否需要干净生成的字符串。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 必须在调用该方法`Application_PreStartInit`阶段的应用程序。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dependency" /> 参数为 <see langword="null" /> 或空字符串。</exception>
        <exception cref="T:System.InvalidOperationException">在此应用程序的 <see langword="Application_PreStartInit" /> 阶段后调用该方法。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddReferencedAssembly">
      <MemberSignature Language="C#" Value="public static void AddReferencedAssembly (System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddReferencedAssembly(class System.Reflection.Assembly assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildManager.AddReferencedAssembly(System.Reflection.Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddReferencedAssembly(System::Reflection::Assembly ^ assembly);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="assembly">要添加的程序集。</param>
        <summary>将一个程序集添加到应用程序所引用的一组程序集中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法相当于将程序集添加到应用程序级别的 Web.config 文件。 必须在调用该方法`Application_PreStartInit`阶段的应用程序。  
  
 <xref:System.Web.Compilation.BuildManager.GetReferencedAssemblies%2A>方法将返回的一套根据配置文件的程序集和使用此方法已添加的任何程序集。  
  
 如果尝试添加已添加的程序集，则忽略重复项。  
  
 必须在之前调用此方法`Application_Start`Global.asax 文件中的事件发生。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assembly" /> 参数为 <see langword="null" /> 或为空。</exception>
        <exception cref="T:System.InvalidOperationException">此方法不在 Global.asax 文件中的 <see langword="Application_Start" /> 事件发生前调用。</exception>
      </Docs>
    </Member>
    <Member MemberName="BatchCompilationEnabled">
      <MemberSignature Language="C#" Value="public static Nullable&lt;bool&gt; BatchCompilationEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Nullable`1&lt;bool&gt; BatchCompilationEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.BuildManager.BatchCompilationEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property BatchCompilationEnabled As Nullable(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Nullable&lt;bool&gt; BatchCompilationEnabled { Nullable&lt;bool&gt; get(); void set(Nullable&lt;bool&gt; value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置指示是否启用批处理编译的值。</summary>
        <value>
          如果始终启用批处理编译，则为 <see langword="true" />；如果从不启用批处理编译，则为 <see langword="false" />；如果根据配置文件确定编译设置，则为 <see langword="null" />。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性使您能够打开或关闭批处理编译以编程方式。 它对应于`batch`属性`compilation`Web.config 文件中的元素。 有关详细信息，请参阅[编译元素 （ASP.NET 设置架构）](http://msdn.microsoft.com/library/7c319582-074a-4d2a-a787-03b9d4541c12)。  
  
 该属性可以设置仅在`PreApplicationStart`方法。 有关 `PreApplicationStart` 方法的更多信息，请参见 <xref:System.Web.PreApplicationStartMethodAttribute>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">该属性不用 <see langword="PreApplicationStart" /> 方法设置。</exception>
      </Docs>
    </Member>
    <Member MemberName="CodeAssemblies">
      <MemberSignature Language="C#" Value="public static System.Collections.IList CodeAssemblies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.IList CodeAssemblies" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.BuildManager.CodeAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CodeAssemblies As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::IList ^ CodeAssemblies { System::Collections::IList ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取从 App_Code 目录生成的程序集的列表。</summary>
        <value>一个 <see cref="T:System.Collections.IList" /> 集合，包含从 App_Code 目录生成的程序集。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCachedFile">
      <MemberSignature Language="C#" Value="public static System.IO.Stream CreateCachedFile (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream CreateCachedFile(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildManager.CreateCachedFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCachedFile (fileName As String) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ CreateCachedFile(System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">要创建的文件的名称。</param>
        <summary>创建一个缓存文件。</summary>
        <returns>新文件的 <see cref="T:System.IO.Stream" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法与<xref:System.Web.Compilation.BuildManager.ReadCachedFile%2A>方法使您能够执行缓存在部分信任环境中的应用程序域重新启动继续存在。 它使用缓存结果的控制器查找 MVC 框架。  
  
 缓存数据写入到<xref:System.IO.Stream>此方法返回的对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceFromVirtualPath">
      <MemberSignature Language="C#" Value="public static object CreateInstanceFromVirtualPath (string virtualPath, Type requiredBaseType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CreateInstanceFromVirtualPath(string virtualPath, class System.Type requiredBaseType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildManager.CreateInstanceFromVirtualPath(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateInstanceFromVirtualPath (virtualPath As String, requiredBaseType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CreateInstanceFromVirtualPath(System::String ^ virtualPath, Type ^ requiredBaseType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
        <Parameter Name="requiredBaseType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="virtualPath">要为其创建实例的文件的虚拟路径。</param>
        <param name="requiredBaseType">定义要创建的对象的基类型。</param>
        <summary>处理给定了虚拟路径的文件，并创建结果的实例。</summary>
        <returns>
          <see cref="T:System.Object" />，表示被处理文件的实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Compilation.BuildManager.CreateInstanceFromVirtualPath%2A>方法适用于编译和非编译页。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCachedBuildDependencySet">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>从 ASP.NET 缓存中返回生成依赖项集。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCachedBuildDependencySet">
      <MemberSignature Language="C#" Value="public static System.Web.Compilation.BuildDependencySet GetCachedBuildDependencySet (System.Web.HttpContext context, string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Compilation.BuildDependencySet GetCachedBuildDependencySet(class System.Web.HttpContext context, string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildManager.GetCachedBuildDependencySet(System.Web.HttpContext,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCachedBuildDependencySet (context As HttpContext, virtualPath As String) As BuildDependencySet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Compilation::BuildDependencySet ^ GetCachedBuildDependencySet(System::Web::HttpContext ^ context, System::String ^ virtualPath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Compilation.BuildDependencySet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="context">请求的上下文。</param>
        <param name="virtualPath">确定生成依赖项集的虚拟路径。</param>
        <summary>如果虚拟路径位于 ASP.NET 缓存中，则为虚拟路径返回生成依赖项集。</summary>
        <returns>存储在缓存中的 <see cref="T:System.Web.Compilation.BuildDependencySet" /> 对象，或者，如果无法从缓存中检索 <see cref="T:System.Web.Compilation.BuildDependencySet" /> 对象，则为 <see langword="null" />。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.Compilation.BuildDependencySet" />
        <altmember cref="P:System.Web.Compilation.BuildProvider.VirtualPathDependencies" />
      </Docs>
    </Member>
    <Member MemberName="GetCachedBuildDependencySet">
      <MemberSignature Language="C#" Value="public static System.Web.Compilation.BuildDependencySet GetCachedBuildDependencySet (System.Web.HttpContext context, string virtualPath, bool ensureIsUpToDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Compilation.BuildDependencySet GetCachedBuildDependencySet(class System.Web.HttpContext context, string virtualPath, bool ensureIsUpToDate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildManager.GetCachedBuildDependencySet(System.Web.HttpContext,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCachedBuildDependencySet (context As HttpContext, virtualPath As String, ensureIsUpToDate As Boolean) As BuildDependencySet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Compilation::BuildDependencySet ^ GetCachedBuildDependencySet(System::Web::HttpContext ^ context, System::String ^ virtualPath, bool ensureIsUpToDate);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Compilation.BuildDependencySet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="virtualPath" Type="System.String" />
        <Parameter Name="ensureIsUpToDate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="context">请求的上下文。</param>
        <param name="virtualPath">确定生成依赖项集的虚拟路径。</param>
        <param name="ensureIsUpToDate">
          如果为 <see langword="true" />，则指定只应返回最新的生成依赖项集，或者，如果为 <see langword="false" />，则指示应返回任何可用的生成依赖项集（即使不是最新）。 默认值为 <see langword="true" />。</param>
        <summary>如果虚拟路径位于 ASP.NET 缓存中，则为虚拟路径返回生成依赖项集，即使内容不是最新也是如此。</summary>
        <returns>存储在缓存中的 <see cref="T:System.Web.Compilation.BuildDependencySet" /> 对象，或者，如果无法从缓存中检索 <see cref="T:System.Web.Compilation.BuildDependencySet" /> 对象，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`ensureIsUpToDate`参数值设置为`true`、<xref:System.Web.Compilation.BuildManager.GetCachedBuildDependencySet%2A?displayProperty=nameWithType>方法重载的行为类似<xref:System.Web.Compilation.BuildManager.GetCachedBuildDependencySet%2A?displayProperty=nameWithType>方法重载。 这两个重载返回当前生成依赖关系设置如果存在，否则它们会返回`null`。  
  
 但是，<xref:System.Web.Compilation.BuildManager.GetCachedBuildDependencySet%2A?displayProperty=nameWithType>方法重载包含返回的选项不可用，任何生成依赖项集甚至过时的一个。 如果`ensureIsUpToDate`参数值设置为`false`，该方法将返回任何可用的生成依赖项集。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCompiledAssembly">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly GetCompiledAssembly (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly GetCompiledAssembly(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildManager.GetCompiledAssembly(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCompiledAssembly (virtualPath As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ GetCompiledAssembly(System::String ^ virtualPath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">要生成为程序集的虚拟路径。</param>
        <summary>使用指定虚拟路径将文件编译为程序集。</summary>
        <returns>从指定的虚拟路径进行编译并缓存到内存或磁盘的 <see cref="T:System.Reflection.Assembly" /> 对象。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.Compilation.BuildProvider" />
        <altmember cref="T:System.Web.Compilation.AssemblyBuilder" />
      </Docs>
    </Member>
    <Member MemberName="GetCompiledCustomString">
      <MemberSignature Language="C#" Value="public static string GetCompiledCustomString (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetCompiledCustomString(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildManager.GetCompiledCustomString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCompiledCustomString (virtualPath As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetCompiledCustomString(System::String ^ virtualPath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">要生成的文件的虚拟路径。</param>
        <summary>编译给定了虚拟路径的文件，并返回生成提供程序保存在缓存中的自定义字符串。</summary>
        <returns>由缓存到磁盘或内存的 <see cref="M:System.Web.Compilation.BuildProvider.GetCustomString(System.CodeDom.Compiler.CompilerResults)" /> 方法返回的字符串。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.Compilation.BuildProvider.GetCustomString(System.CodeDom.Compiler.CompilerResults)" />
      </Docs>
    </Member>
    <Member MemberName="GetCompiledType">
      <MemberSignature Language="C#" Value="public static Type GetCompiledType (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetCompiledType(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildManager.GetCompiledType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCompiledType (virtualPath As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetCompiledType(System::String ^ virtualPath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">要生成为某个类型的虚拟路径。</param>
        <summary>编译给定了虚拟路径的文件，并返回编译类型。</summary>
        <returns>一个 <see cref="T:System.Type" /> 对象，表示通过编译虚拟路径生成的类型。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Web.HttpException">编译虚拟路径时发生错误。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="virtualPath" /> 为 <see langword="null" />。</exception>
        <altmember cref="M:System.Web.Compilation.BuildProvider.GetGeneratedType(System.CodeDom.Compiler.CompilerResults)" />
      </Docs>
    </Member>
    <Member MemberName="GetGlobalAsaxType">
      <MemberSignature Language="C#" Value="public static Type GetGlobalAsaxType ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetGlobalAsaxType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildManager.GetGlobalAsaxType" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetGlobalAsaxType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetGlobalAsaxType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取表示 Global.asax 文件编译的类型的对象。</summary>
        <returns>表示 Global.asax 文件编译的类型的对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果之前已编译的 Global.asax 文件调用此方法，将引发异常。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">已尝试编译 Global.asax 页之前调用此方法。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetObjectFactory">
      <MemberSignature Language="C#" Value="public static System.Web.Util.IWebObjectFactory GetObjectFactory (string virtualPath, bool throwIfNotFound);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Util.IWebObjectFactory GetObjectFactory(string virtualPath, bool throwIfNotFound) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildManager.GetObjectFactory(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetObjectFactory (virtualPath As String, throwIfNotFound As Boolean) As IWebObjectFactory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Util::IWebObjectFactory ^ GetObjectFactory(System::String ^ virtualPath, bool throwIfNotFound);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.IWebObjectFactory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
        <Parameter Name="throwIfNotFound" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="virtualPath">虚拟路径。</param>
        <param name="throwIfNotFound">
          如果要在虚拟路径不存在时引发错误，则为 <see langword="true" />；否则为 <see langword="false" />。 如果虚拟路径不存在，并且 <c>throwIfNotFound</c> 为 <see langword="false" />，则此方法返回 <see langword="null" />。</param>
        <summary>为指定虚拟路径获取对象工厂。</summary>
        <returns>对象工厂。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法返回，可以通过编译的虚拟路径生成一种类型的对象。 它返回而不考虑 Web 站点是否预编译的对象。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">虚拟路径不存在。  
  
 或  
  
 在调用该方法时已存在更高级别的异常。  
  
 或  
  
 在编译过程构建顶级文件时调用此方法。  
  
 或  
  
 这是一个预编译的应用程序，在缓存中找不到虚拟路径。  
  
 或  
  
 检测到含循环引用。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetReferencedAssemblies">
      <MemberSignature Language="C#" Value="public static System.Collections.ICollection GetReferencedAssemblies ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ICollection GetReferencedAssemblies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildManager.GetReferencedAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetReferencedAssemblies () As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ICollection ^ GetReferencedAssemblies();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回所有页编译都必须引用的程序集引用的列表。</summary>
        <returns>程序集引用的 <see cref="T:System.Collections.ICollection" /> 集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 从返回的程序集的集合<xref:System.Web.Compilation.BuildManager.GetReferencedAssemblies%2A>方法在其他顶级文件夹包含的元素的 Web.config 文件中指定的程序集、 在 App_Code 目录中，自定义代码中生成的程序集和程序集。  
  
 <xref:System.Web.Compilation.BuildManager.GetReferencedAssemblies%2A> 是.NET Framework 3.5 版中引入的。  有关详细信息，请参见 [.NET Framework 版本和依赖关系](~/docs/framework/migration-guide/versions-and-dependencies.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetType">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在顶级程序集或配置中定义的程序集内查找类型。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 顶级程序集引用 Global.asax 文件中，或引用 App_GlobalResources、 App_WebReferences、 App_Code，或 App_Browsers 目录中的文件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildManager.GetType(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, bool throwOnError);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName">类型的名称。</param>
        <param name="throwOnError">
          如果无法为类型名称生成 <see cref="T:System.Type" /> 对象，则为 <see langword="true" /> 以引发异常；否则为 <see langword="false" />。</param>
        <summary>在顶级程序集或配置中定义的程序集内查找类型，失败时可选择引发异常。</summary>
        <returns>一个 <see cref="T:System.Type" /> 对象，表示请求的 <paramref name="typeName" /> 参数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 顶级程序集引用 Global.asax 文件中，或引用 App_GlobalResources、 App_WebReferences、 App_Code，或 App_Browsers 目录中的文件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">
          <paramref name="typeName" /> 无效。  
  
 \- 或 -  
  
 <paramref name="typeName" /> 不明确。  
  
 \- 或 -  
  
 未能找到 <paramref name="typeName" />，且 <paramref name="throwOnError" /> 为 <see langword="true" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, bool throwOnError, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildManager.GetType(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, throwOnError As Boolean, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, bool throwOnError, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName">类型的名称。</param>
        <param name="throwOnError">
          如果无法为类型名称生成 <see cref="T:System.Type" />，则为 <see langword="true" /> 以引发异常；否则为 <see langword="false" />。</param>
        <param name="ignoreCase">
          如果 <c>typeName</c> 区分大小写，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>使用不区分大小写的搜索，在顶级程序集或配置中定义的程序集内查找类型，失败时可选择引发异常。</summary>
        <returns>一个 <see cref="T:System.Type" /> 对象，表示请求的 <paramref name="typeName" /> 参数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 顶级程序集引用 Global.asax 文件中，或引用 App_GlobalResources、 App_WebReferences、 App_Code，或 App_Browsers 目录中的文件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">
          <paramref name="typeName" /> 无效。  
  
 \- 或 -  
  
 <paramref name="typeName" /> 不明确。  
  
 \- 或 -  
  
 未能找到 <paramref name="typeName" />，且 <paramref name="throwOnError" /> 为 <see langword="true" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetVirtualPathDependencies">
      <MemberSignature Language="C#" Value="public static System.Collections.ICollection GetVirtualPathDependencies (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ICollection GetVirtualPathDependencies(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildManager.GetVirtualPathDependencies(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetVirtualPathDependencies (virtualPath As String) As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ICollection ^ GetVirtualPathDependencies(System::String ^ virtualPath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">用于确定依赖项的虚拟路径。</param>
        <summary>为指定虚拟路径提供虚拟路径依赖项的集合。</summary>
        <returns>缓存虚拟路径依赖项的虚拟路径所表示的文件的 <see cref="T:System.Collections.ICollection" /> 集合。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrecompiledApp">
      <MemberSignature Language="C#" Value="public static bool IsPrecompiledApp { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsPrecompiledApp" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.BuildManager.IsPrecompiledApp" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsPrecompiledApp As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsPrecompiledApp { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个指定应用程序是否编译的值。</summary>
        <value>
          如果可以预编译应用程序，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUpdatablePrecompiledApp">
      <MemberSignature Language="C#" Value="public static bool IsUpdatablePrecompiledApp { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsUpdatablePrecompiledApp" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.BuildManager.IsUpdatablePrecompiledApp" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsUpdatablePrecompiledApp As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsUpdatablePrecompiledApp { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个指定应用程序是否编译为可更新的值。</summary>
        <value>
          如果应用程序可以更新预编译，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadCachedFile">
      <MemberSignature Language="C#" Value="public static System.IO.Stream ReadCachedFile (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream ReadCachedFile(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildManager.ReadCachedFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadCachedFile (fileName As String) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ ReadCachedFile(System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">要读取的文件的名称。</param>
        <summary>读取一个缓存文件。</summary>
        <returns>文件的 <see cref="T:System.IO.Stream" /> 对象；如果文件不存在，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法与<xref:System.Web.Compilation.BuildManager.CreateCachedFile%2A>方法使您能够执行缓存在部分信任环境中的应用程序域重新启动继续存在。 它使用缓存结果的控制器查找 MVC 框架。  
  
 若要检索缓存的数据，你从读取<xref:System.IO.Stream>此方法返回的对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetFramework">
      <MemberSignature Language="C#" Value="public static System.Runtime.Versioning.FrameworkName TargetFramework { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Runtime.Versioning.FrameworkName TargetFramework" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.BuildManager.TargetFramework" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TargetFramework As FrameworkName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Runtime::Versioning::FrameworkName ^ TargetFramework { System::Runtime::Versioning::FrameworkName ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Versioning.FrameworkName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前网站的 .NET Framework 的目标版本。</summary>
        <value>当前网站的 .NET Framework 的目标版本。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性支持 ASP.NET 多目标功能后，它使你能够使用最新版本的 Visual Studio 来开发应用程序将运行使用.NET Framework 的早期版本。 生成提供程序可以使用此属性以确保在提供程序生成适用于.NET Framework 的目标版本的代码。 例如，你可能想要生成不同的代码，具体取决于是否网站目标[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]或[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]。 有关多目标的详细信息，请参阅[用于 ASP.NET Web 项目的.NET Framework 多目标](http://msdn.microsoft.com/library/8b8145a9-62f6-4fc4-8a83-47b0487cbe76)。  
  
 如果网站没有 Web.config 文件，ASP.NET 将假定目标框架版本是否与站点下运行的 IIS 应用程序池相关联的版本。 文件系统网站运行在 Visual Studio 中，默认 framework 版本为.NET Framework 的当前版本。  
  
 如果网站确实具有 Web.config 文件，ASP.NET 将确定通过检查 Web.config 文件的目标框架。  
  
## <a name="web-sites-that-target-the-net-framework-20"></a>面向.NET Framework 2.0 的 Web 站点  
 Web 应用程序面向[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]就像目标是编译[!INCLUDE[net_v30_short](~/includes/net-v30-short-md.md)]。 生成过程之间没有区别[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]和[!INCLUDE[net_v30_short](~/includes/net-v30-short-md.md)]因为 Web.config 文件并不表示编译器版本或目标 framework 时这些版本之一为目标。 (有关[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]，Web.config 文件指定编译器版本，以及[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]，Web.config 文件指定的目标框架。)因此，用于监视 Web 应用程序面向[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]，此属性返回指示的目标框架名字对象[!INCLUDE[net_v30_short](~/includes/net-v30-short-md.md)]。  
  
 这通常不会导致任何问题。 Visual Studio 阻止你创建对引用[!INCLUDE[net_v30_short](~/includes/net-v30-short-md.md)]目标的项目中的功能[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]。 例如，Visual Studio 不提供项模板的目标的项目中的 WCF 服务[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]，因为 WCF 中引入了[!INCLUDE[net_v30_short](~/includes/net-v30-short-md.md)]和与不兼容[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]。  
  
 如果你打算部署中的 Web 站点[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]运行时环境和你使用的引用仅与兼容的功能而非 Visual Studio 工具[!INCLUDE[net_v30_short](~/includes/net-v30-short-md.md)]，生成项目时可能未生成错误或警告。 但是，应用程序可能会产生错误，Web 站点运行时[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>