<Type Name="BuildProvider" FullName="System.Web.Compilation.BuildProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="37a3148889c3b14f07bc04c2fad9bdab14236993" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36404970" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class BuildProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit BuildProvider extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Compilation.BuildProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class BuildProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class BuildProvider abstract" />
  <TypeSignature Language="F#" Value="type BuildProvider = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>定义一组用于在 ASP.NET 生成环境中生成源代码的属性和方法。 此类为抽象类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET 生成环境使用<xref:System.Web.Compilation.BuildProvider>要为应用程序中的不同文件类型生成源代码的对象。 类派生自<xref:System.Web.Compilation.BuildProvider>主要用于文件、 网页、 资源和其他自定义项中提供的源代码。  
  
 通常情况下，你不创建的实例<xref:System.Web.Compilation.BuildProvider>类直接。 相反，实现派生自的类<xref:System.Web.Compilation.BuildProvider>，并配置<xref:System.Web.Compilation.BuildProvider>以便在 ASP.NET 中使用的实现构建环境。  
  
 实例<xref:System.Web.Compilation.BuildProvider>类用于<xref:System.Web.Compilation.AssemblyBuilder>融入编译的程序集的一个或多个文件的对象。 A<xref:System.Web.Compilation.BuildProvider>实例在单个文件的相应语言生成源代码和<xref:System.Web.Compilation.AssemblyBuilder>对象将合并每个提供的源代码<xref:System.Web.Compilation.BuildProvider>为单个程序集的实例。  
  
 ASP.NET 生成环境使用的实例<xref:System.Web.Compilation.BuildProvider>类，以生成应用程序中的文件。 <xref:System.Web.Compilation.BuildProvider.VirtualPath%2A>属性<xref:System.Web.Compilation.BuildProvider>类指示要生成的文件的路径。 应用程序中的每个文件的文件扩展名映射到相应的生成提供程序。 ASP.NET 生成环境初始化<xref:System.Web.Compilation.BuildProvider>实例的每个文件基于文件扩展名，并使用<xref:System.Web.Compilation.BuildProvider>方法生成的文件的源代码。 ASP.NET 生成环境传递<xref:System.Web.Compilation.AssemblyBuilder>根据首选的编译器语言的文件的上下文对象<xref:System.Web.Compilation.BuildProvider>方法生成来自一个或多个文件的程序集时，以便<xref:System.Web.Compilation.BuildProvider>实例可能会造成影响对整个程序集及其文件的源代码。  
  
 若要定义用于 ASP.NET 应用程序中的文件类型的自定义生成操作，你必须从派生类<xref:System.Web.Compilation.BuildProvider>、 实现用于生成文件类型的派生类中的成员和配置的生成提供程序的相应的文件扩展名在应用程序配置文件。  
  
 指定的文件扩展名为受支持的文件，并在生成提供程序支持文件、 Web 文件、 资源文件或所有文件。 使用`type`特性以指定的生成提供程序实现的完全限定的类型名称。 使用<xref:System.Web.Compilation.BuildProviderAppliesToAttribute>类指定在生成提供程序应用到 App_Code 目录中的文件、 Web 内容目录，为全局或本地资源中的文件或所有文件。 使用`extension`特性来指定用于标识的文件扩展名的文件<xref:System.Web.Compilation.BuildProvider>类支持。 使用<xref:System.Web.Configuration.BuildProviderCollection>类来检查生成提供程序配置文件中的。 有关配置的生成提供程序的详细信息，请参阅[buildProviders 元素进行编译 （ASP.NET 设置架构）](http://msdn.microsoft.com/library/40fa889d-5412-487a-b6a9-21eb011c2384)。  
  
 若要实现为自定义文件类型生成源代码的生成提供程序，从派生类<xref:System.Web.Compilation.BuildProvider>，并重写<xref:System.Web.Compilation.BuildProvider.GenerateCode%2A>方法来为支持的文件类型生成源代码。 生成的源代码添加到<xref:System.Web.Compilation.AssemblyBuilder>形式在 CodeDOM 图中，或者作为表示物理源代码文件的内容的对象。 如果在生成提供程序需要特定的编程语言，重写<xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A>属性以返回<xref:System.Web.Compilation.CompilerType>的受支持的编程语言的对象。 如果在生成提供程序不需要特定的编程语言，不会覆盖<xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A>属性; 请改用基类实现，它指示在生成提供程序可以使用任何.NET Framework 语言，如 Visual Basic 或 C#。  
  
 若要实现 Web 内容为生成源代码的生成提供程序，从派生类<xref:System.Web.Compilation.BuildProvider>，并重写<xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A>方法以返回<xref:System.Type>为生成的类<xref:System.Web.Compilation.BuildProvider>。 重写<xref:System.Web.Compilation.BuildProvider.GenerateCode%2A>方法为提供的受支持的文件类型生成源代码。  
  
> [!NOTE]
>  添加自定义<xref:System.Web.Compilation.BuildProvider>对 Web.config 文件的类在 ASP.NET 网站中工作，但在 ASP.NET Web 应用程序项目无法正常运行。 在 Web 应用程序项目中，通过生成的代码<xref:System.Web.Compilation.BuildProvider>类不能包含在应用程序。 有关详细信息，请参阅[ASP.NET Web 应用程序项目预编译概述](http://msdn.microsoft.com/library/b940abbd-178d-4570-b441-52914fa7b887)。  
  
   
  
## Examples  
 下面的代码示例演示一个简单的生成提供程序实现，它继承的抽象<xref:System.Web.Compilation.BuildProvider>基类。 生成提供程序重写<xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A>， <xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A>，和<xref:System.Web.Compilation.BuildProvider.GenerateCode%2A>基类的成员。 该示例不包括的实现`SampleClassGenerator`类。 有关详细信息，请参阅<xref:System.CodeDom.CodeCompileUnit>类概述。  
  
 [!code-csharp[System.Web.Compilation.SampleBuildProvider_2#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.SampleBuildProvider_2/CS/Class1.cs#2)]
 [!code-vb[System.Web.Compilation.SampleBuildProvider_2#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.SampleBuildProvider_2/VB/Class1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Compilation.CompilerType" />
    <altmember cref="T:System.Web.Compilation.ClientBuildManager" />
    <altmember cref="T:System.Web.Compilation.AssemblyBuilder" />
    <altmember cref="T:System.Web.Configuration.BuildProvider" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected BuildProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; BuildProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.Compilation.BuildProvider" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 因为<xref:System.Web.Compilation.BuildProvider>类为抽象类，你无法创建的实例<xref:System.Web.Compilation.BuildProvider>直接使用构造函数。  
  
 从派生时<xref:System.Web.Compilation.BuildProvider>类中，重写构造函数来实现你的生成提供程序实现的自定义初始化操作。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CodeCompilerType">
      <MemberSignature Language="C#" Value="public virtual System.Web.Compilation.CompilerType CodeCompilerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Compilation.CompilerType CodeCompilerType" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.BuildProvider.CodeCompilerType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CodeCompilerType As CompilerType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::Compilation::CompilerType ^ CodeCompilerType { System::Web::Compilation::CompilerType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeCompilerType : System.Web.Compilation.CompilerType" Usage="System.Web.Compilation.BuildProvider.CodeCompilerType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Compilation.CompilerType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示生成提供程序为自定义文件类型生成源代码所使用的编译器类型。</summary>
        <value>只读 <see cref="T:System.Web.Compilation.CompilerType" />，表示用于生成虚拟路径的源代码的代码生成器、代码编译器和编译器设置。 基类返回 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A>属性来提供设置编译的实现的源代码<xref:System.Web.Compilation.BuildProvider>。 <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A>属性是`null`如果生成提供程序不需要特定的代码语言生成和编译源代码。  
  
 若要设置的值<xref:System.Web.Compilation.CompilerType>中生成提供程序实现中，使用对象<xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerType%2A>或<xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage%2A>方法。  
  
 <xref:System.Web.Compilation.CompilerType.CodeDomProviderType%2A>属性指定<xref:System.CodeDom.Compiler.CodeDomProvider>用于生成和编译为生成提供程序的源代码的实现。 <xref:System.Web.Compilation.CompilerType.CompilerParameters%2A>属性定义的设置，用于将源代码编译为程序集。  
  
   
  
## Examples  
 下面的代码示例演示一个简单的生成提供程序实现，它继承的抽象<xref:System.Web.Compilation.BuildProvider>基类。 生成提供程序重写<xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A>， <xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A>，和<xref:System.Web.Compilation.BuildProvider.GenerateCode%2A>基类的成员。  
  
 [!code-csharp[System.Web.Compilation.SampleBuildProvider_2#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.SampleBuildProvider_2/CS/Class1.cs#2)]
 [!code-vb[System.Web.Compilation.SampleBuildProvider_2#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.SampleBuildProvider_2/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.CompilerType" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCode">
      <MemberSignature Language="C#" Value="public virtual void GenerateCode (System.Web.Compilation.AssemblyBuilder assemblyBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCode(class System.Web.Compilation.AssemblyBuilder assemblyBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.GenerateCode(System.Web.Compilation.AssemblyBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCode(System::Web::Compilation::AssemblyBuilder ^ assemblyBuilder);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCode : System.Web.Compilation.AssemblyBuilder -&gt; unit&#xA;override this.GenerateCode : System.Web.Compilation.AssemblyBuilder -&gt; unit" Usage="buildProvider.GenerateCode assemblyBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyBuilder" Type="System.Web.Compilation.AssemblyBuilder" />
      </Parameters>
      <Docs>
        <param name="assemblyBuilder">引用生成提供程序所生成的源代码的程序集生成器。</param>
        <summary>为生成提供程序的虚拟路径生成源代码，并将源代码添加到指定程序集生成器。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要实现为自定义文件类型生成源代码的生成提供程序，从派生类<xref:System.Web.Compilation.BuildProvider>类，并重写<xref:System.Web.Compilation.BuildProvider.GenerateCode%2A>方法来为支持的文件类型生成源代码。  
  
 通常情况下，生成提供程序的<xref:System.Web.Compilation.BuildProvider.GenerateCode%2A>实现会读取<xref:System.Web.Compilation.BuildProvider.VirtualPath%2A>属性，分析内容，并将所生成的源代码添加到指定<xref:System.Web.Compilation.AssemblyBuilder>对象。 你可参与源代码中的窗体的程序集<xref:System.IO.TextWriter>对象或在 CodeDOM 图。 若要将源代码添加到的程序集通过<xref:System.IO.TextWriter>对象，请使用<xref:System.Web.Compilation.AssemblyBuilder.CreateCodeFile%2A>方法。 若要将源代码在 CodeDOM 图中添加对程序集，使用<xref:System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit%2A>方法。  
  
 如果在生成提供程序采用特定编程语言生成源代码，则必须重写<xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A>属性以返回<xref:System.Web.Compilation.CompilerType>的受支持的编程语言的对象。  
  
   
  
## Examples  
 下面的代码示例演示一个简单的生成提供程序实现，它继承的抽象<xref:System.Web.Compilation.BuildProvider>基类。 生成提供程序重写<xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A>， <xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A>，和<xref:System.Web.Compilation.BuildProvider.GenerateCode%2A>基类的成员。  
  
 [!code-csharp[System.Web.Compilation.SampleBuildProvider_2#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.SampleBuildProvider_2/CS/Class1.cs#2)]
 [!code-vb[System.Web.Compilation.SampleBuildProvider_2#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.SampleBuildProvider_2/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.Compilation.BuildProvider.OpenReader" />
        <altmember cref="Overload:System.Web.Compilation.BuildProvider.OpenStream" />
        <altmember cref="T:System.Web.Compilation.AssemblyBuilder" />
      </Docs>
    </Member>
    <Member MemberName="GetCodeCompileUnit">
      <MemberSignature Language="C#" Value="protected internal virtual System.CodeDom.CodeCompileUnit GetCodeCompileUnit (out System.Collections.IDictionary linePragmasTable);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.CodeDom.CodeCompileUnit GetCodeCompileUnit([out] class System.Collections.IDictionary&amp; linePragmasTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.GetCodeCompileUnit(System.Collections.IDictionary@)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetCodeCompileUnit (ByRef linePragmasTable As IDictionary) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::CodeDom::CodeCompileUnit ^ GetCodeCompileUnit([Runtime::InteropServices::Out] System::Collections::IDictionary ^ % linePragmasTable);" />
      <MemberSignature Language="F#" Value="abstract member GetCodeCompileUnit :  -&gt; System.CodeDom.CodeCompileUnit&#xA;override this.GetCodeCompileUnit :  -&gt; System.CodeDom.CodeCompileUnit" Usage="buildProvider.GetCodeCompileUnit linePragmasTable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="linePragmasTable" Type="System.Collections.IDictionary&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="linePragmasTable">当此方法返回时，该参数将包含一个字典，该字典包含源代码中所有关联行号和行杂注。 此参数未经初始化即被传递。</param>
        <summary>表示生成的 CodeDOM 关系图的容器。</summary>
        <returns>
          <see cref="T:System.Web.Compilation.BuildProvider" /> 实例生成的 CodeDOM 关系图的容器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以通过使用此方法<xref:System.Web.Compilation.ClientBuildManager>类的 Visual Studio 中支持的语法突出显示和设计器。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomString">
      <MemberSignature Language="C#" Value="public virtual string GetCustomString (System.CodeDom.Compiler.CompilerResults results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetCustomString(class System.CodeDom.Compiler.CompilerResults results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.GetCustomString(System.CodeDom.Compiler.CompilerResults)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCustomString (results As CompilerResults) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetCustomString(System::CodeDom::Compiler::CompilerResults ^ results);" />
      <MemberSignature Language="F#" Value="abstract member GetCustomString : System.CodeDom.Compiler.CompilerResults -&gt; string&#xA;override this.GetCustomString : System.CodeDom.Compiler.CompilerResults -&gt; string" Usage="buildProvider.GetCustomString results" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="results" Type="System.CodeDom.Compiler.CompilerResults" />
      </Parameters>
      <Docs>
        <param name="results">生成提供程序的虚拟路径的编译结果。</param>
        <summary>生成要在编译后的程序集中保留的字符串。</summary>
        <returns>要保留在生成环境中的字符串；如果 <see cref="T:System.Web.Compilation.BuildProvider" /> 实例不实现 <see cref="M:System.Web.Compilation.BuildProvider.GetCustomString(System.CodeDom.Compiler.CompilerResults)" />，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Compilation.BuildManager.GetCompiledCustomString%2A>方法<xref:System.Web.Compilation.BuildManager>对象创建的生成提供程序输入的虚拟路径，并调用的实例<xref:System.Web.Compilation.BuildProvider.GetCustomString%2A>方法<xref:System.Web.Compilation.BuildProvider>对象。  
  
 基<xref:System.Web.Compilation.BuildProvider>类返回`null`为<xref:System.Web.Compilation.BuildProvider.GetCustomString%2A>方法，指示<xref:System.Web.Compilation.BuildProvider.GetCustomString%2A>未实现。  
  
 某些生成提供程序实现可以实现<xref:System.Web.Compilation.BuildProvider.GetCustomString%2A>代替了<xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A>方法。 A<xref:System.Web.Compilation.BuildProvider>对象通常使用<xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A>返回<xref:System.Type>虚拟路径的对象。 但是，<xref:System.Web.Compilation.BuildProvider.GetCustomString%2A>方法可以用于指示<xref:System.Web.Compilation.BuildProvider>对象可以从虚拟路径生成多个类型。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.Compiler.CompilerResults" />
        <altmember cref="M:System.Web.Compilation.BuildManager.GetCompiledCustomString(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetDefaultCompilerType">
      <MemberSignature Language="C#" Value="protected System.Web.Compilation.CompilerType GetDefaultCompilerType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Web.Compilation.CompilerType GetDefaultCompilerType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.GetDefaultCompilerType" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetDefaultCompilerType () As CompilerType" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Web::Compilation::CompilerType ^ GetDefaultCompilerType();" />
      <MemberSignature Language="F#" Value="member this.GetDefaultCompilerType : unit -&gt; System.Web.Compilation.CompilerType" Usage="buildProvider.GetDefaultCompilerType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Compilation.CompilerType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回应用程序中默认语言的编译器设置。</summary>
        <returns>
          <see cref="T:System.Web.Compilation.CompilerType" />，表示应用程序中默认语言的编译器设置。 基类根据应用程序配置文件返回默认编译器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerType%2A>方法可为生成提供程序检查默认的编译器类型。 使用<xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage%2A>方法可检查配置中的生成提供程序特定语言名称的编译器类型。  
  
 基<xref:System.Web.Compilation.BuildProvider>类可确定默认的编译器类型使用`defaultLanguage`属性值的部分中的应用程序配置文件。 如果没有编译部分中的默认语言设置，使用设置的默认编译器类型<xref:Microsoft.VisualBasic.VBCodeProvider>语言提供程序。  
  
 从派生时<xref:System.Web.Compilation.BuildProvider>类，可以使用<xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerType%2A>设置<xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A>中实现的属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.CompilerType" />
        <altmember cref="M:System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetDefaultCompilerTypeForLanguage">
      <MemberSignature Language="C#" Value="protected System.Web.Compilation.CompilerType GetDefaultCompilerTypeForLanguage (string language);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Web.Compilation.CompilerType GetDefaultCompilerTypeForLanguage(string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetDefaultCompilerTypeForLanguage (language As String) As CompilerType" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Web::Compilation::CompilerType ^ GetDefaultCompilerTypeForLanguage(System::String ^ language);" />
      <MemberSignature Language="F#" Value="member this.GetDefaultCompilerTypeForLanguage : string -&gt; System.Web.Compilation.CompilerType" Usage="buildProvider.GetDefaultCompilerTypeForLanguage language" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Compilation.CompilerType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="language">代码语言名称。</param>
        <summary>根据指定的语言返回生成提供程序的编译器设置。</summary>
        <returns>
          <see cref="T:System.Web.Compilation.CompilerType" />，根据指定的语言表示生成提供程序的编译器设置。 基类根据应用程序配置文件返回该语言的默认编译器设置。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage%2A>方法可检查配置中的生成提供程序特定语言名称的编译器类型。 使用<xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerType%2A>方法可为生成提供程序检查默认的编译器类型。  
  
 基<xref:System.Web.Compilation.BuildProvider>类可确定默认的编译器类型使用<xref:System.Web.Configuration.Compiler>中的元素<xref:System.Web.Configuration.CompilationSection.Compilers%2A>属性<xref:System.Web.Configuration.CompilationSection>配置文件的对象。 这相当于检查和元素的配置文件的部分中的元素。 例如，对于`language`值 VB，基类方法将返回<xref:System.Web.Compilation.CompilerType>对应于为实例配置的设置的对象<xref:Microsoft.VisualBasic.VBCodeProvider?displayProperty=nameWithType>。  
  
 派生自<xref:System.Web.Compilation.BuildProvider>类，可以使用<xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage%2A>设置<xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A>由您的实现所支持的语言的属性值。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="language" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.Web.HttpException">
          <paramref name="language" /> 与生成提供程序的已配置编译器不匹配。</exception>
        <altmember cref="T:System.Web.Compilation.CompilerType" />
        <altmember cref="M:System.Web.Compilation.BuildProvider.GetDefaultCompilerType" />
        <altmember cref="P:System.Web.Configuration.CompilationSection.Compilers" />
        <altmember cref="T:System.Web.Configuration.Compiler" />
      </Docs>
    </Member>
    <Member MemberName="GetGeneratedType">
      <MemberSignature Language="C#" Value="public virtual Type GetGeneratedType (System.CodeDom.Compiler.CompilerResults results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetGeneratedType(class System.CodeDom.Compiler.CompilerResults results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.GetGeneratedType(System.CodeDom.Compiler.CompilerResults)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGeneratedType (results As CompilerResults) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetGeneratedType(System::CodeDom::Compiler::CompilerResults ^ results);" />
      <MemberSignature Language="F#" Value="abstract member GetGeneratedType : System.CodeDom.Compiler.CompilerResults -&gt; Type&#xA;override this.GetGeneratedType : System.CodeDom.Compiler.CompilerResults -&gt; Type" Usage="buildProvider.GetGeneratedType results" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="results" Type="System.CodeDom.Compiler.CompilerResults" />
      </Parameters>
      <Docs>
        <param name="results">生成提供程序的虚拟路径的编译结果。</param>
        <summary>返回生成提供程序从虚拟路径生成的类型。</summary>
        <returns>生成提供程序为虚拟路径生成的类型。 基类返回 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要实现为 Web 内容如.aspx 文件生成源代码的生成提供程序，从派生类<xref:System.Web.Compilation.BuildProvider>类并重写<xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A>方法以返回生成提供程序生成的类型。  
  
 ASP.NET 生成系统会将文件编译为每个生成提供程序，并生成<xref:System.CodeDom.Compiler.CompilerResults>对象传递给<xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A>方法。 通常情况下，生成提供程序的<xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A>实现使用<xref:System.Reflection.Assembly.GetType%2A>方法<xref:System.CodeDom.Compiler.CompilerResults.CompiledAssembly%2A>属性输入`results`对象以返回所提供的类型。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.Compiler.CompilerResults" />
      </Docs>
    </Member>
    <Member MemberName="GetResultFlags">
      <MemberSignature Language="C#" Value="public virtual System.Web.Compilation.BuildProviderResultFlags GetResultFlags (System.CodeDom.Compiler.CompilerResults results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Web.Compilation.BuildProviderResultFlags GetResultFlags(class System.CodeDom.Compiler.CompilerResults results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.GetResultFlags(System.CodeDom.Compiler.CompilerResults)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetResultFlags (results As CompilerResults) As BuildProviderResultFlags" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::Compilation::BuildProviderResultFlags GetResultFlags(System::CodeDom::Compiler::CompilerResults ^ results);" />
      <MemberSignature Language="F#" Value="abstract member GetResultFlags : System.CodeDom.Compiler.CompilerResults -&gt; System.Web.Compilation.BuildProviderResultFlags&#xA;override this.GetResultFlags : System.CodeDom.Compiler.CompilerResults -&gt; System.Web.Compilation.BuildProviderResultFlags" Usage="buildProvider.GetResultFlags results" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Compilation.BuildProviderResultFlags</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="results" Type="System.CodeDom.Compiler.CompilerResults" />
      </Parameters>
      <Docs>
        <param name="results">生成提供程序的虚拟路径的编译结果。</param>
        <summary>返回指示生成虚拟路径时所需操作的值。</summary>
        <returns>
          <see cref="T:System.Web.Compilation.BuildProviderResultFlags" /> 值，指示在 ASP.NET 生成环境中生成虚拟路径后所需的操作。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Compilation.BuildProvider.GetResultFlags%2A>方法由 ASP.NET 生成环境使用的实例时<xref:System.Web.Compilation.BuildProvider>类生成文件和加载已编译的程序集。  
  
 基<xref:System.Web.Compilation.BuildProvider>类方法返回<xref:System.Web.Compilation.BuildProviderResultFlags.Default>字段值，指示生成虚拟路径时，不需要任何特殊操作。  
  
 从派生时<xref:System.Web.Compilation.BuildProvider>类，你可以实现<xref:System.Web.Compilation.BuildProvider.GetResultFlags%2A>方法以返回不同<xref:System.Web.Compilation.BuildProviderResultFlags>自定义文件类型或虚拟路径的值。 例如，如果重新生成你的虚拟路径将需要包含<xref:System.AppDomain>要重新加载，你可以返回对象<xref:System.Web.Compilation.BuildProviderResultFlags.ShutdownAppDomainOnChange>枚举值从你<xref:System.Web.Compilation.BuildProvider.GetResultFlags%2A>方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.Compiler.CompilerResults" />
        <altmember cref="T:System.Web.Compilation.BuildProviderResultFlags" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenReader">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>打开文本读取器以从虚拟路径读取。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenReader">
      <MemberSignature Language="C#" Value="protected System.IO.TextReader OpenReader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.IO.TextReader OpenReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.OpenReader" />
      <MemberSignature Language="VB.NET" Value="Protected Function OpenReader () As TextReader" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::IO::TextReader ^ OpenReader();" />
      <MemberSignature Language="F#" Value="member this.OpenReader : unit -&gt; System.IO.TextReader" Usage="buildProvider.OpenReader " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>打开文本读取器以从当前生成提供程序对象的虚拟路径读取。</summary>
        <returns>打开的 <see cref="T:System.IO.TextReader" />，可用于读取 <see cref="P:System.Web.Compilation.BuildProvider.VirtualPath" /> 的内容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.IO.TextReader.Read%2A>方法返回<xref:System.IO.TextReader>要读取的内容对象<xref:System.Web.Compilation.BuildProvider.VirtualPath%2A>属性<xref:System.Web.Compilation.BuildProvider>对象。  
  
 在调用<xref:System.Web.Compilation.BuildProvider.OpenReader%2A>方法，则必须使用<xref:System.IO.TextReader.Close%2A>方法来关闭<xref:System.IO.TextReader>对象并释放关联的系统资源。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextReader" />
        <altmember cref="P:System.Web.Compilation.BuildProvider.VirtualPath" />
      </Docs>
    </Member>
    <Member MemberName="OpenReader">
      <MemberSignature Language="C#" Value="protected System.IO.TextReader OpenReader (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.IO.TextReader OpenReader(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.OpenReader(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function OpenReader (virtualPath As String) As TextReader" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::IO::TextReader ^ OpenReader(System::String ^ virtualPath);" />
      <MemberSignature Language="F#" Value="member this.OpenReader : string -&gt; System.IO.TextReader" Usage="buildProvider.OpenReader virtualPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">要读取的虚拟路径。</param>
        <summary>打开文本读取器以从指定的虚拟路径读取。</summary>
        <returns>打开的 <see cref="T:System.IO.TextReader" />，可用于读取指定的虚拟路径的内容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.IO.TextReader.Read%2A>方法返回的<xref:System.IO.TextReader>对象来读取的虚拟路径的内容。  
  
 在调用<xref:System.Web.Compilation.BuildProvider.OpenReader%2A>方法，则必须使用<xref:System.IO.TextReader.Close%2A>方法来关闭<xref:System.IO.TextReader>对象并释放关联的系统资源。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextReader" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenStream">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>打开流以从虚拟路径读取。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenStream">
      <MemberSignature Language="C#" Value="protected System.IO.Stream OpenStream ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.IO.Stream OpenStream() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.OpenStream" />
      <MemberSignature Language="VB.NET" Value="Protected Function OpenStream () As Stream" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::IO::Stream ^ OpenStream();" />
      <MemberSignature Language="F#" Value="member this.OpenStream : unit -&gt; System.IO.Stream" Usage="buildProvider.OpenStream " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>打开流以读取当前生成提供程序对象的虚拟路径。</summary>
        <returns>打开的 <see cref="T:System.IO.Stream" />，可用于读取 <see cref="P:System.Web.Compilation.BuildProvider.VirtualPath" /> 的内容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.IO.Stream.Read%2A>方法返回<xref:System.IO.Stream>要读取的虚拟路径的内容对象<xref:System.Web.Compilation.BuildProvider>对象。  
  
 在调用<xref:System.Web.Compilation.BuildProvider.OpenStream%2A>方法，则必须使用<xref:System.IO.Stream.Close%2A>方法来关闭<xref:System.IO.Stream>对象并释放关联的系统资源。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="P:System.Web.Compilation.BuildProvider.VirtualPath" />
      </Docs>
    </Member>
    <Member MemberName="OpenStream">
      <MemberSignature Language="C#" Value="protected System.IO.Stream OpenStream (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.IO.Stream OpenStream(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.OpenStream(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function OpenStream (virtualPath As String) As Stream" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::IO::Stream ^ OpenStream(System::String ^ virtualPath);" />
      <MemberSignature Language="F#" Value="member this.OpenStream : string -&gt; System.IO.Stream" Usage="buildProvider.OpenStream virtualPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">要读取的虚拟路径。</param>
        <summary>打开流以从指定的虚拟路径读取。</summary>
        <returns>打开的 <see cref="T:System.IO.Stream" />，可用于读取指定的虚拟路径的内容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.IO.Stream.Read%2A>方法返回的<xref:System.IO.Stream>对象来读取的虚拟路径的内容。  
  
 在调用<xref:System.Web.Compilation.BuildProvider.OpenStream%2A>方法，则必须使用<xref:System.IO.Stream.Close%2A>方法来关闭<xref:System.IO.Stream>对象并释放关联的系统资源。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.Stream" />
      </Docs>
    </Member>
    <Member MemberName="ProcessCompileErrors">
      <MemberSignature Language="C#" Value="public virtual void ProcessCompileErrors (System.CodeDom.Compiler.CompilerResults results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessCompileErrors(class System.CodeDom.Compiler.CompilerResults results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.ProcessCompileErrors(System.CodeDom.Compiler.CompilerResults)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ProcessCompileErrors (results As CompilerResults)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ProcessCompileErrors(System::CodeDom::Compiler::CompilerResults ^ results);" />
      <MemberSignature Language="F#" Value="abstract member ProcessCompileErrors : System.CodeDom.Compiler.CompilerResults -&gt; unit&#xA;override this.ProcessCompileErrors : System.CodeDom.Compiler.CompilerResults -&gt; unit" Usage="buildProvider.ProcessCompileErrors results" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="results" Type="System.CodeDom.Compiler.CompilerResults" />
      </Parameters>
      <Docs>
        <param name="results">编译器结果。</param>
        <summary>当在派生类中被重写时，能够查看编译器错误消息，以便将其修改为提供更多信息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你通常重写此方法，以便它们为了使对用户更有帮助的错误文本显示之前，你可以修改编译器错误。 这是非常有用的认识某些错误的上下文并可向有关如何解决它们的用户提供信息的位置。 原始的编译器错误消息通常特定于特定语言构造，并可能无法实现的真正原因或解决方案明显给用户。  
  
 你可以通过使用访问错误<xref:System.CodeDom.Compiler.CompilerResults>传递给方法的对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferencedAssemblies">
      <MemberSignature Language="C#" Value="protected System.Collections.ICollection ReferencedAssemblies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection ReferencedAssemblies" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.BuildProvider.ReferencedAssemblies" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ReferencedAssemblies As ICollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::ICollection ^ ReferencedAssemblies { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReferencedAssemblies : System.Collections.ICollection" Usage="System.Web.Compilation.BuildProvider.ReferencedAssemblies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示要用生成提供程序生成的源代码进行编译的程序集。</summary>
        <value>程序集的只读集合，可由生成提供程序生成的源代码引用。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET 生成环境初始化可为生成提供程序的引用的程序集的集合。 生成提供程序生成的源代码可以使用公共类型中引用的程序集。 引用的程序集集合包含的其他 ASP.NET 应用程序，在生成的程序集和配置文件中的元素中列出的程序集。  
  
 如果生成提供程序生成引用其他程序集的源代码，生成提供程序将使用的其他程序集添加<xref:System.Web.Compilation.AssemblyBuilder.AddAssemblyReference%2A>方法。 ASP.NET 生成环境解析外部类型在使用添加的两个引用的程序集的程序集编译过程生成提供程序和可用于引用的程序集的默认集合。  
  
 <xref:System.Web.Compilation.BuildProvider.ReferencedAssemblies%2A>集合不包括程序集是通过其他生成提供程序通过添加为引用<xref:System.Web.Compilation.AssemblyBuilder.AddAssemblyReference%2A>方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.Compilation.AssemblyBuilder.AddAssemblyReference(System.Reflection.Assembly)" />
        <altmember cref="P:System.Web.Compilation.BuildProvider.VirtualPathDependencies" />
      </Docs>
    </Member>
    <Member MemberName="RegisterBuildProvider">
      <MemberSignature Language="C#" Value="public static void RegisterBuildProvider (string extension, Type providerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterBuildProvider(string extension, class System.Type providerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.RegisterBuildProvider(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterBuildProvider (extension As String, providerType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterBuildProvider(System::String ^ extension, Type ^ providerType);" />
      <MemberSignature Language="F#" Value="static member RegisterBuildProvider : string * Type -&gt; unit" Usage="System.Web.Compilation.BuildProvider.RegisterBuildProvider (extension, providerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extension" Type="System.String" />
        <Parameter Name="providerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="extension">生成提供程序所针对的文件扩展名。</param>
        <param name="providerType">生成提供程序类。</param>
        <summary>注册一个生成提供程序。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以使用此方法注册生成提供程序而不是在 Web.config 文件中定义它们。 有关生成提供程序的详细信息，请参阅<xref:System.Web.Compilation.BuildProvider>类和[buildProviders 元素进行编译 （ASP.NET 设置架构）](http://msdn.microsoft.com/library/40fa889d-5412-487a-b6a9-21eb011c2384)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VirtualPath">
      <MemberSignature Language="C#" Value="protected internal string VirtualPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string VirtualPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.BuildProvider.VirtualPath" />
      <MemberSignature Language="VB.NET" Value="Protected Friend ReadOnly Property VirtualPath As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::String ^ VirtualPath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.VirtualPath : string" Usage="System.Web.Compilation.BuildProvider.VirtualPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示要由此生成提供程序实现生成的文件。</summary>
        <value>只读字符串，指定要由此生成提供程序编译的文件的虚拟路径。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 虚拟路径<xref:System.Web.Compilation.BuildProvider>对象是正在编译生成提供程序的文件的路径。 例如，如果你已配置自定义<xref:System.Web.Compilation.BuildProvider>类，以生成具有.abc，自定义扩展的 Web 站点中的所有文件，如果您的网站名为 WebSite1，并且该网站包含一个名为 Example.abc，文件<xref:System.Web.Compilation.BuildProvider.VirtualPath%2A>属性包含值`/WebSite1/Example.abc`.  
  
 应用程序中的每个文件的文件扩展名确定文件类型，以及相应的生成提供程序为文件类型。 ASP.NET 生成环境初始化<xref:System.Web.Compilation.BuildProvider>对象每个文件基于的文件类型，并使用<xref:System.Web.Compilation.BuildProvider>要生成的每个文件的源的方法。  
  
 有关配置的生成提供程序的详细信息，请参阅[buildProviders 元素进行编译 （ASP.NET 设置架构）](http://msdn.microsoft.com/library/40fa889d-5412-487a-b6a9-21eb011c2384)。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Hosting.VirtualFile" />
        <altmember cref="P:System.Web.Hosting.VirtualFileBase.VirtualPath" />
      </Docs>
    </Member>
    <Member MemberName="VirtualPathDependencies">
      <MemberSignature Language="C#" Value="public virtual System.Collections.ICollection VirtualPathDependencies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection VirtualPathDependencies" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.BuildProvider.VirtualPathDependencies" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property VirtualPathDependencies As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::ICollection ^ VirtualPathDependencies { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.VirtualPathDependencies : System.Collections.ICollection" Usage="System.Web.Compilation.BuildProvider.VirtualPathDependencies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示在生成提供程序生成代码之前必须生成的虚拟路径的集合。</summary>
        <value>字符串的只读集合，表示生成提供程序的该实例依赖的虚拟路径。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Compilation.BuildProvider.VirtualPathDependencies%2A>属性是必须在之前编译的虚拟路径的集合<xref:System.Web.Compilation.BuildProvider>实例生成源代码。 将中的虚拟路径的程序集<xref:System.Web.Compilation.BuildProvider.VirtualPathDependencies%2A>作为引用添加到针对编译<xref:System.Web.Compilation.BuildProvider>实例。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Hosting.VirtualFile" />
        <altmember cref="P:System.Web.Hosting.VirtualFileBase.VirtualPath" />
      </Docs>
    </Member>
  </Members>
</Type>