<Type Name="RouteUrlExpressionBuilder" FullName="System.Web.Compilation.RouteUrlExpressionBuilder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6b0262479054e8f9f8af899eecbd88dd6da966ae" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RouteUrlExpressionBuilder : System.Web.Compilation.ExpressionBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RouteUrlExpressionBuilder extends System.Web.Compilation.ExpressionBuilder" />
  <TypeSignature Language="DocId" Value="T:System.Web.Compilation.RouteUrlExpressionBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class RouteUrlExpressionBuilder&#xA;Inherits ExpressionBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class RouteUrlExpressionBuilder : System::Web::Compilation::ExpressionBuilder" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Compilation.ExpressionBuilder</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Web.Compilation.ExpressionEditor("System.Web.UI.Design.RouteUrlExpressionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.Compilation.ExpressionPrefix("Routes")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="d86f7-101">创建与指定的 URL 参数值对应的 URL。</span>
      <span class="sxs-lookup">
        <span data-stu-id="d86f7-101">Creates a URL that corresponds to specified URL parameter values.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d86f7-102"><xref:System.Web.Compilation.RouteUrlExpressionBuilder>类可以将服务器控件的属性设置为路由的 URL，通过提供的 URL 参数值列表。</span><span class="sxs-lookup"><span data-stu-id="d86f7-102">The <xref:System.Web.Compilation.RouteUrlExpressionBuilder> class makes it possible to set the property of a server control to the URL of a route by providing a list of URL parameter values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d86f7-103">下面的示例演示如何创建生成带有格式化为路由的 URL 的超链接的标记。</span><span class="sxs-lookup"><span data-stu-id="d86f7-103">The following example shows how to create markup that generates a hyperlink with a URL that is formatted for a route.</span></span> <span data-ttu-id="d86f7-104">使用定义路由`http://www.contoso.com/search/{searchterm}`与 URL 模式。</span><span class="sxs-lookup"><span data-stu-id="d86f7-104">The route is defined by using `http://www.contoso.com/search/{searchterm}` as the URL pattern.</span></span>  
  
```  
<asp:HyperLink ID="HyperLink1" runat="server"  
               NavigateUrl="<%$ RouteUrl:searchterm=Bicycles %>">  
  Search for Bicycles  
</asp:HyperLink>  
```  
  
 <span data-ttu-id="d86f7-105">为此超链接将生成的 URL `http://www.contoso.com/search/Bicycles`。</span><span class="sxs-lookup"><span data-stu-id="d86f7-105">The URL generated for this hyperlink would be `http://www.contoso.com/search/Bicycles`.</span></span>  
  
 <span data-ttu-id="d86f7-106">如果 URL 参数提供给`RouteUrl`表达式不能满足需求来唯一标识一个路由，必须包括路由名称。</span><span class="sxs-lookup"><span data-stu-id="d86f7-106">If the URL parameters provided to the `RouteUrl` expression are not sufficient to uniquely identify a route, you must include the route name.</span></span> <span data-ttu-id="d86f7-107">例如，如果 Web 应用程序具有两个路由具有`searchterm`路由将不得不作为唯一的 URL 参数，定义使用路由名称和超链接标记将类似于下面的示例：</span><span class="sxs-lookup"><span data-stu-id="d86f7-107">For example, if a Web application has two routes with `searchterm` as the sole URL parameter, the routes would have to be defined by using route names, and the hyperlink markup would resemble the following example:</span></span>  
  
```  
<asp:HyperLink ID="HyperLink1" runat="server"  
               NavigateUrl="<%$ RouteUrl:searchterm=Bicycles,  
               routename=BasicSearchRoute %>">  
  Search for Bicycles  
</asp:HyperLink>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RouteUrlExpressionBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.RouteUrlExpressionBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RouteUrlExpressionBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d86f7-108">初始化 <see cref="T:System.Web.Compilation.RouteUrlExpressionBuilder" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d86f7-108">Initializes a new instance of the <see cref="T:System.Web.Compilation.RouteUrlExpressionBuilder" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EvaluateExpression">
      <MemberSignature Language="C#" Value="public override object EvaluateExpression (object target, System.Web.UI.BoundPropertyEntry entry, object parsedData, System.Web.Compilation.ExpressionBuilderContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object EvaluateExpression(object target, class System.Web.UI.BoundPropertyEntry entry, object parsedData, class System.Web.Compilation.ExpressionBuilderContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.RouteUrlExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function EvaluateExpression (target As Object, entry As BoundPropertyEntry, parsedData As Object, context As ExpressionBuilderContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ EvaluateExpression(System::Object ^ target, System::Web::UI::BoundPropertyEntry ^ entry, System::Object ^ parsedData, System::Web::Compilation::ExpressionBuilderContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="entry" Type="System.Web.UI.BoundPropertyEntry" />
        <Parameter Name="parsedData" Type="System.Object" />
        <Parameter Name="context" Type="System.Web.Compilation.ExpressionBuilderContext" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="d86f7-109">未在此实现中使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d86f7-109">Not used in this implementation.</span>
          </span>
        </param>
        <param name="entry">
          <span data-ttu-id="d86f7-110">表达式绑定到的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d86f7-110">The property that the expression is bound to.</span>
          </span>
        </param>
        <param name="parsedData">
          <span data-ttu-id="d86f7-111">未在此实现中使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d86f7-111">Not used in this implementation.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="d86f7-112">控件或页的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d86f7-112">Properties for the control or page.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d86f7-113">创建与指定的 URL 参数值和路由 URL 格式对应的 URL。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d86f7-113">Creates a URL that corresponds to specified URL parameter values and to a route URL format.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d86f7-114">与指定的 URL 参数值和所选路由对应的 URL。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d86f7-114">The URL that corresponds to the specified URL parameter values and to the selected route.</span>
          </span>
          <span data-ttu-id="d86f7-115">此路由是通过将路由 URL 模式与指定的参数列表相匹配来选择的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d86f7-115">The route is selected by matching route URL patterns to the specified list of parameters.</span>
          </span>
          <span data-ttu-id="d86f7-116">如果有多个路由与指定的参数列表相匹配，则还可以指定路由名称以指示要选择哪个路由。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d86f7-116">In case more than one route matches a specified list of parameters, a route name can also be specified to indicate which route to select.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d86f7-117">在标记中遇到以下形式的表达式时，ASP.NET 将调用此方法：</span><span class="sxs-lookup"><span data-stu-id="d86f7-117">ASP.NET calls this method when an expression of the following form is encountered in markup:</span></span>  
  
 `<%$ RouteUrl: urlparameter=value %>`  
  
 <span data-ttu-id="d86f7-118">此方法将生成当前指定的路由密钥值的相应 URL<xref:System.Web.Routing.Route>对象。</span><span class="sxs-lookup"><span data-stu-id="d86f7-118">This method generates the appropriate URL for the specified route-key values for the current <xref:System.Web.Routing.Route> object.</span></span> <span data-ttu-id="d86f7-119">此方法将替代<xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d86f7-119">This method overrides the <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> method.</span></span> <span data-ttu-id="d86f7-120">它会从获取`entry`参数对表达式绑定到控件的引用，它会从获取`context`参数要计算的表达式，它调用<xref:System.Web.Compilation.RouteUrlExpressionBuilder.GetRouteUrl%2A>方法来生成 URL。</span><span class="sxs-lookup"><span data-stu-id="d86f7-120">It gets from the `entry` parameter a reference to the control to which the expression is bound, it gets from the `context` parameter the expression to be evaluated, and it calls the <xref:System.Web.Compilation.RouteUrlExpressionBuilder.GetRouteUrl%2A> method to generate the URL.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.CompilationMode" />
      </Docs>
    </Member>
    <Member MemberName="GetCodeExpression">
      <MemberSignature Language="C#" Value="public override System.CodeDom.CodeExpression GetCodeExpression (System.Web.UI.BoundPropertyEntry entry, object parsedData, System.Web.Compilation.ExpressionBuilderContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.CodeDom.CodeExpression GetCodeExpression(class System.Web.UI.BoundPropertyEntry entry, object parsedData, class System.Web.Compilation.ExpressionBuilderContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.RouteUrlExpressionBuilder.GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCodeExpression (entry As BoundPropertyEntry, parsedData As Object, context As ExpressionBuilderContext) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::CodeDom::CodeExpression ^ GetCodeExpression(System::Web::UI::BoundPropertyEntry ^ entry, System::Object ^ parsedData, System::Web::Compilation::ExpressionBuilderContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Web.UI.BoundPropertyEntry" />
        <Parameter Name="parsedData" Type="System.Object" />
        <Parameter Name="context" Type="System.Web.Compilation.ExpressionBuilderContext" />
      </Parameters>
      <Docs>
        <param name="entry">
          <span data-ttu-id="d86f7-121">表达式绑定到的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d86f7-121">The property that the expression is bound to.</span>
          </span>
        </param>
        <param name="parsedData">
          <span data-ttu-id="d86f7-122">表示由 <see cref="M:System.Web.Compilation.RouteUrlExpressionBuilder.TryParseRouteExpression(System.String,System.Web.Routing.RouteValueDictionary,System.String@)" /> 返回的已分析数据的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d86f7-122">The object that represents parsed data as returned by <see cref="M:System.Web.Compilation.RouteUrlExpressionBuilder.TryParseRouteExpression(System.String,System.Web.Routing.RouteValueDictionary,System.String@)" />.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="d86f7-123">控件或页的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d86f7-123">Properties for the control or page.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d86f7-124">返回一个代码表达式，该表达式用于在生成的页类中为属性赋值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d86f7-124">Returns a code expression that is used to perform the property assignment in the generated page class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d86f7-125">属性赋值中使用的 <see cref="T:System.CodeDom.CodeExpression" /> 实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d86f7-125">A <see cref="T:System.CodeDom.CodeExpression" /> instance that is used in the property assignment.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d86f7-126">CodeDOM 创建页或控件时，调用此方法。</span><span class="sxs-lookup"><span data-stu-id="d86f7-126">This method is called when the CodeDOM is created for a page or control.</span></span> <span data-ttu-id="d86f7-127"><xref:System.CodeDom.CodeExpression>返回对象表示要添加到生成的页类中属性的分配的代码表达式。</span><span class="sxs-lookup"><span data-stu-id="d86f7-127">The <xref:System.CodeDom.CodeExpression> object that is returned represents the code expression to add to the property assignment in the generated page class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRouteUrl">
      <MemberSignature Language="C#" Value="public static string GetRouteUrl (System.Web.UI.Control control, string expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetRouteUrl(class System.Web.UI.Control control, string expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.RouteUrlExpressionBuilder.GetRouteUrl(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetRouteUrl(System::Web::UI::Control ^ control, System::String ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">
          <span data-ttu-id="d86f7-128">表达式所绑定的控件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d86f7-128">The control that the expression is bound to.</span>
          </span>
        </param>
        <param name="expression">
          <span data-ttu-id="d86f7-129">标记中指定的表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d86f7-129">The expression as specified in markup.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d86f7-130">创建与为路由 URL 格式指定的路由键对应的 URL。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d86f7-130">Creates a URL that corresponds to specified route keys for a route URL format.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d86f7-131">与当前 <see cref="T:System.Web.Routing.Route" /> 对象的路由 URL 格式对应的 URL。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d86f7-131">The URL that corresponds to the route URL format of the current <see cref="T:System.Web.Routing.Route" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d86f7-132">此方法将生成适当的值为 URL 通过调用<xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A>方法<xref:System.Web.Routing.RouteCollection>对象。</span><span class="sxs-lookup"><span data-stu-id="d86f7-132">This method generates the appropriate value for the URL by calling the <xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A> method of the <xref:System.Web.Routing.RouteCollection> object.</span></span> <span data-ttu-id="d86f7-133">它获取<xref:System.Web.Routing.RequestContext>对象`control`参数，并且它将分析来自的路由名称和路由参数`expression`参数。</span><span class="sxs-lookup"><span data-stu-id="d86f7-133">It gets the <xref:System.Web.Routing.RequestContext> object from the `control` parameter, and it parses the route name and route parameters from the `expression` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d86f7-134">
            <paramref name="control" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d86f7-134">The <paramref name="control" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d86f7-135">该方法无法分析标记中指定的表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d86f7-135">The method was unable to parse the expression that was specified in markup.</span>
          </span>
          <span data-ttu-id="d86f7-136">有关详情，请参阅<see cref="M:System.Web.Compilation.RouteUrlExpressionBuilder.TryParseRouteExpression(System.String,System.Web.Routing.RouteValueDictionary,System.String@)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d86f7-136">For more information, see <see cref="M:System.Web.Compilation.RouteUrlExpressionBuilder.TryParseRouteExpression(System.String,System.Web.Routing.RouteValueDictionary,System.String@)" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SupportsEvaluate">
      <MemberSignature Language="C#" Value="public override bool SupportsEvaluate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsEvaluate" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.RouteUrlExpressionBuilder.SupportsEvaluate" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property SupportsEvaluate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool SupportsEvaluate { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d86f7-137">获取一个值，该值指示是否可在未编译的页中计算表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d86f7-137">Gets a value that indicates whether an expression can be evaluated in a page that is not compiled.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d86f7-138">总是为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d86f7-138">Always <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d86f7-139"><xref:System.Web.Compilation.RouteUrlExpressionBuilder.SupportsEvaluate%2A>属性指示是否<xref:System.Web.Compilation.RouteUrlExpressionBuilder.EvaluateExpression%2A>方法已在类中实现，并可以在不编译页中返回的表达式值。</span><span class="sxs-lookup"><span data-stu-id="d86f7-139">The <xref:System.Web.Compilation.RouteUrlExpressionBuilder.SupportsEvaluate%2A> property indicates whether the <xref:System.Web.Compilation.RouteUrlExpressionBuilder.EvaluateExpression%2A> method has been implemented in the class and can return a value for the expression in a page that is not compiled.</span></span> <span data-ttu-id="d86f7-140"><xref:System.Web.Compilation.RouteUrlExpressionBuilder>类可以计算不编译页中的表达式。</span><span class="sxs-lookup"><span data-stu-id="d86f7-140">The <xref:System.Web.Compilation.RouteUrlExpressionBuilder> class can evaluate an expression in a page that is not compiled.</span></span> <span data-ttu-id="d86f7-141">因此，<xref:System.Web.Compilation.RouteUrlExpressionBuilder.SupportsEvaluate%2A>属性始终返回`true`。</span><span class="sxs-lookup"><span data-stu-id="d86f7-141">Therefore, the <xref:System.Web.Compilation.RouteUrlExpressionBuilder.SupportsEvaluate%2A> property always returns `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseRouteExpression">
      <MemberSignature Language="C#" Value="public static bool TryParseRouteExpression (string expression, System.Web.Routing.RouteValueDictionary routeValues, out string routeName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseRouteExpression(string expression, class System.Web.Routing.RouteValueDictionary routeValues, [out] string&amp; routeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.RouteUrlExpressionBuilder.TryParseRouteExpression(System.String,System.Web.Routing.RouteValueDictionary,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseRouteExpression (expression As String, routeValues As RouteValueDictionary, ByRef routeName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseRouteExpression(System::String ^ expression, System::Web::Routing::RouteValueDictionary ^ routeValues, [Runtime::InteropServices::Out] System::String ^ % routeName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
        <Parameter Name="routeValues" Type="System.Web.Routing.RouteValueDictionary" />
        <Parameter Name="routeName" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d86f7-142">标记中指定的表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d86f7-142">The expression as specified in markup.</span>
          </span>
        </param>
        <param name="routeValues">
          <span data-ttu-id="d86f7-143">路由键及其关联值的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d86f7-143">The collection of route keys and their associated values.</span>
          </span>
        </param>
        <param name="routeName">
          <span data-ttu-id="d86f7-144">此方法返回时，如果 <c>expression</c> 包含名为 <c>RouteName</c> 的路由键，则结果包含一个表示路由名称的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d86f7-144">When this method returns, contains a string that represents the name of the route, if <c>expression</c> contains a route key named <c>RouteName</c>.</span>
          </span>
          <span data-ttu-id="d86f7-145">此参数未经初始化即被传递。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d86f7-145">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d86f7-146">将表达式分析为路由键和值的集合，还可以分析为路由名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d86f7-146">Parses an expression into a collection of route keys and values, and optionally into a route name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d86f7-147">如果分析成功，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d86f7-147">
              <see langword="true" /> if parsing was successful; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d86f7-148"><xref:System.Web.Compilation.RouteUrlExpressionBuilder.TryParseRouteExpression%2A>方法去除前导和尾随空格的表达式，然后，通过使用逗号作为分隔符，将它拆分为键/值对。</span><span class="sxs-lookup"><span data-stu-id="d86f7-148">The <xref:System.Web.Compilation.RouteUrlExpressionBuilder.TryParseRouteExpression%2A> method strips leading and trailing spaces from the expression, and then splits it into key/value pairs by using commas as delimiters.</span></span> <span data-ttu-id="d86f7-149">如果路由键名为`RouteName`位于值传递进来`routeName`参数而不是在`routeValues`。</span><span class="sxs-lookup"><span data-stu-id="d86f7-149">If the route key named `RouteName` is found, that value is passed back in the `routeName` parameter and not in `routeValues`.</span></span> <span data-ttu-id="d86f7-150">否则为`null`为返回`routeName`。</span><span class="sxs-lookup"><span data-stu-id="d86f7-150">Otherwise, `null` is returned for `routeName`.</span></span> <span data-ttu-id="d86f7-151">从各个键和值也被剥离前导空格和尾随空格。</span><span class="sxs-lookup"><span data-stu-id="d86f7-151">Leading and trailing spaces are also stripped from individual keys and values.</span></span>  
  
 <span data-ttu-id="d86f7-152"><xref:System.Web.Compilation.RouteUrlExpressionBuilder.TryParseRouteExpression%2A>方法返回`false`如果表达式不由采用以下格式的至少一个键/值对的*密钥*`=`*值*，并使用逗号来分隔多个对。</span><span class="sxs-lookup"><span data-stu-id="d86f7-152">The <xref:System.Web.Compilation.RouteUrlExpressionBuilder.TryParseRouteExpression%2A> method returns `false` if the expression is not composed of at least one key/value pair that is in the format *key*`=`*value*, and that uses commas to separate multiple pairs.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>