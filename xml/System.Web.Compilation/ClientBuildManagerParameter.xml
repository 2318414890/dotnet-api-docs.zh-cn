<Type Name="ClientBuildManagerParameter" FullName="System.Web.Compilation.ClientBuildManagerParameter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="df67407c6097ad233c005e63868b8e8810f3a9aa" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30529111" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ClientBuildManagerParameter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit ClientBuildManagerParameter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Compilation.ClientBuildManagerParameter" />
  <TypeSignature Language="VB.NET" Value="Public Class ClientBuildManagerParameter" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClientBuildManagerParameter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>包含在预编译期间传递给 ASP.NET 编译器的值。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET Web 页和代码文件可以预编译方便用户更快地响应和允许的站点的部署而不部署的源代码。 预编译的 ASP.NET Web 站点的详细信息，请参阅[ASP.NET 网站项目预编译概述](http://msdn.microsoft.com/library/a88e56f9-b232-47c5-92e0-f9674ed15e5a)。  
  
 <xref:System.Web.Compilation.ClientBuildManagerParameter>类存储在预编译过程中使用的值。 <xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A>属性确定将如何生成程序集。 例如，你可以设置<xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A>到<xref:System.Web.Compilation.PrecompilationFlags.Clean>需重新编译任何以前编译的组件，或将其设置为<xref:System.Web.Compilation.PrecompilationFlags.OverwriteTarget>以允许生成的程序集，以覆盖目标目录中的任何组件。 <xref:System.Web.Compilation.PrecompilationFlags>枚举数具有<xref:System.FlagsAttribute>属性允许其成员值的按位组合。 <xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A>属性可以包含多个值从<xref:System.Web.Compilation.PrecompilationFlags>枚举来指定预编译的行为的组合。  
  
 任一<xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer%2A>属性或<xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile%2A>属性分配一个值，以创建具有强名称程序集。 这两个值不需要设置创建具有强名称程序集。  
  
 A<xref:System.Web.Compilation.ClientBuildManagerParameter>对象传递给<xref:System.Web.Compilation.ClientBuildManager>对象通过<xref:System.Web.Compilation.ClientBuildManager.%23ctor%2A>构造函数。  
  
   
  
## Examples  
 下面的代码示例是在中找到的代码示例的一部分<xref:System.Web.Compilation.ClientBuildManager>类概述。 在示例中，<xref:System.Web.Compilation.ClientBuildManagerParameter>创建对象，并且其值设置。 生成程序集将具有强名称基于提供的密钥文件，并且将根据所提供预编译<xref:System.Web.Compilation.PrecompilationFlags>值。  
  
 [!code-csharp[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/CS/source.cs#2)]
 [!code-vb[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/VB/source.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Compilation.ClientBuildManager" />
    <altmember cref="T:System.Web.Compilation.PrecompilationFlags" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClientBuildManagerParameter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.ClientBuildManagerParameter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClientBuildManagerParameter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.Compilation.ClientBuildManagerParameter" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数不初始化任何属性值。 必须通过设置这些值<xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer%2A>， <xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile%2A>，和<xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A>后创建对象的属性。  
  
   
  
## Examples  
 下面的代码示例是在中找到的代码示例的一部分<xref:System.Web.Compilation.ClientBuildManager>类概述。 在示例中，<xref:System.Web.Compilation.ClientBuildManagerParameter>创建对象，并且其值设置。 生成程序集将具有强名称基于提供的密钥文件，并且将根据所提供预编译<xref:System.Web.Compilation.PrecompilationFlags>值。  
  
 [!code-csharp[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/CS/source.cs#2)]
 [!code-vb[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExcludedVirtualPaths">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;string&gt; ExcludedVirtualPaths { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.List`1&lt;string&gt; ExcludedVirtualPaths" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.ClientBuildManagerParameter.ExcludedVirtualPaths" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExcludedVirtualPaths As List(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::List&lt;System::String ^&gt; ^ ExcludedVirtualPaths { System::Collections::Generic::List&lt;System::String ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置排除的虚拟路径。</summary>
        <value>排除的虚拟路径。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrecompilationFlags">
      <MemberSignature Language="C#" Value="public System.Web.Compilation.PrecompilationFlags PrecompilationFlags { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.Compilation.PrecompilationFlags PrecompilationFlags" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Property PrecompilationFlags As PrecompilationFlags" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Compilation::PrecompilationFlags PrecompilationFlags { System::Web::Compilation::PrecompilationFlags get(); void set(System::Web::Compilation::PrecompilationFlags value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Compilation.PrecompilationFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置确定预编译行为的标志。</summary>
        <value>用于客户端生成的 <see cref="T:System.Web.Compilation.PrecompilationFlags" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A>属性确定将如何生成程序集。 例如，你可以设置<xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A>到<xref:System.Web.Compilation.PrecompilationFlags.Clean>需重新编译任何以前编译的组件，或将其设置为<xref:System.Web.Compilation.PrecompilationFlags.OverwriteTarget>以允许生成的程序集，以覆盖目标目录中的任何组件。 <xref:System.Web.Compilation.PrecompilationFlags>枚举数具有<xref:System.FlagsAttribute>属性允许其成员值的按位组合。 <xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A>属性可以包含多个值从<xref:System.Web.Compilation.PrecompilationFlags>枚举来指定预编译的行为的组合。  
  
   
  
## Examples  
 下面的代码示例是在中找到的代码示例的一部分<xref:System.Web.Compilation.ClientBuildManager>类概述。 在示例中，<xref:System.Web.Compilation.ClientBuildManagerParameter>创建对象，并且其值设置。 生成程序集将具有强名称基于提供的密钥文件，并且将根据所提供预编译<xref:System.Web.Compilation.PrecompilationFlags>值。  
  
 [!code-csharp[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/CS/source.cs#2)]
 [!code-vb[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.ClientBuildManager" />
        <altmember cref="T:System.Web.Compilation.PrecompilationFlags" />
      </Docs>
    </Member>
    <Member MemberName="StrongNameKeyContainer">
      <MemberSignature Language="C#" Value="public string StrongNameKeyContainer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StrongNameKeyContainer" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer" />
      <MemberSignature Language="VB.NET" Value="Public Property StrongNameKeyContainer As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StrongNameKeyContainer { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置编译期间使用的密钥容器。</summary>
        <value>表示密钥容器的值的 <see cref="T:System.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 任一<xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer%2A>属性或<xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile%2A>属性分配一个值，以创建具有强名称程序集。 这两个值不需要设置创建具有强名称程序集。  
  
   
  
## Examples  
 下面的代码示例是类似于在中找到的示例代码<xref:System.Web.Compilation.ClientBuildManager>类相似，只不过生成程序集将包含基于提供的密钥容器的强名称的概述。 它将根据所提供预编译<xref:System.Web.Compilation.PrecompilationFlags>值。  
  
 [!code-csharp[System.Web.Compilation.ClientBuildManager_2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager_2/CS/source.cs#1)]
 [!code-vb[System.Web.Compilation.ClientBuildManager_2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager_2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.ClientBuildManager" />
        <altmember cref="T:System.Web.Compilation.PrecompilationFlags" />
      </Docs>
    </Member>
    <Member MemberName="StrongNameKeyFile">
      <MemberSignature Language="C#" Value="public string StrongNameKeyFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StrongNameKeyFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile" />
      <MemberSignature Language="VB.NET" Value="Public Property StrongNameKeyFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StrongNameKeyFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置编译期间使用的密钥文件。</summary>
        <value>表示密钥文件的值的 <see cref="T:System.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 任一<xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer%2A>属性或<xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile%2A>属性分配一个值，以创建具有强名称程序集。 这两个值不需要设置创建具有强名称程序集。  
  
   
  
## Examples  
 下面的代码示例是在中找到的代码示例的一部分<xref:System.Web.Compilation.ClientBuildManager>类概述。 在示例中，<xref:System.Web.Compilation.ClientBuildManagerParameter>创建对象，并且其值设置。 生成程序集将具有强名称基于提供的密钥文件，并且将根据所提供预编译<xref:System.Web.Compilation.PrecompilationFlags>值。  
  
 [!code-csharp[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/CS/source.cs#2)]
 [!code-vb[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.ClientBuildManager" />
        <altmember cref="T:System.Web.Compilation.PrecompilationFlags" />
      </Docs>
    </Member>
  </Members>
</Type>