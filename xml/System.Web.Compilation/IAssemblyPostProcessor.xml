<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IAssemblyPostProcessor.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5ffd3a317707e04d0b4ea7c0827b8fd6ce46fff3f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ffd3a317707e04d0b4ea7c0827b8fd6ce46fff3f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Web.Compilation.IAssemblyPostProcessor">
          <source>Defines the method a class implements to process an assembly after the assembly has been built.</source>
          <target state="translated">定义方法，类可实现这些方法在生成程序集之后对程序集进行处理。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.Compilation.IAssemblyPostProcessor">
          <source>A class implementing this interface can access an assembly after it has been compiled.</source>
          <target state="translated">在已编译之后，实现此接口的类可以访问程序集。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.Compilation.IAssemblyPostProcessor">
          <source>The <ph id="ph1">&lt;xref:System.Web.Compilation.AssemblyBuilder&gt;</ph> class compiles assemblies and then checks to see whether an <ph id="ph2">&lt;xref:System.Web.Compilation.IAssemblyPostProcessor&gt;</ph> interface has been registered in the Web configuration file.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.Compilation.AssemblyBuilder&gt;</ph>类编译的程序集，然后检查以查看是否<ph id="ph2">&lt;xref:System.Web.Compilation.IAssemblyPostProcessor&gt;</ph>接口已注册的 Web 配置文件中。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.Compilation.IAssemblyPostProcessor">
          <source>If so, the <ph id="ph1">&lt;xref:System.Web.Compilation.AssemblyBuilder&gt;</ph> instance calls the <ph id="ph2">&lt;xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A&gt;</ph> method for the <ph id="ph3">&lt;xref:System.Web.Compilation.IAssemblyPostProcessor&gt;</ph> interface to perform any action after the compilation and before loading the assembly.</source>
          <target state="translated">如果是这样，<ph id="ph1">&lt;xref:System.Web.Compilation.AssemblyBuilder&gt;</ph>实例调用<ph id="ph2">&lt;xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A&gt;</ph>方法<ph id="ph3">&lt;xref:System.Web.Compilation.IAssemblyPostProcessor&gt;</ph>接口来执行任何操作之后编译和之前加载程序集。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.Compilation.IAssemblyPostProcessor">
          <source>For example, a profiler tool could implement this interface to establish probes in the assembly.</source>
          <target state="translated">例如，探查器工具可以实现此接口可建立在程序集中的探测。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.Compilation.IAssemblyPostProcessor">
          <source>When an <ph id="ph1">&lt;xref:System.Web.Compilation.IAssemblyPostProcessor&gt;</ph> interface is registered, the ASP.NET application and its assemblies will always be compiled in debug mode.</source>
          <target state="translated">当<ph id="ph1">&lt;xref:System.Web.Compilation.IAssemblyPostProcessor&gt;</ph>注册接口，ASP.NET 应用程序和其程序集将始终为以调试模式编译。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.Compilation.IAssemblyPostProcessor">
          <source>The following code example demonstrates how to create an implementation of the <ph id="ph1">&lt;xref:System.Web.Compilation.IAssemblyPostProcessor&gt;</ph> interface, and register it in the Web.config file of a Web application.</source>
          <target state="translated">下面的代码示例演示如何创建的实现<ph id="ph1">&lt;xref:System.Web.Compilation.IAssemblyPostProcessor&gt;</ph>接口，并将其注册 Web 应用程序的 Web.config 文件中。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.Compilation.IAssemblyPostProcessor">
          <source>The first part of the code example creates a class named <ph id="ph1">`Samples.Process.postProcessTest`</ph> that implements the <ph id="ph2">&lt;xref:System.Web.Compilation.IAssemblyPostProcessor&gt;</ph> interface.</source>
          <target state="translated">下面的代码示例的第一部分创建一个名为类<ph id="ph1">`Samples.Process.postProcessTest`</ph>实现<ph id="ph2">&lt;xref:System.Web.Compilation.IAssemblyPostProcessor&gt;</ph>接口。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.Compilation.IAssemblyPostProcessor">
          <source>This class performs the simple action of writing a file when the <ph id="ph1">&lt;xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A&gt;</ph> method is called.</source>
          <target state="translated">此类执行的写入文件的简单操作时<ph id="ph1">&lt;xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A&gt;</ph>调用方法。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.Compilation.IAssemblyPostProcessor">
          <source>Compile the class into a .dll file with the command <ph id="ph1">`csc /target:library postProcessTest.cs`</ph>.</source>
          <target state="translated">将该类编译为.dll 文件使用命令<ph id="ph1">`csc /target:library postProcessTest.cs`</ph>。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.Compilation.IAssemblyPostProcessor">
          <source>Add the resulting .dll file to the Bin folder of an ASP.NET application and register the .dll in the Web.config file, as shown in the following code.</source>
          <target state="translated">将产生的.dll 文件添加到 ASP.NET 应用程序的 Bin 文件夹，并在 Web.config 文件中，注册.dll，如下面的代码中所示。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.Compilation.IAssemblyPostProcessor">
          <source>When a user visits the Web site, the Web application is dynamically compiled and the file MyTest.txt will be written to C:\compile.</source>
          <target state="translated">当用户访问网站时，Web 应用程序时动态编译和 MyTest.txt 将写入到 C:\compile 文件。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly(System.String)">
          <source>The path to the assembly.</source>
          <target state="translated">程序集的路径。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly(System.String)">
          <source>Called before the assembly is loaded to allow the implementing class to modify the assembly.</source>
          <target state="translated">在加载程序集之前调用，可允许实现类对程序集进行修改。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Web.Compilation.AssemblyBuilder&gt;</ph> class calls this method after the assembly has been compiled.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.Compilation.AssemblyBuilder&gt;</ph>类在已编译的程序集之后调用此方法。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly(System.String)">
          <source>Any actions to be taken before loading the assembly should be included in this method.</source>
          <target state="translated">加载程序集应包括在此方法之前，先要执行任何操作。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly(System.String)">
          <source>The following code example demonstrates how to create an implementation of the <ph id="ph1">&lt;xref:System.Web.Compilation.IAssemblyPostProcessor&gt;</ph> interface, and register it in the Web.config file of a Web application.</source>
          <target state="translated">下面的代码示例演示如何创建的实现<ph id="ph1">&lt;xref:System.Web.Compilation.IAssemblyPostProcessor&gt;</ph>接口，并将其注册 Web 应用程序的 Web.config 文件中。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly(System.String)">
          <source>The first part of the code example creates a class named <ph id="ph1">`Samples.Process.postProcessTest`</ph> that implements the <ph id="ph2">&lt;xref:System.Web.Compilation.IAssemblyPostProcessor&gt;</ph> interface.</source>
          <target state="translated">下面的代码示例的第一部分创建一个名为类<ph id="ph1">`Samples.Process.postProcessTest`</ph>实现<ph id="ph2">&lt;xref:System.Web.Compilation.IAssemblyPostProcessor&gt;</ph>接口。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly(System.String)">
          <source>This class performs the simple action of writing a file when the <ph id="ph1">&lt;xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A&gt;</ph> method is called.</source>
          <target state="translated">此类执行的写入文件的简单操作时<ph id="ph1">&lt;xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A&gt;</ph>调用方法。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly(System.String)">
          <source>Compile the class into a .dll file with the command <ph id="ph1">`csc /target:library postProcessTest.cs`</ph>.</source>
          <target state="translated">将该类编译为.dll 文件使用命令<ph id="ph1">`csc /target:library postProcessTest.cs`</ph>。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly(System.String)">
          <source>Add the resulting .dll file to the Bin folder of an ASP.NET application and register the .dll in the Web.config file, as shown in the following code.</source>
          <target state="translated">将产生的.dll 文件添加到 ASP.NET 应用程序的 Bin 文件夹，并在 Web.config 文件中，注册.dll，如下面的代码中所示。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly(System.String)">
          <source>When a user visits the Web site, the Web application is dynamically compiled and the file MyTest.txt will be written to C:\compile.</source>
          <target state="translated">当用户访问网站时，Web 应用程序时动态编译和 MyTest.txt 将写入到 C:\compile 文件。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>