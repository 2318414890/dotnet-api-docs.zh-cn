<Type Name="CompilerParameters" FullName="System.CodeDom.Compiler.CompilerParameters">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ad30b59e17093683b1fcc60cde054e6174c16ca7" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30360501" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CompilerParameters" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CompilerParameters extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.Compiler.CompilerParameters" />
  <TypeSignature Language="VB.NET" Value="Public Class CompilerParameters" />
  <TypeSignature Language="C++ CLI" Value="public ref class CompilerParameters" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示用于调用编译器的参数。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.CodeDom.Compiler.CompilerParameters>对象表示的设置和选项<xref:System.CodeDom.Compiler.ICodeCompiler>接口。  
  
 如果您正在编译的可执行程序，则必须设置<xref:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable%2A>属性`true`。 当<xref:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable%2A>设置为`false`，编译器将生成类库。 默认情况下，新<xref:System.CodeDom.Compiler.CompilerParameters>使用初始化其<xref:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable%2A>属性设置为`false`。 如果要从 CodeDOM 图编译可执行文件，则必须在该图中定义 <xref:System.CodeDom.CodeEntryPointMethod>。 如果有多个代码的入口点，您可以指示定义入口点，以通过设置类的名称使用的类<xref:System.CodeDom.Compiler.CompilerParameters.MainClass%2A>属性。  
  
 你可以指定中的输出程序集的文件名称<xref:System.CodeDom.Compiler.CompilerParameters.OutputAssembly%2A>属性。 否则，将使用默认的输出文件名。 若要生成的程序集中包含调试信息，请设置<xref:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation%2A>属性`true`。 如果你的项目引用任何程序集，则必须在中作为项中指定的程序集名称<xref:System.Collections.Specialized.StringCollection>设置为<xref:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies%2A>属性<xref:System.CodeDom.Compiler.CompilerParameters>调用编译时使用。  
  
 你可以编译的程序集中的通过设置写入到内存，而不是磁盘<xref:System.CodeDom.Compiler.CompilerParameters.GenerateInMemory%2A>属性`true`。 在内存中生成程序集时，代码可从 <xref:System.CodeDom.Compiler.CompilerResults> 的 <xref:System.CodeDom.Compiler.CompilerResults.CompiledAssembly%2A> 属性中获取对生成的程序集的引用。 如果程序集写入到磁盘，你可以从生成的程序集获取路径<xref:System.CodeDom.Compiler.CompilerResults.PathToAssembly%2A>属性<xref:System.CodeDom.Compiler.CompilerResults>。  
  
 若要指定暂停编译的警告等级，请将 <xref:System.CodeDom.Compiler.CompilerParameters.WarningLevel%2A> 属性设置为一个整数，表示暂停编译的警告等级。 你还可以配置编译器通过设置遇到警告如果暂停编译<xref:System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors%2A>属性`true`。  
  
 若要指定在调用编译进程时使用的自定义命令行参数字符串，请在 <xref:System.CodeDom.Compiler.CompilerParameters.CompilerOptions%2A> 属性中设置该字符串。 如果在调用编译器进程时需要 Win32 安全令牌，请在 <xref:System.CodeDom.Compiler.CompilerParameters.UserToken%2A> 属性中指定该令牌。 若要在编译的程序集包括.NET Framework 资源文件，将添加到的资源文件的名称<xref:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources%2A>属性。 若要引用了另一个程序集中的.NET Framework 资源，将添加到的资源文件的名称<xref:System.CodeDom.Compiler.CompilerParameters.LinkedResources%2A>属性。 若要包含在编译的程序集中的 Win32 资源文件，指定的名称中的 Win32 资源文件<xref:System.CodeDom.Compiler.CompilerParameters.Win32Resource%2A>属性。  
  
> [!NOTE]
>  此类包含链接要求，并且在类级别应用于所有成员继承要求。 A<xref:System.Security.SecurityException>直接调用方或派生的类没有完全信任权限时，将引发。 有关安全要求的详细信息，请参阅[链接需求](~/docs/framework/misc/link-demands.md)和[的继承需求](http://msdn.microsoft.com/library/28b9adbb-8f08-4f10-b856-dbf59eb932d9)。  
  
   
  
## Examples  
 下面的示例生成一个简单的 Hello World 程序一个 CodeDOM 源关系图。  然后，源将保存到文件，编译到可执行文件，并运行。 `CompileCode`方法演示了如何使用<xref:System.CodeDom.Compiler.CompilerParameters>类可指定各种编译器设置和选项。  
  
 [!code-cpp[CompilerParametersExample#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#1)]
 [!code-csharp[CompilerParametersExample#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#1)]
 [!code-vb[CompilerParametersExample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">直接调用方的完全信任。 此类不能由部分受信任的代码使用。</permission>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">对继承者的完全信任。 此类不能由部分受信任的代码继承。</permission>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompilerParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CompilerParameters.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CompilerParameters();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何使用<xref:System.CodeDom.Compiler.CompilerParameters>指定各种编译器设置和选项。 此代码示例摘自更大的示例为提供<xref:System.CodeDom.Compiler.CompilerParameters>类。  
  
 [!code-cpp[CompilerParametersExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">直接调用方的完全信任。 此类不能由部分受信任的代码使用。</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompilerParameters (string[] assemblyNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] assemblyNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (assemblyNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CompilerParameters(cli::array &lt;System::String ^&gt; ^ assemblyNames);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="assemblyNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="assemblyNames">要引用的程序集的名称。</param>
        <summary>使用指定的程序集名称初始化 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">直接调用方的完全信任。 此类不能由部分受信任的代码使用。</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompilerParameters (string[] assemblyNames, string outputName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] assemblyNames, string outputName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (assemblyNames As String(), outputName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CompilerParameters(cli::array &lt;System::String ^&gt; ^ assemblyNames, System::String ^ outputName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="assemblyNames" Type="System.String[]" />
        <Parameter Name="outputName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyNames">要引用的程序集的名称。</param>
        <param name="outputName">输出文件名。</param>
        <summary>使用指定的程序集名称和输出文件名初始化 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">直接调用方的完全信任。 此类不能由部分受信任的代码使用。</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompilerParameters (string[] assemblyNames, string outputName, bool includeDebugInformation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] assemblyNames, string outputName, bool includeDebugInformation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (assemblyNames As String(), outputName As String, includeDebugInformation As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CompilerParameters(cli::array &lt;System::String ^&gt; ^ assemblyNames, System::String ^ outputName, bool includeDebugInformation);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="assemblyNames" Type="System.String[]" />
        <Parameter Name="outputName" Type="System.String" />
        <Parameter Name="includeDebugInformation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="assemblyNames">要引用的程序集的名称。</param>
        <param name="outputName">输出文件名。</param>
        <param name="includeDebugInformation">
          包含调试信息，则为 <see langword="true" />；排除调试信息，则为 <see langword="false" />。</param>
        <summary>使用指定的程序集名称、输出名和一个指示是否包含调试信息的值来初始化 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">直接调用方的完全信任。 此类不能由部分受信任的代码使用。</permission>
      </Docs>
    </Member>
    <Member MemberName="CompilerOptions">
      <MemberSignature Language="C#" Value="public string CompilerOptions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CompilerOptions" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.CompilerOptions" />
      <MemberSignature Language="VB.NET" Value="Public Property CompilerOptions As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CompilerOptions { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置调用编译器时使用的可选命令行参数。</summary>
        <value>用于编译器的任何附加命令行参数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.CodeDom.Compiler.ICodeCompiler>调用命令行编译器时，通常包括在命令行上的此字符串。 默认情况下，此属性包含一个空字符串。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.CodeDom.Compiler.CompilerParameters>指定各种编译器设置和选项。 此代码示例摘自更大的示例为提供<xref:System.CodeDom.Compiler.CompilerParameters>类。  
  
 [!code-cpp[CompilerParametersExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CoreAssemblyFileName">
      <MemberSignature Language="C#" Value="public string CoreAssemblyFileName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CoreAssemblyFileName" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.CoreAssemblyFileName" />
      <MemberSignature Language="VB.NET" Value="Public Property CoreAssemblyFileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CoreAssemblyFileName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置包含基类类型（如 <see cref="T:System.Object" />、<see cref="T:System.String" /> 或 <see cref="T:System.Int32" />）的核心或标准程序集的名称。</summary>
        <value>包含基本类型的核心程序集的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果此属性的值是空字符串或 `null`，则编译器将使用默认核心程序集。 根据编译器版本，默认核心程序集可能是位于 Framework 目录或引用程序集目录中的 mscorlib.dll 或 System.Runtime.dll。 如果此属性的值不为空，则代码文档对象模型 (CodeDOM) 将显式引用指定程序集并发出导致编译器在编译期间不隐式引用任何程序集的编译器选项。 对于默认情况下仅隐式引用核心或标准程序集的编译器，此属性可单独使用。 对于隐式引用程序集此外核心或标准程序集的编译器，使用此选项可能需要指定在额外的条目<xref:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies%2A?displayProperty=nameWithType>属性。  
  
> [!NOTE]
>  <xref:System.CodeDom.Compiler.ICodeCompiler> 或 <xref:System.CodeDom.Compiler.CodeDomProvider> 实现可以选择忽略此属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EmbeddedResources">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.StringCollection EmbeddedResources { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.StringCollection EmbeddedResources" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EmbeddedResources As StringCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::StringCollection ^ EmbeddedResources { System::Collections::Specialized::StringCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.StringCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取要在编译程序集输出时包含的 .NET Framework 资源文件。</summary>
        <value>一个集合，包含要在生成的程序集中包含的 .NET Framework 资源的文件路径。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 嵌入的资源是内置于生成的程序集输出文件。 包括通过此属性的文件将类似于`/resource`支持许多.NET Framework 编译器的命令行自变量。  
  
 并非所有的编译器支持.NET Framework 资源文件，因此你应通过调用来测试此支持<xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A>具有标志方法<xref:System.CodeDom.Compiler.GeneratorSupport.Resources>。  
  
 将一个或多个.NET Framework 资源文件路径添加到返回<xref:System.Collections.Specialized.StringCollection>将嵌入已编译的程序集中的文件资源。 添加重复或无效的文件路径会导致编译错误;确保每个字符串指定有效的.NET Framework 资源文件的唯一路径。  
  
 使用<xref:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources%2A>以便将包含在默认或非特定区域性.NET Framework 资源程序集; 使用<xref:System.CodeDom.Compiler.CompilerParameters.LinkedResources%2A>属性来引用附属程序集中的.NET Framework 资源。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.CodeDom.Compiler.CompilerParameters>指定各种编译器设置和选项。 此代码示例摘自更大的示例为提供<xref:System.CodeDom.Compiler.CompilerParameters>类。  
  
 [!code-cpp[CompilerParametersExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.Compiler.GeneratorSupport" />
        <altmember cref="P:System.CodeDom.Compiler.CompilerParameters.LinkedResources" />
        <altmember cref="P:System.CodeDom.Compiler.CompilerParameters.Win32Resource" />
      </Docs>
    </Member>
    <Member MemberName="Evidence">
      <MemberSignature Language="C#" Value="public System.Security.Policy.Evidence Evidence { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Policy.Evidence Evidence" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.Evidence" />
      <MemberSignature Language="VB.NET" Value="Public Property Evidence As Evidence" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Policy::Evidence ^ Evidence { System::Security::Policy::Evidence ^ get(); void set(System::Security::Policy::Evidence ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("CAS policy is obsolete and will be removed in a future release of the .NET Framework. Please see http://go2.microsoft.com/fwlink/?LinkId=131738 for more information.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Policy.Evidence</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定一个证据对象，该对象表示要授予已编译的程序集的安全策略权限。</summary>
        <value>表示要授予已编译的程序集的安全策略权限的  对象。</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">有关控制证据的能力。 权限值：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />安全操作： <see cref="F:System.Security.Permissions.SecurityAction.Demand" /></permission>
        <altmember cref="T:System.Security.Policy.Evidence" />
      </Docs>
    </Member>
    <Member MemberName="GenerateExecutable">
      <MemberSignature Language="C#" Value="public bool GenerateExecutable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool GenerateExecutable" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable" />
      <MemberSignature Language="VB.NET" Value="Public Property GenerateExecutable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool GenerateExecutable { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否生成可执行文件。</summary>
        <value>
          如果应生成可执行文件，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果此属性的值是`false`，将生成 DLL。 默认情况下，此属性的值为 `false`。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.CodeDom.Compiler.CompilerParameters>指定各种编译器设置和选项。 此代码示例摘自更大的示例为提供<xref:System.CodeDom.Compiler.CompilerParameters>类。  
  
 [!code-cpp[CompilerParametersExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateInMemory">
      <MemberSignature Language="C#" Value="public bool GenerateInMemory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool GenerateInMemory" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.GenerateInMemory" />
      <MemberSignature Language="VB.NET" Value="Public Property GenerateInMemory As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool GenerateInMemory { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否在内存中生成输出。</summary>
        <value>
          如果编译器应在内存中生成输出，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何使用<xref:System.CodeDom.Compiler.CompilerParameters>指定各种编译器设置和选项。 此代码示例摘自更大的示例为提供<xref:System.CodeDom.Compiler.CompilerParameters>类。  
  
 [!code-cpp[CompilerParametersExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeDebugInformation">
      <MemberSignature Language="C#" Value="public bool IncludeDebugInformation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeDebugInformation" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation" />
      <MemberSignature Language="VB.NET" Value="Public Property IncludeDebugInformation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IncludeDebugInformation { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否在已编译的可执行文件中包含调试信息。</summary>
        <value>
          如果应生成调试信息，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkedResources">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.StringCollection LinkedResources { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.StringCollection LinkedResources" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.LinkedResources" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LinkedResources As StringCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::StringCollection ^ LinkedResources { System::Collections::Specialized::StringCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.StringCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前源中引用的 .NET Framework 资源文件。</summary>
        <value>一个集合，包含源要引用的 .NET Framework 资源的文件路径。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 链接的资源文件都允许无需将实际的资源嵌入程序集中引用.NET Framework 资源程序集。 引用通过此属性的文件是类似于`/linkresource`支持许多.NET Framework 编译器的命令行自变量。  
  
 并非所有的编译器支持.NET Framework 资源文件，因此你应通过调用来测试此支持<xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A>具有标志方法<xref:System.CodeDom.Compiler.GeneratorSupport.Resources>。  
  
 将一个或多个.NET Framework 资源文件路径添加到返回<xref:System.Collections.Specialized.StringCollection>在编译的程序集创建的资源的链接。 添加重复或无效的文件路径会导致编译错误;确保每个字符串指定有效的.NET Framework 资源文件的唯一路径。  
  
 使用<xref:System.CodeDom.Compiler.CompilerParameters.LinkedResources%2A>来引用在附属程序集的.NET Framework 资源本地化针对特定区域性; 使用<xref:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources%2A>属性将资源嵌入编译的程序集。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.CodeDom.Compiler.CompilerParameters>指定各种编译器设置和选项。 此代码示例摘自更大的示例为提供<xref:System.CodeDom.Compiler.CompilerParameters>类。  
  
 [!code-cpp[CompilerParametersExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.Compiler.GeneratorSupport" />
        <altmember cref="P:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources" />
        <altmember cref="P:System.CodeDom.Compiler.CompilerParameters.Win32Resource" />
      </Docs>
    </Member>
    <Member MemberName="MainClass">
      <MemberSignature Language="C#" Value="public string MainClass { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MainClass" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.MainClass" />
      <MemberSignature Language="VB.NET" Value="Public Property MainClass As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MainClass { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置主类的名称。</summary>
        <value>主类的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 主类包含程序的入口点。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.CodeDom.Compiler.CompilerParameters>指定各种编译器设置和选项。 此代码示例摘自更大的示例为提供<xref:System.CodeDom.Compiler.CompilerParameters>类。  
  
 [!code-cpp[CompilerParametersExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputAssembly">
      <MemberSignature Language="C#" Value="public string OutputAssembly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OutputAssembly" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.OutputAssembly" />
      <MemberSignature Language="VB.NET" Value="Public Property OutputAssembly As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OutputAssembly { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置输出程序集的名称。</summary>
        <value>输出程序集的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何使用<xref:System.CodeDom.Compiler.CompilerParameters>指定各种编译器设置和选项。 此代码示例摘自更大的示例为提供<xref:System.CodeDom.Compiler.CompilerParameters>类。  
  
 [!code-cpp[CompilerParametersExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferencedAssemblies">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.StringCollection ReferencedAssemblies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.StringCollection ReferencedAssemblies" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReferencedAssemblies As StringCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::StringCollection ^ ReferencedAssemblies { System::Collections::Specialized::StringCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.StringCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前项目所引用的程序集。</summary>
        <value>一个集合，包含由源引用以进行编译的程序集名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 字符串集合应包含，也包括当前项目引用的程序集。 将程序集文件的名称添加到返回<xref:System.Collections.Specialized.StringCollection>导入程序集清单，并引用当前项目中的程序集类型信息。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.CodeDom.Compiler.CompilerParameters>指定各种编译器设置和选项。 此代码示例摘自更大的示例为提供<xref:System.CodeDom.Compiler.CompilerParameters>类。  
  
 [!code-cpp[CompilerParametersExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Specialized.StringCollection" />
      </Docs>
    </Member>
    <Member MemberName="TempFiles">
      <MemberSignature Language="C#" Value="public System.CodeDom.Compiler.TempFileCollection TempFiles { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.Compiler.TempFileCollection TempFiles" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.TempFiles" />
      <MemberSignature Language="VB.NET" Value="Public Property TempFiles As TempFileCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::Compiler::TempFileCollection ^ TempFiles { System::CodeDom::Compiler::TempFileCollection ^ get(); void set(System::CodeDom::Compiler::TempFileCollection ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.TempFileCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置包含临时文件的集合。</summary>
        <value>包含临时文件的集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 集合中的临时文件将保留或删除基于值的编译器活动完成后马上<xref:System.CodeDom.Compiler.TempFileCollection.KeepFiles%2A>集合中的属性。 <xref:System.CodeDom.Compiler.TempFileCollection.KeepFiles%2A>属性设置的集合在创建使用如果<xref:System.CodeDom.Compiler.TempFileCollection.%23ctor%28System.String%2CSystem.Boolean%29>具有构造函数`keepFiles`参数设置为`true`。  
  
> [!NOTE]
>  此类包含链接要求，并且在类级别应用于所有成员继承要求。 A<xref:System.Security.SecurityException>直接调用方或派生的类没有完全信任权限时，将引发。 有关安全要求的详细信息，请参阅[链接需求](~/docs/framework/misc/link-demands.md)和[的继承需求](http://msdn.microsoft.com/library/28b9adbb-8f08-4f10-b856-dbf59eb932d9)。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.CodeDom.Compiler.CompilerParameters>指定各种编译器设置和选项。 此代码示例摘自更大的示例为提供<xref:System.CodeDom.Compiler.CompilerParameters>类。  
  
 [!code-cpp[CompilerParametersExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">直接调用方的完全信任。 此成员不能由部分信任的代码使用。</permission>
      </Docs>
    </Member>
    <Member MemberName="TreatWarningsAsErrors">
      <MemberSignature Language="C#" Value="public bool TreatWarningsAsErrors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TreatWarningsAsErrors" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors" />
      <MemberSignature Language="VB.NET" Value="Public Property TreatWarningsAsErrors As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TreatWarningsAsErrors { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否将警告视为错误。</summary>
        <value>
          如果应将警告视为错误，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何使用<xref:System.CodeDom.Compiler.CompilerParameters>指定各种编译器设置和选项。 此代码示例摘自更大的示例为提供<xref:System.CodeDom.Compiler.CompilerParameters>类。  
  
 [!code-cpp[CompilerParametersExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UserToken">
      <MemberSignature Language="C#" Value="public IntPtr UserToken { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int UserToken" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.UserToken" />
      <MemberSignature Language="VB.NET" Value="Public Property UserToken As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr UserToken { IntPtr get(); void set(IntPtr value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在创建编译器进程时使用的用户标记。</summary>
        <value>要使用的用户标记。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WarningLevel">
      <MemberSignature Language="C#" Value="public int WarningLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WarningLevel" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.WarningLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property WarningLevel As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WarningLevel { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置使编译器中止编译的警告等级。</summary>
        <value>使编译器中止编译的警告级别。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何使用<xref:System.CodeDom.Compiler.CompilerParameters>指定各种编译器设置和选项。 此代码示例摘自更大的示例为提供<xref:System.CodeDom.Compiler.CompilerParameters>类。  
  
 [!code-cpp[CompilerParametersExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Win32Resource">
      <MemberSignature Language="C#" Value="public string Win32Resource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Win32Resource" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.Win32Resource" />
      <MemberSignature Language="VB.NET" Value="Public Property Win32Resource As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Win32Resource { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要链接到已编译程序集中的 Win32 资源文件的文件名。</summary>
        <value>要链接到已编译程序集中的 Win32 资源文件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 链接文件通过此属性是类似于`/winres`和`/winresource`支持许多.NET Framework 编译器的命令行自变量。  
  
 使用<xref:System.CodeDom.Compiler.CompilerParameters.Win32Resource%2A>要将 Win32 资源文件编译到程序集。 使用<xref:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources%2A>或<xref:System.CodeDom.Compiler.CompilerParameters.LinkedResources%2A>使用.NET Framework 资源文件进行编译。  
  
 并非所有的编译器支持 Win32 资源文件，因此你应测试此支持，然后再通过调用链接的资源文件的代码生成器<xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A>具有标志方法<xref:System.CodeDom.Compiler.GeneratorSupport.Win32Resources>。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.Compiler.GeneratorSupport" />
        <altmember cref="P:System.CodeDom.Compiler.CompilerParameters.LinkedResources" />
        <altmember cref="P:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources" />
      </Docs>
    </Member>
  </Members>
</Type>