<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CodeDomProvider.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac56ab122180fc89eaf109d9f5bcb109a2d70a23335.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6ab122180fc89eaf109d9f5bcb109a2d70a23335</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>Provides a base class for <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> implementations.</source>
          <target state="translated">为 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> 实现提供基类。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>This class is abstract.</source>
          <target state="translated">此类为抽象类。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>A <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> can be used to create and retrieve instances of code generators and code compilers.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>可以用于创建和检索代码生成器和代码编译器的实例。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>Code generators can be used to generate code in a particular language, and code compilers can be used to compile code into assemblies.</source>
          <target state="translated">代码生成器可用于以特定的语言生成代码，而代码编译器可用于将代码编译为程序集。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>In the <ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>, the methods made available in the code generator and code compiler are available directly from the code provider.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>、 方法可在代码生成器和代码编译器都可直接从代码提供程序。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>You do not need to call <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A&gt;</ph> to access the methods, and those methods are marked as obsolete.</source>
          <target state="translated">不需要调用<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A&gt;</ph>访问，以及这些方法标记为过时。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>This applies to preexisting as well as new code provider implementations.</source>
          <target state="translated">这适用于预先存在的以及新的代码提供程序实现。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>A <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation typically provides code generation and/or code compilation interfaces for generating code and managing compilation for a single programming language.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>实现通常提供的代码生成和/或代码编译接口，用于生成代码和管理一种编程语言的编译。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>Several languages are supported by <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementations that ship with the <ph id="ph2">[!INCLUDE[winsdklong](~/includes/winsdklong-md.md)]</ph>.</source>
          <target state="translated">支持多种语言<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>附带的实现<ph id="ph2">[!INCLUDE[winsdklong](~/includes/winsdklong-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>These languages include C#, Visual Basic, C++, and JScript.</source>
          <target state="translated">这些语言包括 C#、Visual Basic、C++ 和 JScript。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>Developers or compiler vendors can implement the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> and <ph id="ph2">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> interfaces and provide a <ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> that extends CodeDOM support to other programming languages.</source>
          <target state="translated">开发人员或编译器供应商可以实现<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>和<ph id="ph2">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph>接口，并提供<ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>的 CodeDOM 将支持扩展到其他编程语言。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>system.codedom<ph id="ph2">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept> in the machine configuration file (Machine.config) provides a mechanism for developers and compiler vendors to add configuration settings for additional <ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementations.</source>
          <target state="translated"><bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>System.codedom<ph id="ph2">&amp;gt;</ph>元素<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept>计算机配置文件 (Machine.config) 提供了面向开发人员和编译器供应商可以添加其他的配置设置的机制<ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>实现。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> class provides static methods to discover and enumerate the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementations on a computer.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>类提供静态方法，以发现和枚举<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>的计算机上的实现。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A&gt;</ph> method returns the settings for all <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementations on a computer.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A&gt;</ph>方法返回的所有设置<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>的计算机上的实现。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A&gt;</ph> method returns the settings for a specific <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation, based on the programming language name.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A&gt;</ph>方法返回特定的设置<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>实现中，根据编程语言名称。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> method returns an instance of a <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation for a specific language.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph>方法返回的实例<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>特定语言的实现。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>For more details on language provider settings in the configuration file, see <bpt id="p1">[</bpt>Compiler and Language Provider Settings Schema<ept id="p1">](http://msdn.microsoft.com/library/c020b139-8699-4f0d-9ac9-70d0c5b2a8c8)</ept>.</source>
          <target state="translated">有关配置文件中的语言提供程序设置的更多详细信息，请参阅<bpt id="p1">[</bpt>编译器和语言提供程序设置架构<ept id="p1">](http://msdn.microsoft.com/library/c020b139-8699-4f0d-9ac9-70d0c5b2a8c8)</ept>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>This class makes a link demand and an inheritance demand at the class level.</source>
          <target state="translated">此类，使链接要求，并且在类级别继承要求。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>A <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown if either the immediate caller or the derived class does not have full trust permission.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph>如果直接调用方或派生的类没有完全信任权限，则引发。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>For details about security demands, see <bpt id="p1">[</bpt>Link Demands<ept id="p1">](~/docs/framework/misc/link-demands.md)</ept> and <bpt id="p2">[</bpt>Inheritance Demands<ept id="p2">](http://msdn.microsoft.com/library/28b9adbb-8f08-4f10-b856-dbf59eb932d9)</ept>.</source>
          <target state="translated">有关安全要求的详细信息，请参阅<bpt id="p1">[</bpt>链接需求<ept id="p1">](~/docs/framework/misc/link-demands.md)</ept>和<bpt id="p2">[</bpt>的继承需求<ept id="p2">](http://msdn.microsoft.com/library/28b9adbb-8f08-4f10-b856-dbf59eb932d9)</ept>。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>The following example program can generate and compile source code based on a CodeDOM model of a program that prints "Hello World" using the <ph id="ph1">&lt;xref:System.Console&gt;</ph> class.</source>
          <target state="translated">下面的示例程序可以生成和编译的程序，将打印"Hello World"使用的 CodeDOM 模型所基于的源代码<ph id="ph1">&lt;xref:System.Console&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>A Windows Forms user interface is provided.</source>
          <target state="translated">提供 Windows 窗体用户界面。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>The user can select the target programming language from several selections: C#, Visual Basic, and JScript.</source>
          <target state="translated">用户可以选择目标编程语言从几个选项： C#、 Visual Basic 和 JScript。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">直接调用方的完全信任。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>This class cannot be used by partially trusted code.</source>
          <target state="translated">此类不能由部分受信任的代码使用。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>for full trust for inheritors.</source>
          <target state="translated">对继承者的完全信任。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>This class cannot be inherited by partially trusted code.</source>
          <target state="translated">此类不能由部分受信任的代码继承。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>In the .NET Framework versions 1.0 and 1.1, code providers consist of implementations of <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph>, <ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph>, <ph id="ph3">&lt;see cref="T:System.CodeDom.Compiler.ICodeParser" /&gt;</ph>, and <ph id="ph4">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph>.</source>
          <target state="translated">在.NET framework 1.0 和 1.1 版中中的代码提供程序包含的实现<ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph>， <ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph>， <ph id="ph3">&lt;see cref="T:System.CodeDom.Compiler.ICodeParser" /&gt;</ph>，和<ph id="ph4">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>In the <ph id="ph1">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>, the <ph id="ph2">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" /&gt;</ph>, and <ph id="ph4">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph> methods are obsolete, and the methods of <ph id="ph5">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> and <ph id="ph6">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph> are directly available in the <ph id="ph7">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> class.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>、 <ph id="ph2">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph>， <ph id="ph3">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" /&gt;</ph>，和<ph id="ph4">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph>方法已过时，和的方法<ph id="ph5">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph>和<ph id="ph6">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph>中直接提供<ph id="ph7">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>You should override those methods in your code provider implementation and not call the base methods.</source>
          <target state="translated">你应在你的代码提供程序实现中重写这些方法，并不调用基方法。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.#ctor">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">直接调用方的完全信任。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.#ctor">
          <source>This class cannot be used by partially trusted code.</source>
          <target state="translated">此类不能由部分受信任的代码使用。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerParameters" /&gt;</ph> object that indicates the settings for the compilation.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerParameters" /&gt;</ph> 对象，它指示编译的设置。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> that indicates the code to compile.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> 类型数组，指示要编译的代码。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
          <source>Compiles an assembly based on the <ph id="ph1">&lt;see cref="N:System.CodeDom" /&gt;</ph> trees contained in the specified array of <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> objects, using the specified compiler settings.</source>
          <target state="translated">基于包含在 <ph id="ph1">&lt;see cref="N:System.CodeDom" /&gt;</ph> 对象的指定数组中的 <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> 树，使用指定的编译器设置编译程序集。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerResults" /&gt;</ph> object that indicates the results of the compilation.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerResults" /&gt;</ph> 对象，它指示编译的结果。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A&gt;</ph> method of the provider.</source>
          <target state="translated">在.NET framework 1.0 和 1.1 版中，此方法由<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph>实现返回<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A&gt;</ph>的提供程序的方法。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">在 2.0 版中，此方法可以调用的代码提供程序上直接即使它不被覆盖的代码提供程序。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">如果代码提供程序不重写此方法，<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph>供基类调用实现。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">此方法和 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph> 方法均不在派生类中重写。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">如果你重写此方法，你必须调用基类的对应方法。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
          <source>The base-class method creates a generator in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph> method for compatibility with preexisting providers that use code compilers.</source>
          <target state="translated">基类方法使用过时的派生类中创建的生成器<ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph>与预先存在的提供程序使用代码编译器的兼容性的方法。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">基类方法然后调用中的等效方法<ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph>实现来执行此功能。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code compiler.</source>
          <target state="translated">你将获得<ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph>如果不使用代码编译器的代码提供调用基类方法。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerParameters" /&gt;</ph> object that indicates the settings for the compilation.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerParameters" /&gt;</ph> 对象，它指示编译的设置。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>An array of the names of the files to compile.</source>
          <target state="translated">要编译的文件名称的数组。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>Compiles an assembly from the source code contained in the specified files, using the specified compiler settings.</source>
          <target state="translated">从包含在指定文件中的源代码，使用指定的编译器设置编译程序集。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerResults" /&gt;</ph> object that indicates the results of compilation.</source>
          <target state="translated">指示编译结果的 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerResults" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A&gt;</ph> method of the provider.</source>
          <target state="translated">在.NET framework 1.0 和 1.1 版中，此方法由<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph>实现返回<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A&gt;</ph>的提供程序的方法。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">在 2.0 版中，此方法可以调用的代码提供程序上直接即使它不被覆盖的代码提供程序。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">如果代码提供程序不重写此方法，<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph>供基类调用实现。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">此方法和 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph> 方法均不在派生类中重写。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">如果你重写此方法，你必须调用基类的对应方法。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>The base-class method creates a generator in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph> method for compatibility with preexisting providers that use code compilers.</source>
          <target state="translated">基类方法使用过时的派生类中创建的生成器<ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph>与预先存在的提供程序使用代码编译器的兼容性的方法。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">基类方法然后调用中的等效方法<ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph>实现来执行此功能。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code compiler.</source>
          <target state="translated">你将获得<ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph>如果不使用代码编译器的代码提供调用基类方法。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerParameters" /&gt;</ph> object that indicates the compiler settings for this compilation.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerParameters" /&gt;</ph> 对象，它指示此编译的编译器设置。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>An array of source code strings to compile.</source>
          <target state="translated">要编译的源代码字符串的数组。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>Compiles an assembly from the specified array of strings containing source code, using the specified compiler settings.</source>
          <target state="translated">从包含源代码的字符串的指定数组，使用指定的编译器设置编译程序集。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerResults" /&gt;</ph> object that indicates the results of compilation.</source>
          <target state="translated">指示编译结果的 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerResults" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A&gt;</ph> method of the provider.</source>
          <target state="translated">在.NET framework 1.0 和 1.1 版中，此方法由<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph>实现返回<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A&gt;</ph>的提供程序的方法。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">在 2.0 版中，此方法可以调用的代码提供程序上直接即使它不被覆盖的代码提供程序。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">如果代码提供程序不重写此方法，<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph>供基类调用实现。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">此方法和 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph> 方法均不在派生类中重写。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">如果你重写此方法，你必须调用基类的对应方法。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>The base-class method creates a generator in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph> method for compatibility with preexisting providers that use code compilers.</source>
          <target state="translated">基类方法使用过时的派生类中创建的生成器<ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph>与预先存在的提供程序使用代码编译器的兼容性的方法。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">基类方法然后调用中的等效方法<ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph>实现来执行此功能。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code compiler.</source>
          <target state="translated">你将获得<ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph>如果不使用代码编译器的代码提供调用基类方法。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler">
          <source>When overridden in a derived class, creates a new code compiler.</source>
          <target state="translated">在派生类中重写时，创建一个新的代码编译器。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler">
          <source>An <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph> that can be used for compilation of <ph id="ph2">&lt;see cref="N:System.CodeDom" /&gt;</ph> based source code representations.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph>，可用于编译基于 <ph id="ph2">&lt;see cref="N:System.CodeDom" /&gt;</ph> 的源代码表示形式。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler">
          <source>This method is obsolete in the <ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>.</source>
          <target state="translated">此方法已过时中<ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> methods that are directly available in the code provider.</source>
          <target state="translated">建议的替代项是调用<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph>代码提供程序中直接提供的方法。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler">
          <source>In the <ph id="ph1">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>, you should implement the <ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph> members in the <ph id="ph3">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> class and throw a <ph id="ph4">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> when this method is called.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>，应实现<ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph>中的成员<ph id="ph3">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph>类，并引发<ph id="ph4">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>当调用此方法。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>The string for which to create an escaped identifier.</source>
          <target state="translated">要为其创建转义标识符的字符串。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>Creates an escaped identifier for the specified value.</source>
          <target state="translated">创建指定值的转义标识符。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>The escaped identifier for the value.</source>
          <target state="translated">值的转义标识符。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier%2A&gt;</ph> tests whether the identifier conflicts with any reserved or language keywords, and if so, returns an equivalent name with language-specific escape code formatting.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier%2A&gt;</ph> 测试标识符是否与任何保留相冲突或语言关键字和如果是这样，返回一个等效的带有特定于语言的转义码格式设置的名称。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>This is referred to an escaped identifier.</source>
          <target state="translated">这称为转义标识符。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>The escaped identifier contains the same <ph id="ph1">`value`</ph> but has escape-code formatting added to differentiate the identifier from the keyword.</source>
          <target state="translated">转义的标识符包含相同<ph id="ph1">`value`</ph>但添加了转义代码格式设置，以使标识符与关键字区分开来。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>Two implementation examples are preceding the <ph id="ph1">`value`</ph> with "@" or bracketing the <ph id="ph2">`value`</ph> with "[" and "]".</source>
          <target state="translated">两个实现示例是前面<ph id="ph1">`value`</ph>使用"@"或包括<ph id="ph2">`value`</ph>与"["和"]"。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
          <target state="translated">在.NET framework 1.0 和 1.1 版中，此方法由<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>实现返回<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph>的提供程序的方法。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">在 2.0 版中，此方法可以调用的代码提供程序上直接即使它不被覆盖的代码提供程序。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">如果代码提供程序不重写此方法，<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>供基类调用实现。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">此方法和 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> 方法均不在派生类中重写。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">如果你重写此方法，你必须调用基类的对应方法。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>The base-class method creates a generator in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method for compatibility with preexisting providers that use code generators.</source>
          <target state="translated">基类方法使用过时的派生类中创建的生成器<ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph>与预先存在的提供程序使用代码生成器的兼容性的方法。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">基类方法然后调用中的等效方法<ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph>实现来执行此功能。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code generator.</source>
          <target state="translated">你将获得<ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph>如果不使用代码生成器的代码提供调用基类方法。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>When overridden in a derived class, creates a new code generator.</source>
          <target state="translated">在派生类中重写时，创建一个新的代码生成器。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator">
          <source>When overridden in a derived class, creates a new code generator.</source>
          <target state="translated">在派生类中重写时，创建一个新的代码生成器。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> that can be used to generate <ph id="ph2">&lt;see cref="N:System.CodeDom" /&gt;</ph> based source code representations.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph>，可用于生成基于 <ph id="ph2">&lt;see cref="N:System.CodeDom" /&gt;</ph> 的源代码表示形式。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator">
          <source>This method is obsolete in the <ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>.</source>
          <target state="translated">此方法已过时中<ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> methods that are directly available in the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> class.</source>
          <target state="translated">建议的替代项是调用<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>方法中直接提供<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator">
          <source>In the <ph id="ph1">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>, you should implement the <ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> members in the <ph id="ph3">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> class and throw a <ph id="ph4">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> when this method is called.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>，应实现<ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph>中的成员<ph id="ph3">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph>类，并引发<ph id="ph4">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>当调用此方法。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> to use to output.</source>
          <target state="translated">用于输出的 <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)">
          <source>When overridden in a derived class, creates a new code generator using the specified <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> for output.</source>
          <target state="translated">在派生类中重写时，使用指定的 <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> 创建新的代码生成器以用于输出。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)">
          <source>An <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> that can be used to generate <ph id="ph2">&lt;see cref="N:System.CodeDom" /&gt;</ph> based source code representations.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph>，可用于生成基于 <ph id="ph2">&lt;see cref="N:System.CodeDom" /&gt;</ph> 的源代码表示形式。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)">
          <source>This method uses the specified <ph id="ph1">&lt;xref:System.IO.TextWriter&gt;</ph> for output.</source>
          <target state="translated">此方法使用指定<ph id="ph1">&lt;xref:System.IO.TextWriter&gt;</ph>输出。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)">
          <source>This method supports more optimized code generation that incrementally updates the source code.</source>
          <target state="translated">此方法支持增量更新的源代码的更多优化的代码生成。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)">
          <source>The base class implementation calls the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method, which is obsolete in the <ph id="ph2">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph> and results in a <ph id="ph3">&lt;xref:System.NotSupportedException&gt;</ph> if an <ph id="ph4">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> object is not returned.</source>
          <target state="translated">基类实现调用<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph>方法，在中已过时<ph id="ph2">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>，并导致<ph id="ph3">&lt;xref:System.NotSupportedException&gt;</ph>如果<ph id="ph4">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>不返回对象。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)">
          <source>The file name to output to.</source>
          <target state="translated">要输出到的文件名。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)">
          <source>When overridden in a derived class, creates a new code generator using the specified file name for output.</source>
          <target state="translated">在派生类中重写时，使用指定文件名创建新的代码生成器以用于输出。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> that can be used to generate <ph id="ph2">&lt;see cref="N:System.CodeDom" /&gt;</ph> based source code representations.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph>，可用于生成基于 <ph id="ph2">&lt;see cref="N:System.CodeDom" /&gt;</ph> 的源代码表示形式。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)">
          <source>This method uses the specified file name for output.</source>
          <target state="translated">此方法使用输出指定的文件名称。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)">
          <source>The base class implementation calls the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method, which is obsolete in the <ph id="ph2">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph> and results in a <ph id="ph3">&lt;xref:System.NotSupportedException&gt;</ph> if an <ph id="ph4">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> object is not returned.</source>
          <target state="translated">基类实现调用<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph>方法，在中已过时<ph id="ph2">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>，并导致<ph id="ph3">&lt;xref:System.NotSupportedException&gt;</ph>如果<ph id="ph4">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>不返回对象。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser">
          <source>When overridden in a derived class, creates a new code parser.</source>
          <target state="translated">在派生类中重写时，创建一个新的代码分析器。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser">
          <source>An <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeParser" /&gt;</ph> that can be used to parse source code.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeParser" /&gt;</ph>，可用于分析源代码。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser">
          <source>The base implementation always returns <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">此基实现总是返回 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> instance for the specified language.</source>
          <target state="translated">获取指定语言的 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> 实例。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>The language name.</source>
          <target state="translated">语言名称。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> instance for the specified language.</source>
          <target state="translated">获取指定语言的 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> 实例。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>A CodeDOM provider that is implemented for the specified language name.</source>
          <target state="translated">为指定语言名称实现的 CodeDOM 提供程序。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>This method is most commonly used to create an instance of a code provider in an application that may optionally use one of several providers.</source>
          <target state="translated">此方法通常用于应用程序可选择性地使用多个提供商之一中创建的代码提供程序实例。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> allows you to specify at run time the code provider you wish to instantiate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> 可以在运行时指定你想要实例化的代码提供程序。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>If you know at design time which code provider is to be used, you should create an instance of that code provider rather than use the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> method.</source>
          <target state="translated">如果你知道在哪个代码提供程序是要使用的设计时，你应创建的该代码提供程序实例而不使用<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> method returns a <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> instance for a specific language name; it is similar to calling the <ph id="ph3">&lt;xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType&gt;</ph> method with the language provider type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph>方法返回<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>实例特定的语言名称; 它是类似于调用<ph id="ph3">&lt;xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType&gt;</ph>与语言提供程序类型的方法。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>Use <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> when you want to dynamically find a configured provider implementation for a language name.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph>如果想要动态找到的语言名称的配置的提供程序实现。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>If more than one provider implementation is configured for the language name, <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> returns a provider instance for the last matching configuration element.</source>
          <target state="translated">如果语言名称，为配置了多个提供程序实现<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph>返回最后一个匹配的配置元素的提供程序实例。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>Use the <ph id="ph1">&lt;xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=nameWithType&gt;</ph> method overload when you want a specific language provider implementation.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=nameWithType&gt;</ph>方法重载时您希望特定语言提供程序实现。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>For example, use the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> method to get a provider instance that supports the language name <ph id="ph2">`"CSharp"`</ph>; use the <ph id="ph3">&lt;xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=nameWithType&gt;</ph> method overload to get a provider instance specifically for the <ph id="ph4">&lt;xref:Microsoft.CSharp.CSharpCodeProvider?displayProperty=nameWithType&gt;</ph> implementation.</source>
          <target state="translated">例如，使用<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph>方法以获取支持的语言名称的提供程序实例<ph id="ph2">`"CSharp"`</ph>; 使用<ph id="ph3">&lt;xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=nameWithType&gt;</ph>方法重载来获取专为提供程序实例<ph id="ph4">&lt;xref:Microsoft.CSharp.CSharpCodeProvider?displayProperty=nameWithType&gt;</ph>实现。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>You should use the [<ph id="ph1">\]</ph>, CultureInfo, Object<ph id="ph2">\&lt;</ph>xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt; method if you have multiple code providers for a language and you desire to instantiate a specific code provider.</source>
          <target state="translated">应使用 [<ph id="ph1">\]</ph>，CultureInfo、 对象<ph id="ph2">\&lt;</ph>xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%2CSystem.Object%5B%5D%29?displayProperty=nameWithType &gt; 如果你有多个为一种语言的代码提供程序并且您希望其实例化特定代码提供程序的方法。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A&gt;</ph> method checks whether at least one provider implementation supports a specific language.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A&gt;</ph>方法检查是否至少一个提供程序实现支持特定语言。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>You can validate a language name using <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A&gt;</ph> before passing it to <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph>.</source>
          <target state="translated">你可以验证语言名称使用<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A&gt;</ph>之前将其传递给<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>If you pass an unsupported language name to <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> a <ph id="ph2">&lt;xref:System.Configuration.ConfigurationException?displayProperty=nameWithType&gt;</ph> is thrown.</source>
          <target state="translated">如果你不受支持的语言将名称传递给<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph><ph id="ph2">&lt;xref:System.Configuration.ConfigurationException?displayProperty=nameWithType&gt;</ph>引发。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A&gt;</ph> method can be used to determine all <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementations on a computer, including additional implementations provided by developers and compiler vendors that are identified in the <bpt id="p1">[</bpt><ph id="ph3">&amp;lt;</ph>system.codedom<ph id="ph4">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept> in the machine configuration file (Machine.config).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A&gt;</ph>方法可以用于确定所有<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>的计算机，包括开发人员和中标识的编译器供应商提供的其他实现上实现<bpt id="p1">[</bpt> <ph id="ph3">&amp;lt;</ph>system.codedom<ph id="ph4">&amp;gt;</ph>元素<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept>计算机配置文件 (Machine.config) 中。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> method returns an instance of a <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation for a specific language.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph>方法返回的实例<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>特定语言的实现。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>Language names are case-insensitive.</source>
          <target state="translated">语言名称不区分大小写。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>The following code example determines the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation for an input language and displays the configured settings for the language provider.</source>
          <target state="translated">下面的代码示例确定<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>输入的语言和显示语言提供程序的配置设置的实现。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="language" /&gt;</ph> does not have a configured provider on this computer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="language" /&gt;</ph> 在此计算机上没有已配置的提供程序。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="language" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="language" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">调用方没有所要求的权限。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">直接调用方的完全信任。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">此成员不能由部分信任的代码使用。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
          <source>The language name.</source>
          <target state="translated">语言名称。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
          <source>A collection of provider options from the configuration file.</source>
          <target state="translated">来自配置文件的提供程序选项的集合。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> instance for the specified language and provider options.</source>
          <target state="translated">获取指定的语言和提供程序选项的 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> 实例。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
          <source>A CodeDOM provider that is implemented for the specified language name and options.</source>
          <target state="translated">为指定语言名称和选项实现的 CodeDOM 提供程序。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
          <source>This method is most commonly used to create an instance of a code provider in an application that may optionally use one of several providers.</source>
          <target state="translated">此方法通常用于应用程序可选择性地使用多个提供商之一中创建的代码提供程序实例。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
          <source><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29&gt;</ph> enables you to specify at run time the version of the code provider you want to instantiate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29&gt;</ph> 使用此选项可指定在运行时你想要实例化的代码提供程序的版本。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
          <source>If you know at design time which code provider is to be used, you should create an instance of that code provider instead of using the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29&gt;</ph> method.</source>
          <target state="translated">如果你知道在哪个代码提供程序是要使用的设计时，应创建而不是使用该代码提供程序实例的<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
          <source>Use <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29&gt;</ph> when you want to dynamically find a configured provider implementation for a specific language and options.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29&gt;</ph>如果想要动态查找特定的语言和选项的配置的提供程序实现。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
          <source>Language names are case-insensitive.</source>
          <target state="translated">语言名称不区分大小写。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
          <source>For information about supported provider options, see the specific CodeDOM provider documentation.</source>
          <target state="translated">有关受支持的提供程序选项的信息，请参阅特定 CodeDOM 提供程序文档。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
          <source>For information about validating a provider and calling a provider if more than one provider implementation is configured for the language name, see the Remarks section of the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%29&gt;</ph> method.</source>
          <target state="translated">有关验证提供程序和调用提供程序，如果语言名称为配置了多个提供程序实现的信息，请参阅备注部分的<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%29&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
          <source>The following example shows how to create an instance of a provider by using the <ph id="ph1">`providerOptions`</ph> parameter.</source>
          <target state="translated">下面的示例演示如何通过使用创建的提供程序实例<ph id="ph1">`providerOptions`</ph>参数。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
          <source>The string for which to generate a valid identifier.</source>
          <target state="translated">要为其生成有效标识符的字符串。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
          <source>Creates a valid identifier for the specified value.</source>
          <target state="translated">为指定的值创建有效标识符。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
          <source>A valid identifier for the specified value.</source>
          <target state="translated">指定值的有效标识符。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
          <source><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier%2A&gt;</ph> tests whether the identifier conflicts with reserved or language keywords, and if so, attempts to return a valid identifier name that does not conflict.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier%2A&gt;</ph> 测试是否与保留的标识符冲突或语言关键字和如果因此，尝试返回有效的标识符名称不冲突。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
          <source>Usually the returned identifier is only slightly modified to differentiate the identifier from the keyword; for example, the name might be preceded by the underscore ("_") character.</source>
          <target state="translated">通常返回的标识符仅略有修改以使标识符与关键字; 区分开来例如，名称可能前面使用下划线 (_) 字符。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
          <target state="translated">在.NET framework 1.0 和 1.1 版中，此方法由<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>实现返回<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph>的提供程序的方法。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">在 2.0 版中，此方法可以调用的代码提供程序上直接即使它不被覆盖的代码提供程序。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">如果代码提供程序不重写此方法，<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>供基类调用实现。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">此方法和 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> 方法均不在派生类中重写。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">如果你重写此方法，你必须调用基类的对应方法。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
          <source>The base-class method creates a generator in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method for compatibility with preexisting providers that use code generators.</source>
          <target state="translated">基类方法使用过时的派生类中创建的生成器<ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph>与预先存在的提供程序使用代码生成器的兼容性的方法。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">基类方法然后调用中的等效方法<ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph>实现来执行此功能。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code generator.</source>
          <target state="translated">你将获得<ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph>如果不使用代码生成器的代码提供调用基类方法。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension">
          <source>Gets the default file name extension to use for source code files in the current language.</source>
          <target state="translated">获取用于当前语言的源代码文件的默认文件扩展名。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension">
          <source>A file name extension corresponding to the extension of the source files of the current language.</source>
          <target state="translated">与当前语言的源文件扩展名相对应的文件扩展名。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension">
          <source>The base implementation always returns <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated">此基实现总是返回 <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension">
          <source>This property is used by code generators and code compilers to indicate what file extensions should be generated or used.</source>
          <target state="translated">代码生成器和代码编译器通过使用此属性以指示应生成还是使用哪些文件扩展名。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension">
          <source>The following code example creates an instance of <ph id="ph1">&lt;xref:Microsoft.VisualBasic.VBCodeProvider?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">下面的代码示例创建的实例<ph id="ph1">&lt;xref:Microsoft.VisualBasic.VBCodeProvider?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension">
          <source>The example displays the provider name, hash code and default file name extension for the new provider instance.</source>
          <target state="translated">此示例显示提供程序名称、 哈希代码和默认文件扩展名为新的提供程序实例。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> for which to generate code.</source>
          <target state="translated">要为其生成代码的 <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> to which the output code is sent.</source>
          <target state="translated">输出代码将被发送到的 <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /&gt;</ph> that indicates the options to use for generating code.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /&gt;</ph>，指示用于生成代码的选项。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and sends it to the specified text writer, using the specified options.</source>
          <target state="translated">为指定的代码文档对象模型 (CodeDOM) 编译单元生成代码，并使用指定的选项将代码发送到指定的文本编写器。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
          <target state="translated">在.NET framework 1.0 和 1.1 版中，此方法由<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>实现返回<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph>的提供程序的方法。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">在 2.0 版中，此方法可以调用的代码提供程序上直接即使它不被覆盖的代码提供程序。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">如果代码提供程序不重写此方法，<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>供基类调用实现。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The following code example shows the use of the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit%2A&gt;</ph> method to generate code for a "Hello World" application from a <ph id="ph2">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph>.</source>
          <target state="translated">下面的代码示例演示了利用<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit%2A&gt;</ph>方法来生成中的"Hello World"应用程序的代码<ph id="ph2">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>This example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> class.</source>
          <target state="translated">此示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">此方法和 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> 方法均不在派生类中重写。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">如果你重写此方法，你必须调用基类的对应方法。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The base-class method creates a generator in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method for compatibility with preexisting providers that use code generators.</source>
          <target state="translated">基类方法使用过时的派生类中创建的生成器<ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph>与预先存在的提供程序使用代码生成器的兼容性的方法。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">基类方法然后调用中的等效方法<ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph>实现来执行此功能。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code generator.</source>
          <target state="translated">你将获得<ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph>如果不使用代码生成器的代码提供调用基类方法。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeExpression" /&gt;</ph> object that indicates the expression for which to generate code.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeExpression" /&gt;</ph> 对象，指示要为其生成代码的表达式。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> to which output code is sent.</source>
          <target state="translated">输出代码将被发送到的 <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /&gt;</ph> that indicates the options to use for generating code.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /&gt;</ph>，指示用于生成代码的选项。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>Generates code for the specified Code Document Object Model (CodeDOM) expression and sends it to the specified text writer, using the specified options.</source>
          <target state="translated">为指定的代码文档对象模型 (CodeDOM) 表达式生成代码，并使用指定的选项将代码发送到指定的文本编写器。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
          <target state="translated">在.NET framework 1.0 和 1.1 版中，此方法由<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>实现返回<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph>的提供程序的方法。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">在 2.0 版中，此方法可以调用的代码提供程序上直接即使它不被覆盖的代码提供程序。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">如果代码提供程序不重写此方法，<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>供基类调用实现。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">此方法和 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> 方法均不在派生类中重写。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">如果你重写此方法，你必须调用基类的对应方法。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The base-class method creates a generator in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method for compatibility with preexisting providers that use code generators.</source>
          <target state="translated">基类方法使用过时的派生类中创建的生成器<ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph>与预先存在的提供程序使用代码生成器的兼容性的方法。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">基类方法然后调用中的等效方法<ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph>实现来执行此功能。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code generator.</source>
          <target state="translated">你将获得<ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph>如果不使用代码生成器的代码提供调用基类方法。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeMember" /&gt;</ph> object that indicates the member for which to generate code.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeMember" /&gt;</ph> 对象，指示要为其生成代码的成员。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> to which output code is sent.</source>
          <target state="translated">输出代码将被发送到的 <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /&gt;</ph> that indicates the options to use for generating code.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /&gt;</ph>，指示用于生成代码的选项。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>Generates code for the specified Code Document Object Model (CodeDOM) member declaration and sends it to the specified text writer, using the specified options.</source>
          <target state="translated">为指定的代码文档对象模型 (CodeDOM) 成员声明生成代码，并使用指定的选项将代码发送到指定的文本编写器。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The base class implementation throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph>.</source>
          <target state="translated">基类实现引发<ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>See <ph id="ph1">&lt;xref:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember%2A?displayProperty=nameWithType&gt;</ph> for documentation describing an implementation of this method.</source>
          <target state="translated">请参阅<ph id="ph1">&lt;xref:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember%2A?displayProperty=nameWithType&gt;</ph>文档描述此方法的实现。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The following code example shows the use of the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember%2A&gt;</ph> method as implemented by the <ph id="ph2">&lt;xref:Microsoft.CSharp.CSharpCodeProvider&gt;</ph> and <ph id="ph3">&lt;xref:Microsoft.VisualBasic.VBCodeProvider&gt;</ph> classes.</source>
          <target state="translated">下面的代码示例演示了利用<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember%2A&gt;</ph>方法的实施方式<ph id="ph2">&lt;xref:Microsoft.CSharp.CSharpCodeProvider&gt;</ph>和<ph id="ph3">&lt;xref:Microsoft.VisualBasic.VBCodeProvider&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>This method is not overridden in a derived class.</source>
          <target state="translated">此方法不会在派生类中被重写。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeNamespace" /&gt;</ph> object that indicates the namespace for which to generate code.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeNamespace" /&gt;</ph> 对象，指示要为其生成代码的命名空间。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> to which output code is sent.</source>
          <target state="translated">输出代码将被发送到的 <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /&gt;</ph> that indicates the options to use for generating code.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /&gt;</ph>，指示用于生成代码的选项。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>Generates code for the specified Code Document Object Model (CodeDOM) namespace and sends it to the specified text writer, using the specified options.</source>
          <target state="translated">为指定的代码文档对象模型 (CodeDOM) 命名空间生成代码，并使用指定的选项将代码发送到指定的文本编写器。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
          <target state="translated">在.NET framework 1.0 和 1.1 版中，此方法由<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>实现返回<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph>的提供程序的方法。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">在 2.0 版中，此方法可以调用的代码提供程序上直接即使它不被覆盖的代码提供程序。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">如果代码提供程序不重写此方法，<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>供基类调用实现。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">此方法和 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> 方法均不在派生类中重写。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">如果你重写此方法，你必须调用基类的对应方法。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The base-class method creates a generator in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method for compatibility with preexisting providers that use code generators.</source>
          <target state="translated">基类方法使用过时的派生类中创建的生成器<ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph>与预先存在的提供程序使用代码生成器的兼容性的方法。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">基类方法然后调用中的等效方法<ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph>实现来执行此功能。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code generator.</source>
          <target state="translated">你将获得<ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph>如果不使用代码生成器的代码提供调用基类方法。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeStatement" /&gt;</ph> containing the CodeDOM elements for which to generate code.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.CodeStatement" /&gt;</ph>，包含要为其生成代码的 CodeDOM 元素。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> to which output code is sent.</source>
          <target state="translated">输出代码将被发送到的 <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /&gt;</ph> that indicates the options to use for generating code.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /&gt;</ph>，指示用于生成代码的选项。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>Generates code for the specified Code Document Object Model (CodeDOM) statement and sends it to the specified text writer, using the specified options.</source>
          <target state="translated">为指定的代码文档对象模型 (CodeDOM) 语句生成代码，并使用指定的选项将代码发送到指定的文本编写器。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
          <target state="translated">在.NET framework 1.0 和 1.1 版中，此方法由<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>实现返回<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph>的提供程序的方法。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">在 2.0 版中，此方法可以调用的代码提供程序上直接即使它不被覆盖的代码提供程序。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">如果代码提供程序不重写此方法，<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>供基类调用实现。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">此方法和 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> 方法均不在派生类中重写。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">如果你重写此方法，你必须调用基类的对应方法。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The base-class method creates a generator in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method for compatibility with preexisting providers that use code generators.</source>
          <target state="translated">基类方法使用过时的派生类中创建的生成器<ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph>与预先存在的提供程序使用代码生成器的兼容性的方法。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">基类方法然后调用中的等效方法<ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph>实现来执行此功能。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code generator.</source>
          <target state="translated">你将获得<ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph>如果不使用代码生成器的代码提供调用基类方法。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeDeclaration" /&gt;</ph> object that indicates the type for which to generate code.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeDeclaration" /&gt;</ph> 对象，指示要为其生成代码的类型。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> to which output code is sent.</source>
          <target state="translated">输出代码将被发送到的 <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /&gt;</ph> that indicates the options to use for generating code.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /&gt;</ph>，指示用于生成代码的选项。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>Generates code for the specified Code Document Object Model (CodeDOM) type declaration and sends it to the specified text writer, using the specified options.</source>
          <target state="translated">为指定的代码文档对象模型 (CodeDOM) 类型声明生成代码，并使用指定的选项将代码发送到指定的文本编写器。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
          <target state="translated">在.NET framework 1.0 和 1.1 版中，此方法由<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>实现返回<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph>的提供程序的方法。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">在 2.0 版中，此方法可以调用的代码提供程序上直接即使它不被覆盖的代码提供程序。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">如果代码提供程序不重写此方法，<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>供基类调用实现。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">此方法和 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> 方法均不在派生类中重写。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">如果你重写此方法，你必须调用基类的对应方法。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The base-class method creates a generator in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method for compatibility with preexisting providers that use code generators.</source>
          <target state="translated">基类方法使用过时的派生类中创建的生成器<ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph>与预先存在的提供程序使用代码生成器的兼容性的方法。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">基类方法然后调用中的等效方法<ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph>实现来执行此功能。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code generator.</source>
          <target state="translated">你将获得<ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph>如果不使用代码生成器的代码提供调用基类方法。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
          <source>Returns the language provider and compiler configuration settings for this computer.</source>
          <target state="translated">返回此计算机的语言提供程序和编译器配置设置。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerInfo" /&gt;</ph> representing the settings of all configured <ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> implementations.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerInfo" /&gt;</ph> 类型的数组，表示所有配置的 <ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> 实现的设置。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
          <source>Use the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A&gt;</ph> method to enumerate the language provider settings on a computer.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A&gt;</ph>进行枚举在计算机上的语言提供程序设置方法。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
          <source>In the <ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>, the default language providers supplied by the .NET Framework are not specified in the <bpt id="p1">[</bpt><ph id="ph2">&amp;lt;</ph>system.codedom<ph id="ph3">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept> compiler configuration section and cannot be removed, so this method returns information about the default providers and any specified in the configuration file.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>，由.NET Framework 提供的默认语言提供程序中未指定<bpt id="p1">[</bpt> <ph id="ph2">&amp;lt;</ph>system.codedom<ph id="ph3">&amp;gt;</ph>元素<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept>编译器配置部分，不能删除，因此该方法返回有关默认的提供程序和任何配置文件中指定的信息。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
          <source>The following code example enumerates the language providers on the computer and displays the configuration and compiler settings for each language provider.</source>
          <target state="translated">下面的代码示例枚举计算机上的语言提供程序，并显示每个语言提供程序的配置和编译器设置。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
          <source>The caller does not have the required permission.</source>
          <target state="translated">调用方没有所要求的权限。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">直接调用方的完全信任。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">此成员不能由部分信任的代码使用。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>A language name.</source>
          <target state="translated">语言名称。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>Returns the language provider and compiler configuration settings for the specified language.</source>
          <target state="translated">返回指定语言的语言提供程序和编译器配置设置。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerInfo" /&gt;</ph> object populated with settings of the configured <ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> implementation.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerInfo" /&gt;</ph> 对象，由已配置的 <ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> 实现的设置填充。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>system.codedom<ph id="ph2">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept> in the machine configuration file contains the language provider and compiler configuration settings for each <ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation on the computer.</source>
          <target state="translated"><bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>System.codedom<ph id="ph2">&amp;gt;</ph>元素<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept>计算机配置文件包含每个语言提供程序和编译器配置设置<ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>计算机上的实现。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>For information about machine configuration files, see the Machine Configuration Files section in <bpt id="p1">[</bpt>Configuring Apps<ept id="p1">](http://msdn.microsoft.com/library/86bd26d3-737e-4484-9782-19b17f34cd1f)</ept>.</source>
          <target state="translated">有关计算机配置文件的信息，请参阅中的计算机配置文件部分<bpt id="p1">[</bpt>配置应用<ept id="p1">](http://msdn.microsoft.com/library/86bd26d3-737e-4484-9782-19b17f34cd1f)</ept>。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A&gt;</ph> method searches each provider configuration element for the specified language name.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A&gt;</ph>方法搜索指定的语言名称每个提供程序配置元素。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>The returned <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph> instance contains the configured language provider and compiler settings.</source>
          <target state="translated">返回<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph>实例包含配置的语言提供程序和编译器设置。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A&gt;</ph> method checks whether at least one provider implementation supports a specific language.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A&gt;</ph>方法检查是否至少一个提供程序实现支持特定语言。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>You can validate a language name using <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A&gt;</ph> before passing it to <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A&gt;</ph>.</source>
          <target state="translated">你可以验证语言名称使用<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A&gt;</ph>之前将其传递给<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>This prevents throwing a <ph id="ph1">&lt;xref:System.Configuration.ConfigurationException?displayProperty=nameWithType&gt;</ph> when you access the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph> instance for an unsupported language name.</source>
          <target state="translated">这可防止引发<ph id="ph1">&lt;xref:System.Configuration.ConfigurationException?displayProperty=nameWithType&gt;</ph>访问时<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph>不受支持的语言名称的实例。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>If more than one provider implementation is configured for the input language name, <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A&gt;</ph> returns the settings from the last matching provider configuration element.</source>
          <target state="translated">如果为输入的语言名称配置了多个提供程序实现<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A&gt;</ph>返回从最后一个匹配提供的设置配置元素。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>Language names are case-insensitive.</source>
          <target state="translated">语言名称不区分大小写。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>The following code example determines the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation for an input language and displays the configured settings for the language provider.</source>
          <target state="translated">下面的代码示例确定<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>输入的语言和显示语言提供程序的配置设置的实现。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="language" /&gt;</ph> does not have a configured provider on this computer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="language" /&gt;</ph> 在此计算机上没有已配置的提供程序。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="language" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="language" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">调用方没有所要求的权限。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">直接调用方的完全信任。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">此成员不能由部分信任的代码使用。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)">
          <source>The type of object to retrieve a type converter for.</source>
          <target state="translated">要为其检索类型转换器的对象类型。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> for the specified data type.</source>
          <target state="translated">获取指定数据类型的 <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> for the specified type, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if a <ph id="ph3">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> for the specified type cannot be found.</source>
          <target state="translated">指定类型的 <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph>；如果无法找到指定类型的 <ph id="ph3">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph>，则为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)">
          <source>A derived class can override this method to provide specific types of type converters for specific data types.</source>
          <target state="translated">派生的类可以重写此方法以针对特定数据类型提供特定类型的类型转换器。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>A file name extension.</source>
          <target state="translated">文件扩展名。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>Returns a language name associated with the specified file name extension, as configured in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> compiler configuration section.</source>
          <target state="translated">返回与指定文件扩展名关联的语言名称，如 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> 编译器配置节中所配置的那样。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>A language name associated with the file name extension, as configured in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> compiler configuration settings.</source>
          <target state="translated">与文件扩展名关联的语言名称，如 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> 编译器配置设置中所配置的那样。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>system.codedom<ph id="ph2">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept> in the machine configuration file (Machine.config) contains the language provider and compiler configuration settings for each <ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation on the computer.</source>
          <target state="translated"><bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>System.codedom<ph id="ph2">&amp;gt;</ph>元素<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept>计算机配置文件 (Machine.config) 包含每个语言提供程序和编译器配置设置<ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>上的实现计算机。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A&gt;</ph> method searches each provider configuration element for the specified file name extension.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A&gt;</ph>方法搜索指定的文件名称扩展每个提供程序配置元素。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A&gt;</ph> method checks whether at least one provider implementation supports a specific file name extension.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A&gt;</ph>方法检查是否至少一个提供程序实现支持特定的文件扩展名。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>You can validate a file name extension using <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A&gt;</ph> before passing it to <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A&gt;</ph>.</source>
          <target state="translated">你可以验证文件名称扩展 using<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A&gt;</ph>之前将其传递给<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>This prevents <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A&gt;</ph> from throwing a <ph id="ph2">&lt;xref:System.Configuration.ConfigurationException?displayProperty=nameWithType&gt;</ph> for an unsupported file name extension.</source>
          <target state="translated">这可以防止<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A&gt;</ph>从引发<ph id="ph2">&lt;xref:System.Configuration.ConfigurationException?displayProperty=nameWithType&gt;</ph>不支持的文件名称扩展。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>If a provider implementation supports the input file name extension, and there are multiple supported languages configured for that provider, then <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A&gt;</ph> returns the first language name for that provider.</source>
          <target state="translated">如果提供程序实现支持的输入的文件扩展名，并且有多个受支持的语言为该提供程序，然后配置<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A&gt;</ph>返回该提供程序的第一个语言名称。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>If more than one provider implementation is configured for the input file name extension, <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A&gt;</ph> returns the language name from the last matching provider configuration element.</source>
          <target state="translated">如果输入的文件扩展名，配置了多个提供程序实现<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A&gt;</ph>返回语言名称的最后一个匹配提供配置元素中。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>Language names and file name extensions are case-insensitive.</source>
          <target state="translated">语言名称和文件扩展名不区分大小写。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>The following code example determines the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation for an input file name extension and displays the configured settings for the language provider.</source>
          <target state="translated">下面的代码示例确定<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>输入的文件扩展名为显示语言提供程序的配置设置的实现。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="extension" /&gt;</ph> does not have a configured language provider on this computer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="extension" /&gt;</ph> 在此计算机上没有已配置的语言提供程序。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="extension" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="extension" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">调用方没有所要求的权限。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">直接调用方的完全信任。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">此成员不能由部分信任的代码使用。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> that indicates the type to return.</source>
          <target state="translated">指示返回类型的 <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
          <source>Gets the type indicated by the specified <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph>.</source>
          <target state="translated">获取由指定的 <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> 指示的类型。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
          <source>A text representation of the specified type, formatted for the language in which code is generated by this code generator.</source>
          <target state="translated">指定类型的文本表示形式，针对此代码生成器生成代码时所用的语言进行了格式设置。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
          <source>In Visual Basic, for example, passing in a <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> for the <ph id="ph2">&lt;see cref="T:System.Int32" /&gt;</ph> type will return "Integer".</source>
          <target state="translated">例如，在 Visual Basic 中，为 <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> 类型传入 <ph id="ph2">&lt;see cref="T:System.Int32" /&gt;</ph> 将返回“Integer”。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
          <target state="translated">在.NET framework 1.0 和 1.1 版中，此方法由<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>实现返回<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph>的提供程序的方法。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">在 2.0 版中，此方法可以调用的代码提供程序上直接即使它不被覆盖的代码提供程序。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">如果代码提供程序不重写此方法，<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>供基类调用实现。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">此方法和 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> 方法均不在派生类中重写。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">如果你重写此方法，你必须调用基类的对应方法。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
          <source>The base-class method creates a generator in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method for compatibility with preexisting providers that use code generators.</source>
          <target state="translated">基类方法使用过时的派生类中创建的生成器<ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph>与预先存在的提供程序使用代码生成器的兼容性的方法。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">基类方法然后调用中的等效方法<ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph>实现来执行此功能。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code generator.</source>
          <target state="translated">你将获得<ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph>如果不使用代码生成器的代码提供调用基类方法。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
          <source>A file name extension.</source>
          <target state="translated">文件扩展名。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
          <source>Tests whether a file name extension has an associated <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> implementation configured on the computer.</source>
          <target state="translated">测试文件扩展名是否在计算机上配置了关联的 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> 实现。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a <ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> implementation is configured for the specified file name extension; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果为指定的文件扩展名配置了 <ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> 实现，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则，为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>system.codedom<ph id="ph2">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept> in the machine configuration file (Machine.config) contains the language provider and compiler configuration settings for each <ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation on the computer.</source>
          <target state="translated"><bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>System.codedom<ph id="ph2">&amp;gt;</ph>元素<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept>计算机配置文件 (Machine.config) 包含每个语言提供程序和编译器配置设置<ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>上的实现计算机。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A&gt;</ph> method searches the provider configuration elements for the specified file name extension.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A&gt;</ph>方法搜索指定的文件扩展名的提供程序配置元素。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
          <source>File name extensions are case-insensitive.</source>
          <target state="translated">文件扩展名不区分大小写。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
          <source>The following code example determines the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation for an input file name extension and displays the configured settings for the language provider.</source>
          <target state="translated">下面的代码示例确定<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>输入的文件扩展名为显示语言提供程序的配置设置的实现。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="extension" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="extension" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">调用方没有所要求的权限。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">直接调用方的完全信任。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">此成员不能由部分信任的代码使用。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
          <source>The language name.</source>
          <target state="translated">语言名称。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
          <source>Tests whether a language has a <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> implementation configured on the computer.</source>
          <target state="translated">测试某语言是否已在计算机上配置了 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> 实现。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a <ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> implementation is configured for the specified language; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果为指定语言配置了 <ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> 实现，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则，为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>system.codedom<ph id="ph2">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept> in the machine configuration file (Machine.config) contains the language provider and compiler configuration settings for each <ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation on the computer.</source>
          <target state="translated"><bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>System.codedom<ph id="ph2">&amp;gt;</ph>元素<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept>计算机配置文件 (Machine.config) 包含每个语言提供程序和编译器配置设置<ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>上的实现计算机。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A&gt;</ph> method searches the provider configuration elements for the specified language name.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A&gt;</ph>方法搜索指定的语言名称的提供程序配置元素。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
          <source>Language names are case-insensitive.</source>
          <target state="translated">语言名称不区分大小写。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
          <source>The following code example determines the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation for an input language and displays the configured settings for the language provider.</source>
          <target state="translated">下面的代码示例确定<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>输入的语言和显示语言提供程序的配置设置的实现。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="language" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="language" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">调用方没有所要求的权限。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">直接调用方的完全信任。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">此成员不能由部分信任的代码使用。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>The value to verify as a valid identifier.</source>
          <target state="translated">要验证为一个有效标识符的值。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>Returns a value that indicates whether the specified value is a valid identifier for the current language.</source>
          <target state="translated">返回一个值，该值指示指定的值是否是当前语言的有效标识符。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="value" /&gt;</ph> parameter is a valid identifier; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;paramref name="value" /&gt;</ph> 参数是有效标识符，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>This method tests whether an identifier is valid.</source>
          <target state="translated">此方法测试标识符是否有效。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier%2A&gt;</ph> method is provider specific.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier%2A&gt;</ph>方法是特定于提供程序。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>Identifiers that are valid for one provider might not be valid for other providers.</source>
          <target state="translated">一个提供程序对有效的标识符可能不是有效的其他提供程序。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>If <ph id="ph1">`value`</ph> contains characters outside of the ASCII character range, check the identifier for all the languages that might be used to compile the code.</source>
          <target state="translated">如果<ph id="ph1">`value`</ph>包含字符的 ASCII 字符范围，之外检查可能用于编译代码的所有语言的标识符。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
          <target state="translated">在.NET framework 1.0 和 1.1 版中，此方法由<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>实现返回<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph>的提供程序的方法。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">在 2.0 版中，此方法可以调用的代码提供程序上直接即使它不被覆盖的代码提供程序。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">如果代码提供程序不重写此方法，<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>供基类调用实现。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">此方法和 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> 方法均不在派生类中重写。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)" /&gt;</ph> in a derived class, design the method to return <ph id="ph2">&lt;see langword="true" /&gt;</ph> only if the value fits the rules of the language and does not conflict with a keyword.</source>
          <target state="translated">在重写<ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)" /&gt;</ph>在派生类中，设计该方法以返回<ph id="ph2">&lt;see langword="true" /&gt;</ph>只有值符合语言的规则，并且不与关键字冲突。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">如果你重写此方法，你必须调用基类的对应方法。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>The base-class method creates a generator in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method for compatibility with preexisting providers that use code generators.</source>
          <target state="translated">基类方法使用过时的派生类中创建的生成器<ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph>与预先存在的提供程序使用代码生成器的兼容性的方法。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">基类方法然后调用中的等效方法<ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph>实现来执行此功能。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code generator.</source>
          <target state="translated">你将获得<ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph>如果不使用代码生成器的代码提供调用基类方法。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="P:System.CodeDom.Compiler.CodeDomProvider.LanguageOptions">
          <source>Gets a language features identifier.</source>
          <target state="translated">获取语言功能标识符。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.Compiler.CodeDomProvider.LanguageOptions">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.LanguageOptions" /&gt;</ph> that indicates special features of the language.</source>
          <target state="translated">指示语言的特殊功能的 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.LanguageOptions" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> object that is used to read the code to be parsed.</source>
          <target state="translated">用于读取待分析代码的 <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
          <source>Compiles the code read from the specified text stream into a <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph>.</source>
          <target state="translated">将从指定文本流读取的代码编译进 <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> that contains a representation of the parsed code.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph>，包含已分析代码的表示形式。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeParser&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateParser%2A&gt;</ph> method of the provider.</source>
          <target state="translated">在.NET framework 1.0 和 1.1 版中，此方法由<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeParser&gt;</ph>实现返回<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateParser%2A&gt;</ph>的提供程序的方法。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">在 2.0 版中，此方法可以调用的代码提供程序上直接即使它不被覆盖的代码提供程序。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeParser&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">如果代码提供程序不重写此方法，<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeParser&gt;</ph>供基类调用实现。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">此方法和 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> 方法均不在派生类中重写。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">如果你重写此方法，你必须调用基类的对应方法。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
          <source>The base-class method creates a parser in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" /&gt;</ph> method for compatibility with preexisting providers that use code parsers.</source>
          <target state="translated">基类方法使用过时的派生类中创建一个分析器<ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" /&gt;</ph>与预先存在的提供程序使用代码分析程序的兼容性的方法。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeParser" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">基类方法然后调用中的等效方法<ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeParser" /&gt;</ph>实现来执行此功能。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code parser.</source>
          <target state="translated">你将获得<ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph>如果从代码提供程序不使用代码分析器调用基类方法。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
          <source>Returns a value indicating whether the specified code generation support is provided.</source>
          <target state="translated">返回一个值，该值指示是否提供了指定的代码生成支持。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified code generation support is provided; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果提供了指定的代码生成支持，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
          <source>This method can be called with a number of <ph id="ph1">&lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;</ph> flags at once to test for a set of capabilities by joining a set of appropriate capability flags together with a binary <ph id="ph2">`OR`</ph> operator (&amp;#124;).</source>
          <target state="translated">此方法可以调用的数量<ph id="ph1">&lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;</ph>标志一次以一组的功能测试方法加入一组以及二进制文件的相应功能标志<ph id="ph2">`OR`</ph>运算符 (&amp;#124;)。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
          <target state="translated">在.NET framework 1.0 和 1.1 版中，此方法由<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>实现返回<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph>的提供程序的方法。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">在 2.0 版中，此方法可以调用的代码提供程序上直接即使它不被覆盖的代码提供程序。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">如果代码提供程序不重写此方法，<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>供基类调用实现。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">此方法和 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> 方法均不在派生类中重写。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">如果你重写此方法，你必须调用基类的对应方法。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
          <source>The base-class method creates a generator in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method for compatibility with preexisting providers that use code generators.</source>
          <target state="translated">基类方法使用过时的派生类中创建的生成器<ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph>与预先存在的提供程序使用代码生成器的兼容性的方法。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">基类方法然后调用中的等效方法<ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph>实现来执行此功能。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code generator.</source>
          <target state="translated">你将获得<ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph>如果不使用代码生成器的代码提供调用基类方法。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>