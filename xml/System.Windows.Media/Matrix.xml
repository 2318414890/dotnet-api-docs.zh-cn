<Type Name="Matrix" FullName="System.Windows.Media.Matrix">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0972f9783aeff49583feba35c36dfdcc27a5eff2" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30670141" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct Matrix : IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit Matrix extends System.ValueType implements class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.Matrix" />
  <TypeSignature Language="VB.NET" Value="Public Structure Matrix&#xA;Implements IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public value class Matrix : IFormattable" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Media.MatrixConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.Media.Converters.MatrixValueSerializer))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示用于在二维空间中进行转换的 3x3 仿射转换矩阵。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在中进行转换使用的 3 x 3 矩阵[!INCLUDE[TLA2#tla_2d](~/includes/tla2sharptla-2d-md.md)]x，y 平面。 仿射转换矩阵相乘可形成任意数目的线性转换，例如旋转和时间差 （切变），然后再进行平移。 仿射转换矩阵具有等于 （0，0，1），因此只需指定前两个列中的成员的最后一列。  请注意行矢量，不是列矢量表示向量。  
  
 A [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Media.Matrix>使用行优先顺序进行存储，并具有以下结构：  
  
||||  
|-|-|-|  
|<xref:System.Windows.Media.Matrix.M11%2A>|<xref:System.Windows.Media.Matrix.M12%2A>|0|  
|<xref:System.Windows.Media.Matrix.M21%2A>|<xref:System.Windows.Media.Matrix.M22%2A>|0|  
|<xref:System.Windows.Media.Matrix.OffsetX%2A>|<xref:System.Windows.Media.Matrix.OffsetY%2A>|1|  
  
 在最后一个行中，成员<xref:System.Windows.Media.Matrix.OffsetX%2A>和<xref:System.Windows.Media.Matrix.OffsetY%2A>，表示平移值。  
  
 方法和属性中的转换矩阵通常被指定为一个只需单击六成员具有的向量，如下所示：  
  
 (<xref:System.Windows.Media.Matrix.M11%2A>, <xref:System.Windows.Media.Matrix.M12%2A>, <xref:System.Windows.Media.Matrix.M21%2A>, <xref:System.Windows.Media.Matrix.M22%2A>, <xref:System.Windows.Media.Matrix.OffsetX%2A>, <xref:System.Windows.Media.Matrix.OffsetY%2A>)  
  
 尽管可以使用<xref:System.Windows.Media.Matrix>结构直接平移单独的点，或与<xref:System.Windows.Media.MatrixTransform>可以将对象，转换[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]还提供了一组使你可以将对象转换而无需直接与矩阵中使用的类：<xref:System.Windows.Media.RotateTransform>， <xref:System.Windows.Media.ScaleTransform>， <xref:System.Windows.Media.SkewTransform>，和<xref:System.Windows.Media.TranslateTransform>。  
  
<a name="xamlAttributeUsage_Matrix"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性用法  
  
```  
<object property="m11, m12, m21, m22, offsetX, offsetY"/>  
- or -  
<object property="Identity"/>  
```  
  
<a name="xamlValues_Matrix"></a>   
## <a name="xaml-values"></a>XAML 值  
 *m11*  
 <xref:System.Double?displayProperty=nameWithType>  
  
 中的第一行和第一列，此值<xref:System.Windows.Media.Matrix>。 有关更多信息，请参见 <xref:System.Windows.Media.Matrix.M11%2A> 属性。  
  
 *m12*  
 <xref:System.Double?displayProperty=nameWithType>  
  
 中的第一行和第二列的值。 有关更多信息，请参见 <xref:System.Windows.Media.Matrix.M12%2A> 属性。  
  
 *m21*  
 <xref:System.Double?displayProperty=nameWithType>  
  
 中的第二行和第一列的值。 有关更多信息，请参见 <xref:System.Windows.Media.Matrix.M21%2A> 属性。  
  
 *m22*  
 <xref:System.Double?displayProperty=nameWithType>  
  
 中的第二行和第二列的值。 有关更多信息，请参见 <xref:System.Windows.Media.Matrix.M22%2A> 属性。  
  
 *offsetX*  
 <xref:System.Double?displayProperty=nameWithType>  
  
 中的第三行和第一列的值。 有关更多信息，请参见 <xref:System.Windows.Media.Matrix.OffsetX%2A> 属性。  
  
 *offsetY*  
 <xref:System.Double?displayProperty=nameWithType>  
  
 中的第三行和第二列的值。 有关更多信息，请参见 <xref:System.Windows.Media.Matrix.OffsetY%2A> 属性。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Matrix (double m11, double m12, double m21, double m22, double offsetX, double offsetY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 m11, float64 m12, float64 m21, float64 m22, float64 offsetX, float64 offsetY) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (m11 As Double, m12 As Double, m21 As Double, m22 As Double, offsetX As Double, offsetY As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Matrix(double m11, double m12, double m21, double m22, double offsetX, double offsetY);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="m11" Type="System.Double" />
        <Parameter Name="m12" Type="System.Double" />
        <Parameter Name="m21" Type="System.Double" />
        <Parameter Name="m22" Type="System.Double" />
        <Parameter Name="offsetX" Type="System.Double" />
        <Parameter Name="offsetY" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="m11">新的 <see cref="T:System.Windows.Media.Matrix" /> 结构的 <see cref="P:System.Windows.Media.Matrix.M11" /> 系数。</param>
        <param name="m12">新的 <see cref="T:System.Windows.Media.Matrix" /> 结构的 <see cref="P:System.Windows.Media.Matrix.M12" /> 系数。</param>
        <param name="m21">新的 <see cref="T:System.Windows.Media.Matrix" /> 结构的 <see cref="P:System.Windows.Media.Matrix.M21" /> 系数。</param>
        <param name="m22">新的 <see cref="T:System.Windows.Media.Matrix" /> 结构的 <see cref="P:System.Windows.Media.Matrix.M22" /> 系数。</param>
        <param name="offsetX">新的 <see cref="T:System.Windows.Media.Matrix" /> 结构的 <see cref="P:System.Windows.Media.Matrix.OffsetX" /> 系数。</param>
        <param name="offsetY">新的 <see cref="T:System.Windows.Media.Matrix" /> 结构的 <see cref="P:System.Windows.Media.Matrix.OffsetY" /> 系数。</param>
        <summary>初始化 <see cref="T:System.Windows.Media.Matrix" /> 结构的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Windows.Media.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(valuetype System.Windows.Media.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.Append(System.Windows.Media.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Windows::Media::Matrix matrix);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix">要追加到此 <see cref="T:System.Windows.Media.Matrix" /> 结构的 <see cref="T:System.Windows.Media.Matrix" /> 结构。</param>
        <summary>将指定的 <see cref="T:System.Windows.Media.Matrix" /> 结构追加到此 <see cref="T:System.Windows.Media.Matrix" /> 结构。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此操作等同于将乘以这<xref:System.Windows.Media.Matrix>由参数的结构`matrix`。  矩阵乘法不是可交换性，不过，因此此操作不是与将乘以参数相同`matrix`由此<xref:System.Windows.Media.Matrix>结构; 即，(这 * `matrix`) 不是相同 (`matrix` * 这)。  
  
   
  
## Examples  
 下面的示例演示如何将追加<xref:System.Windows.Media.Matrix>结构与另一个<xref:System.Windows.Media.Matrix>结构。  
  
 [!code-csharp[MatrixExamples_snip#MatrixRotateAboutPointExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixrotateaboutpointexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Matrix.Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)" />
        <altmember cref="M:System.Windows.Media.Matrix.op_Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)" />
        <altmember cref="M:System.Windows.Media.Matrix.Prepend(System.Windows.Media.Matrix)" />
      </Docs>
    </Member>
    <Member MemberName="Determinant">
      <MemberSignature Language="C#" Value="public double Determinant { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Determinant" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Matrix.Determinant" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Determinant As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Determinant { double get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此 <see cref="T:System.Windows.Media.Matrix" /> 结构的行列式。</summary>
        <value>此 <see cref="T:System.Windows.Media.Matrix" /> 的行列式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 此示例演示如何获取的行列式<xref:System.Windows.Media.Matrix>。  
  
 [!code-csharp[MatrixExamples_snip#MatrixDeterminantExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixdeterminantexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>确定两个指定的 <see cref="T:System.Windows.Media.Matrix" /> 结构是否具有相同的值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A<xref:System.Windows.Media.Matrix>存储其值作为双精度型值。 因为的值<xref:System.Double>它，比较两个执行算术运算时可能会丢失精度<xref:System.Double>逻辑上相等的结构可能会失败。  
  
   
  
## Examples  
 下面的示例演示如何检查两个<xref:System.Windows.Media.Matrix>是否相等的结构。  
  
 [!code-csharp[MatrixExamples_snip#MatrixEqualityExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixequalityexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">要比较的 <see cref="T:System.Object" />。</param>
        <summary>确定指定的 <see cref="T:System.Object" /> 是否是一个与此 <see cref="T:System.Windows.Media.Matrix" /> 相同的 <see cref="T:System.Windows.Media.Matrix" /> 结构。</summary>
        <returns>
          如果 <paramref name="o" /> 是一个与此 <see cref="T:System.Windows.Media.Matrix" /> 结构相同的 <see cref="T:System.Windows.Media.Matrix" /> 结构，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A<xref:System.Windows.Media.Matrix>存储其值作为双精度型值。 因为的值<xref:System.Double>它，比较两个执行算术运算时可能会丢失精度<xref:System.Double>逻辑上相等的结构可能会失败。  
  
   
  
## Examples  
 下面的示例演示如何检查两个<xref:System.Windows.Media.Matrix>是否相等的结构。  
  
 [!code-csharp[MatrixExamples_snip#MatrixEqualityExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixequalityexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Matrix.op_Equality(System.Windows.Media.Matrix,System.Windows.Media.Matrix)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Windows.Media.Matrix value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Windows.Media.Matrix value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.Equals(System.Windows.Media.Matrix)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As Matrix) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Windows::Media::Matrix value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="value">要与此实例比较的 <see cref="T:System.Windows.Media.Matrix" /> 实例。</param>
        <summary>确定指定的 <see cref="T:System.Windows.Media.Matrix" /> 结构是否与此实例相同。</summary>
        <returns>
          如果两个实例相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A<xref:System.Windows.Media.Matrix>存储其值作为双精度型值。 因为的值<xref:System.Double>它，比较两个执行算术运算时可能会丢失精度<xref:System.Double>逻辑上相等的结构可能会失败。  
  
   
  
## Examples  
 下面的示例演示如何检查两个<xref:System.Windows.Media.Matrix>是否相等的结构。  
  
 [!code-csharp[MatrixExamples_snip#MatrixEqualityExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixequalityexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Matrix.op_Equality(System.Windows.Media.Matrix,System.Windows.Media.Matrix)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (System.Windows.Media.Matrix matrix1, System.Windows.Media.Matrix matrix2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.Windows.Media.Matrix matrix1, valuetype System.Windows.Media.Matrix matrix2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.Equals(System.Windows.Media.Matrix,System.Windows.Media.Matrix)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (matrix1 As Matrix, matrix2 As Matrix) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(System::Windows::Media::Matrix matrix1, System::Windows::Media::Matrix matrix2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix1" Type="System.Windows.Media.Matrix" />
        <Parameter Name="matrix2" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix1">要比较的第一个 <see cref="T:System.Windows.Media.Matrix" /> 结构。</param>
        <param name="matrix2">要比较的第二个 <see cref="T:System.Windows.Media.Matrix" /> 结构。</param>
        <summary>确定两个指定的 <see cref="T:System.Windows.Media.Matrix" /> 结构是否相同。</summary>
        <returns>
          如果 <paramref name="matrix1" /> 和 <paramref name="matrix2" /> 相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A<xref:System.Windows.Media.Matrix>存储其值作为双精度型值。 因为的值<xref:System.Double>它，比较两个执行算术运算时可能会丢失精度<xref:System.Double>逻辑上相等的结构可能会失败。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Matrix.op_Equality(System.Windows.Media.Matrix,System.Windows.Media.Matrix)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回此 <see cref="T:System.Windows.Media.Matrix" /> 结构的哈希代码。</summary>
        <returns>此实例的哈希代码。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasInverse">
      <MemberSignature Language="C#" Value="public bool HasInverse { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasInverse" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Matrix.HasInverse" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasInverse As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasInverse { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示此 <see cref="T:System.Windows.Media.Matrix" /> 结构是否可以反转。</summary>
        <value>
          如果 <see cref="T:System.Windows.Media.Matrix" /> 存在逆矩阵，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例检查是否<xref:System.Windows.Media.Matrix>是否可逆转。 如果它是可逆转的<xref:System.Windows.Media.Matrix>反转。  
  
 [!code-csharp[MatrixExamples_snip#MatrixInverseExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixinverseexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Identity">
      <MemberSignature Language="C#" Value="public static System.Windows.Media.Matrix Identity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Media.Matrix Identity" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Matrix.Identity" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Identity As Matrix" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Media::Matrix Identity { System::Windows::Media::Matrix get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Matrix</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个恒等 <see cref="T:System.Windows.Media.Matrix" />。</summary>
        <value>一个恒等矩阵。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 某标识矩阵在系数 [1，1]，[2，2] [3，3] 中具有值为 1 和 0，在其余系数的值。 这对应于设置<xref:System.Windows.Media.Matrix.M11%2A>和<xref:System.Windows.Media.Matrix.M22%2A>为 1 和<xref:System.Windows.Media.Matrix.M12%2A>， <xref:System.Windows.Media.Matrix.M21%2A>， <xref:System.Windows.Media.Matrix.OffsetX%2A>，和<xref:System.Windows.Media.Matrix.OffsetY%2A>为 0。 是的实现的仿射矩阵，[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]用于<xref:System.Windows.Media.Matrix>，结构，系数 [3，1]、 [3，2] 和 [3.3] 暗指始终分别具有 0,0,1 的值。  
  
||||  
|-|-|-|  
|1|0|0|  
|0|1|0|  
|0|0|1|  
  
 为某标识矩阵，<xref:System.Windows.Media.Matrix.ToString%2A>方法返回字符串"标识"而不是系数的<xref:System.Windows.Media.Matrix>。  
  
   
  
## Examples  
 下面的示例演示如何检索<xref:System.Windows.Media.Matrix.Identity%2A>矩阵。  
  
 [!code-csharp[MatrixExamples_snip#MatrixIdentityExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixidentityexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Matrix.SetIdentity" />
        <altmember cref="P:System.Windows.Media.Matrix.IsIdentity" />
      </Docs>
    </Member>
    <Member MemberName="Invert">
      <MemberSignature Language="C#" Value="public void Invert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.Invert" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invert ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invert();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>反转此 <see cref="T:System.Windows.Media.Matrix" /> 结构。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例检查如果<xref:System.Windows.Media.Matrix>结构是可逆转。 如果它是可逆转的<xref:System.Windows.Media.Matrix>反转结构。  
  
 [!code-csharp[MatrixExamples_snip#MatrixInverseExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixinverseexample_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">不能反转 <see cref="T:System.Windows.Media.Matrix" /> 结构。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsIdentity">
      <MemberSignature Language="C#" Value="public bool IsIdentity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsIdentity" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Matrix.IsIdentity" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsIdentity As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsIdentity { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示此 <see cref="T:System.Windows.Media.Matrix" /> 结构是否为恒等矩阵。</summary>
        <value>
          如果 <see cref="T:System.Windows.Media.Matrix" /> 结构是恒等矩阵，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 某标识矩阵在系数 [1，1]，[2，2] [3，3] 中具有值为 1 和 0，在其余系数的值。 这对应于设置<xref:System.Windows.Media.Matrix.M11%2A>和<xref:System.Windows.Media.Matrix.M22%2A>为 1 和<xref:System.Windows.Media.Matrix.M12%2A>， <xref:System.Windows.Media.Matrix.M21%2A>， <xref:System.Windows.Media.Matrix.OffsetX%2A>，和<xref:System.Windows.Media.Matrix.OffsetY%2A>为 0。 是的实现的仿射矩阵，[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]用于<xref:System.Windows.Media.Matrix>结构，系数 [3，1]、 [3，2] 和 [3.3] 暗指始终分别具有 0,0,1 的值。  
  
||||  
|-|-|-|  
|1|0|0|  
|0|1|0|  
|0|0|1|  
  
 为某标识矩阵，<xref:System.Windows.Media.Matrix.ToString%2A>方法返回字符串"标识"，而不是系数的<xref:System.Windows.Media.Matrix>。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Matrix.Identity" />
        <altmember cref="M:System.Windows.Media.Matrix.SetIdentity" />
      </Docs>
    </Member>
    <Member MemberName="M11">
      <MemberSignature Language="C#" Value="public double M11 { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 M11" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Matrix.M11" />
      <MemberSignature Language="VB.NET" Value="Public Property M11 As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double M11 { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此 <see cref="T:System.Windows.Media.Matrix" /> 结构中第一行与第一列相交处的值。</summary>
        <value>此 <see cref="T:System.Windows.Media.Matrix" /> 中第一行与第一列相交处的值。 默认值为 1。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何将两个相乘<xref:System.Windows.Media.Matrix>结构以及如何将值分配给<xref:System.Windows.Media.Matrix>声明它时和声明结构后。  
  
 [!code-csharp[MatrixExamples_snip#MatrixMultiplicationExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixmultiplicationexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="M12">
      <MemberSignature Language="C#" Value="public double M12 { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 M12" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Matrix.M12" />
      <MemberSignature Language="VB.NET" Value="Public Property M12 As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double M12 { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此 <see cref="T:System.Windows.Media.Matrix" /> 结构中第一行与第二列相交处的值。</summary>
        <value>此 <see cref="T:System.Windows.Media.Matrix" /> 中第一行与第二列相交处的值。 默认值为 0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表显示的布局<xref:System.Windows.Media.Matrix>。  
  
||||  
|-|-|-|  
|<xref:System.Windows.Media.Matrix.M11%2A>|<xref:System.Windows.Media.Matrix.M12%2A>|0|  
|<xref:System.Windows.Media.Matrix.M21%2A>|<xref:System.Windows.Media.Matrix.M22%2A>|0|  
|<xref:System.Windows.Media.Matrix.OffsetX%2A>|<xref:System.Windows.Media.Matrix.OffsetY%2A>|1|  
  
   
  
## Examples  
 下面的示例演示如何将两个相乘<xref:System.Windows.Media.Matrix>结构以及如何将值分配给<xref:System.Windows.Media.Matrix>声明它时和声明结构后。  
  
 [!code-csharp[MatrixExamples_snip#MatrixMultiplicationExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixmultiplicationexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="M21">
      <MemberSignature Language="C#" Value="public double M21 { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 M21" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Matrix.M21" />
      <MemberSignature Language="VB.NET" Value="Public Property M21 As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double M21 { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此 <see cref="T:System.Windows.Media.Matrix" /> 结构中第二行与第一列相交处的值。</summary>
        <value>此 <see cref="T:System.Windows.Media.Matrix" /> 中第二行与第一列相交处的值。 默认值为 0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表显示的布局<xref:System.Windows.Media.Matrix>。  
  
||||  
|-|-|-|  
|<xref:System.Windows.Media.Matrix.M11%2A>|<xref:System.Windows.Media.Matrix.M12%2A>|0|  
|<xref:System.Windows.Media.Matrix.M21%2A>|<xref:System.Windows.Media.Matrix.M22%2A>|0|  
|<xref:System.Windows.Media.Matrix.OffsetX%2A>|<xref:System.Windows.Media.Matrix.OffsetY%2A>|1|  
  
   
  
## Examples  
 下面的示例演示如何将两个相乘<xref:System.Windows.Media.Matrix>结构以及如何将值分配给<xref:System.Windows.Media.Matrix>声明它时和声明结构后。  
  
 [!code-csharp[MatrixExamples_snip#MatrixMultiplicationExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixmultiplicationexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="M22">
      <MemberSignature Language="C#" Value="public double M22 { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 M22" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Matrix.M22" />
      <MemberSignature Language="VB.NET" Value="Public Property M22 As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double M22 { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此 <see cref="T:System.Windows.Media.Matrix" /> 结构中第二行与第二列相交处的值。</summary>
        <value>此 <see cref="T:System.Windows.Media.Matrix" /> 结构中第二行与第二列相交处的值。 默认值为 1。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表显示的布局<xref:System.Windows.Media.Matrix>结构。  
  
||||  
|-|-|-|  
|<xref:System.Windows.Media.Matrix.M11%2A>|<xref:System.Windows.Media.Matrix.M12%2A>|0|  
|<xref:System.Windows.Media.Matrix.M21%2A>|<xref:System.Windows.Media.Matrix.M22%2A>|0|  
|<xref:System.Windows.Media.Matrix.OffsetX%2A>|<xref:System.Windows.Media.Matrix.OffsetY%2A>|1|  
  
   
  
## Examples  
 下面的示例演示如何将两个相乘<xref:System.Windows.Media.Matrix>结构以及如何将值分配给<xref:System.Windows.Media.Matrix>声明它时和声明结构后。  
  
 [!code-csharp[MatrixExamples_snip#MatrixMultiplicationExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixmultiplicationexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Media.Matrix Multiply (System.Windows.Media.Matrix trans1, System.Windows.Media.Matrix trans2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Media.Matrix Multiply(valuetype System.Windows.Media.Matrix trans1, valuetype System.Windows.Media.Matrix trans2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (trans1 As Matrix, trans2 As Matrix) As Matrix" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Media::Matrix Multiply(System::Windows::Media::Matrix trans1, System::Windows::Media::Matrix trans2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trans1" Type="System.Windows.Media.Matrix" />
        <Parameter Name="trans2" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="trans1">要相乘的第一个 <see cref="T:System.Windows.Media.Matrix" /> 结构。</param>
        <param name="trans2">要相乘的第二个 <see cref="T:System.Windows.Media.Matrix" /> 结构。</param>
        <summary>让 <see cref="T:System.Windows.Media.Matrix" /> 结构乘以另一个 <see cref="T:System.Windows.Media.Matrix" /> 结构。</summary>
        <returns>
          <paramref name="trans1" /> 与 <paramref name="trans2" /> 相乘的结果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 矩阵乘法不是可交换的。 将乘以`trans1`通过`trans2`不相同相乘`trans2`通过`trans1`。  
  
   
  
## Examples  
 下面的示例演示如何将两个相乘<xref:System.Windows.Media.Matrix>结构。  
  
 [!code-csharp[MatrixExamples_snip#MatrixMultiplicationExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixmultiplicationexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Matrix.op_Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)" />
        <altmember cref="M:System.Windows.Media.Matrix.Prepend(System.Windows.Media.Matrix)" />
        <altmember cref="M:System.Windows.Media.Matrix.Append(System.Windows.Media.Matrix)" />
      </Docs>
    </Member>
    <Member MemberName="OffsetX">
      <MemberSignature Language="C#" Value="public double OffsetX { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 OffsetX" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Matrix.OffsetX" />
      <MemberSignature Language="VB.NET" Value="Public Property OffsetX As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double OffsetX { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此 <see cref="T:System.Windows.Media.Matrix" /> 结构中第三行与第一列相交处的值。</summary>
        <value>此 <see cref="T:System.Windows.Media.Matrix" /> 结构中第三行与第一列相交处的值。 默认值为 0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.Matrix.OffsetX%2A>属性之所以如此命名，因为它指定要坐标空间沿 x 轴平移的量。  
  
 下表显示的布局<xref:System.Windows.Media.Matrix>。  
  
||||  
|-|-|-|  
|<xref:System.Windows.Media.Matrix.M11%2A>|<xref:System.Windows.Media.Matrix.M12%2A>|0|  
|<xref:System.Windows.Media.Matrix.M21%2A>|<xref:System.Windows.Media.Matrix.M22%2A>|0|  
|<xref:System.Windows.Media.Matrix.OffsetX%2A>|<xref:System.Windows.Media.Matrix.OffsetY%2A>|1|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OffsetY">
      <MemberSignature Language="C#" Value="public double OffsetY { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 OffsetY" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Matrix.OffsetY" />
      <MemberSignature Language="VB.NET" Value="Public Property OffsetY As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double OffsetY { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此 <see cref="T:System.Windows.Media.Matrix" /> 结构中第三行与第二列相交处的值。</summary>
        <value>此 <see cref="T:System.Windows.Media.Matrix" /> 结构中第三行与第二列相交处的值。 默认值为 0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.Matrix.OffsetY%2A>属性之所以如此命名，因为它指定要坐标空间沿 y 轴平移的量。  
  
 下表显示的布局<xref:System.Windows.Media.Matrix>。  
  
||||  
|-|-|-|  
|<xref:System.Windows.Media.Matrix.M11%2A>|<xref:System.Windows.Media.Matrix.M12%2A>|0|  
|<xref:System.Windows.Media.Matrix.M21%2A>|<xref:System.Windows.Media.Matrix.M22%2A>|0|  
|<xref:System.Windows.Media.Matrix.OffsetX%2A>|<xref:System.Windows.Media.Matrix.OffsetY%2A>|1|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Media.Matrix matrix1, System.Windows.Media.Matrix matrix2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Windows.Media.Matrix matrix1, valuetype System.Windows.Media.Matrix matrix2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.op_Equality(System.Windows.Media.Matrix,System.Windows.Media.Matrix)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (matrix1 As Matrix, matrix2 As Matrix) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Media::Matrix matrix1, System::Windows::Media::Matrix matrix2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix1" Type="System.Windows.Media.Matrix" />
        <Parameter Name="matrix2" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix1">要比较的第一个 <see cref="T:System.Windows.Media.Matrix" /> 结构。</param>
        <param name="matrix2">要比较的第二个 <see cref="T:System.Windows.Media.Matrix" /> 结构。</param>
        <summary>确定两个指定的 <see cref="T:System.Windows.Media.Matrix" /> 结构是否相同。</summary>
        <returns>
          如果 <paramref name="matrix1" /> 和 <paramref name="matrix2" /> 相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A<xref:System.Windows.Media.Matrix>存储其值作为双精度型值。 因为的值<xref:System.Double>它，比较两个执行算术运算时可能会丢失精度<xref:System.Double>逻辑上相等的结构可能会失败。  
  
   
  
## Examples  
 下面的示例演示如何检查两个<xref:System.Windows.Media.Matrix>是否相等的结构。  
  
 [!code-csharp[MatrixExamples_snip#MatrixEqualityExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixequalityexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Media.Matrix.Equals" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Media.Matrix matrix1, System.Windows.Media.Matrix matrix2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Windows.Media.Matrix matrix1, valuetype System.Windows.Media.Matrix matrix2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.op_Inequality(System.Windows.Media.Matrix,System.Windows.Media.Matrix)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (matrix1 As Matrix, matrix2 As Matrix) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Media::Matrix matrix1, System::Windows::Media::Matrix matrix2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix1" Type="System.Windows.Media.Matrix" />
        <Parameter Name="matrix2" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix1">要比较的第一个 <see cref="T:System.Windows.Media.Matrix" /> 结构。</param>
        <param name="matrix2">要比较的第二个 <see cref="T:System.Windows.Media.Matrix" /> 结构。</param>
        <summary>确定两个指定的 <see cref="T:System.Windows.Media.Matrix" /> 结构是否不同。</summary>
        <returns>
          如果 <paramref name="matrix1" /> 和 <paramref name="matrix2" /> 不同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A<xref:System.Windows.Media.Matrix>存储其值作为双精度型值。 因为的值<xref:System.Double>它，比较两个执行算术运算时可能会丢失精度<xref:System.Double>逻辑上相等的结构可能会失败。  
  
   
  
## Examples  
 下面的示例演示如何检查两个<xref:System.Windows.Media.Matrix>是否相等的结构。  
  
 [!code-csharp[MatrixExamples_snip#MatrixEqualityExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixequalityexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Media.Matrix operator * (System.Windows.Media.Matrix trans1, System.Windows.Media.Matrix trans2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Media.Matrix op_Multiply(valuetype System.Windows.Media.Matrix trans1, valuetype System.Windows.Media.Matrix trans2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.op_Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator * (trans1 As Matrix, trans2 As Matrix) As Matrix" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Media::Matrix operator *(System::Windows::Media::Matrix trans1, System::Windows::Media::Matrix trans2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trans1" Type="System.Windows.Media.Matrix" />
        <Parameter Name="trans2" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="trans1">要相乘的第一个 <see cref="T:System.Windows.Media.Matrix" /> 结构。</param>
        <param name="trans2">要相乘的第二个 <see cref="T:System.Windows.Media.Matrix" /> 结构。</param>
        <summary>让 <see cref="T:System.Windows.Media.Matrix" /> 结构乘以另一个 <see cref="T:System.Windows.Media.Matrix" /> 结构。</summary>
        <returns>
          <paramref name="trans1" /> 与 <paramref name="trans2" /> 相乘的结果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 矩阵乘法不是可交换的。 将乘以`trans1`通过`trans2`不相同相乘`trans2`通过`trans1`。  
  
   
  
## Examples  
 下面的示例演示如何将两个相乘<xref:System.Windows.Media.Matrix>结构。  
  
 [!code-csharp[MatrixExamples_snip#MatrixMultiplicationExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixmultiplicationexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Matrix.Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)" />
        <altmember cref="M:System.Windows.Media.Matrix.Prepend(System.Windows.Media.Matrix)" />
        <altmember cref="M:System.Windows.Media.Matrix.Append(System.Windows.Media.Matrix)" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Windows.Media.Matrix Parse (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Media.Matrix Parse(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (source As String) As Matrix" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Media::Matrix Parse(System::String ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">矩阵的 <see cref="T:System.String" /> 表示形式。</param>
        <summary>将矩阵的 <see cref="T:System.String" /> 表示形式转换为等效的 <see cref="T:System.Windows.Media.Matrix" /> 结构。</summary>
        <returns>等效的 <see cref="T:System.Windows.Media.Matrix" /> 结构。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何将转换的字符串表示形式到矩阵<xref:System.Windows.Media.Matrix>结构。  
  
 [!code-csharp[MatrixExamples_snip#MatrixParseExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixparseexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prepend">
      <MemberSignature Language="C#" Value="public void Prepend (System.Windows.Media.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Prepend(valuetype System.Windows.Media.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.Prepend(System.Windows.Media.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Prepend(System::Windows::Media::Matrix matrix);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix">要添加到此 <see cref="T:System.Windows.Media.Matrix" /> 结构之前的 <see cref="T:System.Windows.Media.Matrix" /> 结构。</param>
        <summary>将指定的 <see cref="T:System.Windows.Media.Matrix" /> 结构添加到此 <see cref="T:System.Windows.Media.Matrix" /> 结构之前。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此操作等同于将乘以参数`matrix`由此<xref:System.Windows.Media.Matrix>结构。 但是，矩阵乘法不可交换，因此，此操作不相同相乘这<xref:System.Windows.Media.Matrix>由参数的结构`matrix`; 即， `matrix` * 这是不与此相同 * `matrix`。  
  
 在复合转换中，各个变换之间的顺序很重要。 例如，如果第一次旋转，则缩放，则转换，你获得不同的结果不是如果首先将转换，然后旋转，则缩放。 顺序很重要的原因之一是，这样像旋转和缩放转换是针对坐标系统的原点。 缩放以原点中心的对象生成比缩放已离开源的对象不同的结果。 同样，轮换基于原点居中的对象生成已离开源的对象与旋转不同的结果。  
  
   
  
## Examples  
 下面的示例演示如何在前面添加<xref:System.Windows.Media.Matrix>到另一条<xref:System.Windows.Media.Matrix>。  
  
 [!code-csharp[MatrixExamples_snip#MatrixPrependExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixprependexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Matrix.Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)" />
        <altmember cref="M:System.Windows.Media.Matrix.op_Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)" />
        <altmember cref="M:System.Windows.Media.Matrix.Append(System.Windows.Media.Matrix)" />
      </Docs>
    </Member>
    <Member MemberName="Rotate">
      <MemberSignature Language="C#" Value="public void Rotate (double angle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Rotate(float64 angle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.Rotate(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rotate (angle As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Rotate(double angle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="angle">旋转角度。</param>
        <summary>以此 <see cref="T:System.Windows.Media.Matrix" /> 结构的原点为中心旋转指定的角度。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何旋转<xref:System.Windows.Media.Matrix>。  
  
 [!code-csharp[MatrixExamples_snip#MatrixRotateExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixrotateexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Matrix.RotatePrepend(System.Double)" />
        <altmember cref="M:System.Windows.Media.Matrix.RotateAt(System.Double,System.Double,System.Double)" />
        <altmember cref="M:System.Windows.Media.Matrix.RotateAtPrepend(System.Double,System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="RotateAt">
      <MemberSignature Language="C#" Value="public void RotateAt (double angle, double centerX, double centerY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateAt(float64 angle, float64 centerX, float64 centerY) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.RotateAt(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateAt (angle As Double, centerX As Double, centerY As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateAt(double angle, double centerX, double centerY);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Double" />
        <Parameter Name="centerX" Type="System.Double" />
        <Parameter Name="centerY" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="angle">此矩阵要旋转的角度（单位为度）。</param>
        <param name="centerX">此矩阵要围绕其旋转的点的 x 坐标。</param>
        <param name="centerY">此矩阵要围绕其旋转的点的 y 坐标。</param>
        <summary>绕指定的点旋转此矩阵。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何旋转<xref:System.Windows.Media.Matrix>围绕指定点。  
  
 [!code-csharp[MatrixExamples_snip#MatrixRotateAboutPointExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixrotateaboutpointexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RotateAtPrepend">
      <MemberSignature Language="C#" Value="public void RotateAtPrepend (double angle, double centerX, double centerY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateAtPrepend(float64 angle, float64 centerX, float64 centerY) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.RotateAtPrepend(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateAtPrepend (angle As Double, centerX As Double, centerY As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateAtPrepend(double angle, double centerX, double centerY);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Double" />
        <Parameter Name="centerX" Type="System.Double" />
        <Parameter Name="centerY" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="angle">旋转角度（单位为度）。</param>
        <param name="centerX">旋转中心的 x 坐标。</param>
        <param name="centerY">旋转中心的 y 坐标。</param>
        <summary>在此 <see cref="T:System.Windows.Media.Matrix" /> 结构前面添加围绕指定点的指定角度的旋转。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在复合转换中，各个变换之间的顺序很重要。 例如，如果第一次旋转，则缩放，则转换，你获得不同的结果不是如果首先将转换，然后旋转，则缩放。 顺序很重要的原因之一是，这样像旋转和缩放转换是针对坐标系统的原点。 缩放以原点中心的对象生成比缩放已离开源的对象不同的结果。 同样，轮换基于原点居中的对象生成已离开源的对象与旋转不同的结果。  
  
   
  
## Examples  
 下面的示例演示如何在前面添加旋转到<xref:System.Windows.Media.Matrix>。  
  
 [!code-csharp[MatrixExamples_snip#MatrixPrependRotateExamples_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixprependrotateexamples_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RotatePrepend">
      <MemberSignature Language="C#" Value="public void RotatePrepend (double angle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotatePrepend(float64 angle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.RotatePrepend(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotatePrepend (angle As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotatePrepend(double angle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="angle">要在前面添加的旋转的角度。</param>
        <summary>在此 <see cref="T:System.Windows.Media.Matrix" /> 结构前面添加指定角度的旋转。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在复合转换中，各个变换之间的顺序很重要。 例如，如果第一次旋转，则缩放，则转换，你获得不同的结果不是如果首先将转换，然后旋转，则缩放。 顺序很重要的原因之一是，这样像旋转和缩放转换是针对坐标系统的原点。 缩放以原点中心的对象生成比缩放已离开源的对象不同的结果。 同样，轮换基于原点居中的对象生成已离开源的对象与旋转不同的结果。  
  
   
  
## Examples  
 下面的示例演示如何在前面添加旋转到<xref:System.Windows.Media.Matrix>。  
  
 [!code-csharp[MatrixExamples_snip#MatrixPrependRotateExamples_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixprependrotateexamples_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Matrix.Rotate(System.Double)" />
        <altmember cref="M:System.Windows.Media.Matrix.RotateAt(System.Double,System.Double,System.Double)" />
        <altmember cref="M:System.Windows.Media.Matrix.RotateAtPrepend(System.Double,System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public void Scale (double scaleX, double scaleY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Scale(float64 scaleX, float64 scaleY) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.Scale(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Scale (scaleX As Double, scaleY As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Scale(double scaleX, double scaleY);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scaleX" Type="System.Double" />
        <Parameter Name="scaleY" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="scaleX">此 <see cref="T:System.Windows.Media.Matrix" /> 要沿 x 轴缩放的值。</param>
        <param name="scaleY">此 <see cref="T:System.Windows.Media.Matrix" /> 要沿 y 轴缩放的值。</param>
        <summary>在此 <see cref="T:System.Windows.Media.Matrix" /> 结构后面追加指定的缩放向量。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何缩放<xref:System.Windows.Media.Matrix>结构。  
  
 [!code-csharp[MatrixExamples_snip#MatrixScaleExamples_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixscaleexamples_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Matrix.ScaleAt(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:System.Windows.Media.Matrix.ScaleAtPrepend(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:System.Windows.Media.Matrix.ScalePrepend(System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="ScaleAt">
      <MemberSignature Language="C#" Value="public void ScaleAt (double scaleX, double scaleY, double centerX, double centerY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleAt(float64 scaleX, float64 scaleY, float64 centerX, float64 centerY) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.ScaleAt(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleAt (scaleX As Double, scaleY As Double, centerX As Double, centerY As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleAt(double scaleX, double scaleY, double centerX, double centerY);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scaleX" Type="System.Double" />
        <Parameter Name="scaleY" Type="System.Double" />
        <Parameter Name="centerX" Type="System.Double" />
        <Parameter Name="centerY" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="scaleX">此 <see cref="T:System.Windows.Media.Matrix" /> 沿 x 轴的缩放量。</param>
        <param name="scaleY">此 <see cref="T:System.Windows.Media.Matrix" /> 沿 y 轴的缩放量。</param>
        <param name="centerX">缩放操作中心点的 x 坐标。</param>
        <param name="centerY">缩放操作中心点的 y 坐标。</param>
        <summary>围绕指定的点按指定的量缩放此 <see cref="T:System.Windows.Media.Matrix" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何缩放<xref:System.Windows.Media.Matrix>结构。  
  
 [!code-csharp[MatrixExamples_snip#MatrixScaleExamples_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixscaleexamples_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleAtPrepend">
      <MemberSignature Language="C#" Value="public void ScaleAtPrepend (double scaleX, double scaleY, double centerX, double centerY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleAtPrepend(float64 scaleX, float64 scaleY, float64 centerX, float64 centerY) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.ScaleAtPrepend(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleAtPrepend (scaleX As Double, scaleY As Double, centerX As Double, centerY As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleAtPrepend(double scaleX, double scaleY, double centerX, double centerY);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scaleX" Type="System.Double" />
        <Parameter Name="scaleY" Type="System.Double" />
        <Parameter Name="centerX" Type="System.Double" />
        <Parameter Name="centerY" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="scaleX">x 轴的缩放比例。</param>
        <param name="scaleY">y 轴的缩放比例。</param>
        <param name="centerX">执行缩放操作所围绕的点的 x 坐标。</param>
        <param name="centerY">执行缩放操作所围绕的点的 y 坐标。</param>
        <summary>在此 <see cref="T:System.Windows.Media.Matrix" /> 前面添加围绕指定点的指定缩放。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在复合转换中，各个变换之间的顺序很重要。 例如，如果第一次旋转，则缩放，则转换，你获得不同的结果不是如果首先将转换，然后旋转，则缩放。 顺序很重要的原因之一是，这样像旋转和缩放转换是针对坐标系统的原点。 缩放以原点中心的对象生成比缩放已离开源的对象不同的结果。 同样，轮换基于原点居中的对象生成已离开源的对象与旋转不同的结果。  
  
   
  
## Examples  
 下面的示例演示如何前面添加到缩放<xref:System.Windows.Media.Matrix>。  
  
 [!code-csharp[MatrixExamples_snip#MatrixPrependScaleExamples_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixprependscaleexamples_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScalePrepend">
      <MemberSignature Language="C#" Value="public void ScalePrepend (double scaleX, double scaleY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScalePrepend(float64 scaleX, float64 scaleY) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.ScalePrepend(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScalePrepend (scaleX As Double, scaleY As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScalePrepend(double scaleX, double scaleY);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scaleX" Type="System.Double" />
        <Parameter Name="scaleY" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="scaleX">此 <see cref="T:System.Windows.Media.Matrix" /> 结构要沿 x 轴缩放的值。</param>
        <param name="scaleY">此 <see cref="T:System.Windows.Media.Matrix" /> 结构要沿 y 轴缩放的值。</param>
        <summary>在此 <see cref="T:System.Windows.Media.Matrix" /> 结构前面添加指定的缩放向量。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在复合转换中，各个变换之间的顺序很重要。 例如，如果第一次旋转，则缩放，则转换，你获得不同的结果不是如果首先将转换，然后旋转，则缩放。 顺序很重要的原因之一是，这样像旋转和缩放转换是针对坐标系统的原点。 缩放以原点中心的对象生成比缩放已离开源的对象不同的结果。 同样，轮换基于原点居中的对象生成已离开源的对象与旋转不同的结果。  
  
   
  
## Examples  
 下面的示例演示如何前面添加到缩放<xref:System.Windows.Media.Matrix>结构。  
  
 [!code-csharp[MatrixExamples_snip#MatrixPrependScaleExamples_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixprependscaleexamples_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Matrix.ScaleAtPrepend(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:System.Windows.Media.Matrix.Scale(System.Double,System.Double)" />
        <altmember cref="M:System.Windows.Media.Matrix.ScaleAt(System.Double,System.Double,System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="SetIdentity">
      <MemberSignature Language="C#" Value="public void SetIdentity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetIdentity() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.SetIdentity" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetIdentity ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetIdentity();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将此 <see cref="T:System.Windows.Media.Matrix" /> 结构更改为恒等矩阵。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 某标识矩阵在系数 [1，1]，[2，2] [3，3] 中具有值为 1 和 0，在其余系数的值。 这对应于设置<xref:System.Windows.Media.Matrix.M11%2A>和<xref:System.Windows.Media.Matrix.M22%2A>为 1 和<xref:System.Windows.Media.Matrix.M12%2A>， <xref:System.Windows.Media.Matrix.M21%2A>， <xref:System.Windows.Media.Matrix.OffsetX%2A>，和<xref:System.Windows.Media.Matrix.OffsetY%2A>为 0。 是的实现的仿射矩阵，[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]用于<xref:System.Windows.Media.Matrix>结构，系数 [3，1]、 [3，2] 和 [3.3] 暗指始终分别具有 0,0,1 的值。  
  
||||  
|-|-|-|  
|1|0|0|  
|0|1|0|  
|0|0|1|  
  
 为某标识矩阵，<xref:System.Windows.Media.Matrix.ToString%2A>方法返回字符串"标识"，而不是系数的<xref:System.Windows.Media.Matrix>。  
  
   
  
## Examples  
 下面的示例演示如何打开<xref:System.Windows.Media.Matrix>到某标识矩阵的结构。  
  
 [!code-csharp[MatrixExamples_snip#MatrixIdentityExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixidentityexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Matrix.Identity" />
        <altmember cref="P:System.Windows.Media.Matrix.IsIdentity" />
      </Docs>
    </Member>
    <Member MemberName="Skew">
      <MemberSignature Language="C#" Value="public void Skew (double skewX, double skewY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Skew(float64 skewX, float64 skewY) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.Skew(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Skew (skewX As Double, skewY As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Skew(double skewX, double skewY);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="skewX" Type="System.Double" />
        <Parameter Name="skewY" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="skewX">用于扭曲此 <see cref="T:System.Windows.Media.Matrix" /> 的 x 维角度。</param>
        <param name="skewY">用于扭曲此 <see cref="T:System.Windows.Media.Matrix" /> 的 y 维角度。</param>
        <summary>在此 <see cref="T:System.Windows.Media.Matrix" /> 结构后面追加 x 和 y 维中指定角度的扭曲。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 此示例演示如何扭曲<xref:System.Windows.Media.Matrix>结构。  
  
 [!code-csharp[MatrixExamples_snip#MatrixSkewExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixskewexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Matrix.SkewPrepend(System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="SkewPrepend">
      <MemberSignature Language="C#" Value="public void SkewPrepend (double skewX, double skewY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SkewPrepend(float64 skewX, float64 skewY) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.SkewPrepend(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SkewPrepend (skewX As Double, skewY As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SkewPrepend(double skewX, double skewY);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="skewX" Type="System.Double" />
        <Parameter Name="skewY" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="skewX">用于扭曲此 <see cref="T:System.Windows.Media.Matrix" /> 的 x 维角度。</param>
        <param name="skewY">用于扭曲此 <see cref="T:System.Windows.Media.Matrix" /> 的 y 维角度。</param>
        <summary>在此 <see cref="T:System.Windows.Media.Matrix" /> 结构前面添加 x 和 y 维中指定角度的扭曲。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在复合转换中，各个变换之间的顺序很重要。 例如，如果第一次旋转，则缩放，则转换，你获得不同的结果不是如果首先将转换，然后旋转，则缩放。 顺序很重要的原因之一是，这样像旋转和缩放转换是针对坐标系统的原点。 缩放以原点中心的对象生成比缩放已离开源的对象不同的结果。 同样，轮换基于原点居中的对象生成已离开源的对象与旋转不同的结果。  
  
   
  
## Examples  
 此示例演示如何以前面添加到扭曲<xref:System.Windows.Media.Matrix>结构。  
  
 [!code-csharp[MatrixExamples_snip#MatrixSkewPrependExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixskewprependexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Matrix.Skew(System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="System.IFormattable.ToString">
      <MemberSignature Language="C#" Value="string IFormattable.ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IFormattable.ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.System#IFormattable#ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (format As String, provider As IFormatProvider) As String Implements IFormattable.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IFormattable.ToString(System::String ^ format, IFormatProvider ^ provider) = IFormattable::ToString;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">要使用的格式。  
  
 或  
  
 null 引用（Visual Basic 中为 <see langword="Nothing" />）将使用为 <see cref="T:System.IFormattable" /> 实现的类型所定义的默认格式。</param>
        <param name="provider">要用于对值设置格式的提供程序。  
  
 或  
  
 null 引用（Visual Basic 中为 <see langword="Nothing" />）将从操作系统的当前区域设置中获取数字格式信息。</param>
        <summary>使用指定格式对当前实例的值设置格式。</summary>
        <returns>采用指定格式的当前实例的值。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>创建此 <see cref="T:System.String" /> 结构的 <see cref="T:System.Windows.Media.Matrix" /> 表示形式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果此<xref:System.Windows.Media.Matrix>结构是单位矩阵，"标识"将返回的字符串。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建此 <see cref="T:System.String" /> 结构的 <see cref="T:System.Windows.Media.Matrix" /> 表示形式。</summary>
        <returns>一个 <see cref="T:System.String" />，其中包含此 <see cref="P:System.Windows.Media.Matrix.M11" /> 的 <see cref="P:System.Windows.Media.Matrix.M12" />、<see cref="P:System.Windows.Media.Matrix.M21" />、<see cref="P:System.Windows.Media.Matrix.M22" />、<see cref="P:System.Windows.Media.Matrix.OffsetX" />、<see cref="P:System.Windows.Media.Matrix.OffsetY" /> 和 <see cref="T:System.Windows.Media.Matrix" /> 值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果此<xref:System.Windows.Media.Matrix>是<xref:System.Windows.Media.Matrix.Identity%2A>矩阵，返回"标识"的字符串。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">特定于区域的格式设置信息。</param>
        <summary>使用区域性特定的格式设置信息创建此 <see cref="T:System.String" /> 结构的 <see cref="T:System.Windows.Media.Matrix" /> 表示形式。</summary>
        <returns>一个 <see cref="T:System.String" />，其中包含此 <see cref="P:System.Windows.Media.Matrix.M11" /> 的 <see cref="P:System.Windows.Media.Matrix.M12" />、<see cref="P:System.Windows.Media.Matrix.M21" />、<see cref="P:System.Windows.Media.Matrix.M22" />、<see cref="P:System.Windows.Media.Matrix.OffsetX" />、<see cref="P:System.Windows.Media.Matrix.OffsetY" /> 和 <see cref="T:System.Windows.Media.Matrix" /> 值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果此<xref:System.Windows.Media.Matrix>结构是单位矩阵，"标识"将返回的字符串。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Transform">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>用此 <see cref="T:System.Windows.Media.Matrix" /> 变换指定的点、点数组、向量或向量数组。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何使用<xref:System.Windows.Media.Matrix>转换点和向量。  
  
 [!code-csharp[MatrixExamples_snip#MatrixTransformExamples_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixtransformexamples_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Windows.Point Transform (System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Point Transform(valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.Transform(System.Windows.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Point Transform(System::Windows::Point point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point">要转换的点。</param>
        <summary>用 <see cref="T:System.Windows.Media.Matrix" /> 变换指定的点并返回结果。</summary>
        <returns>用此 <see cref="T:System.Windows.Media.Matrix" /> 变换 <paramref name="point" /> 的结果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何使用<xref:System.Windows.Media.Matrix>转换点和向量。  
  
 [!code-csharp[MatrixExamples_snip#MatrixTransformExamples_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixtransformexamples_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Windows.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(valuetype System.Windows.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.Transform(System.Windows.Point[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (points As Point())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(cli::array &lt;System::Windows::Point&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Windows.Point[]" />
      </Parameters>
      <Docs>
        <param name="points">要变换的点。 数组中的原始点将被它们的变换值替换。</param>
        <summary>用此 <see cref="T:System.Windows.Media.Matrix" /> 变换指定的点。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何使用<xref:System.Windows.Media.Matrix>转换点和向量。  
  
 [!code-csharp[MatrixExamples_snip#MatrixTransformExamples_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixtransformexamples_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Windows.Vector Transform (System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Vector Transform(valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.Transform(System.Windows.Vector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Vector Transform(System::Windows::Vector vector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector">要转换的向量。</param>
        <summary>用此 <see cref="T:System.Windows.Media.Matrix" /> 变换指定的向量。</summary>
        <returns>用此 <see cref="T:System.Windows.Media.Matrix" /> 变换 <paramref name="vector" /> 的结果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何使用<xref:System.Windows.Media.Matrix>转换点和向量。  
  
 [!code-csharp[MatrixExamples_snip#MatrixTransformExamples_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixtransformexamples_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Windows.Vector[] vectors);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(valuetype System.Windows.Vector[] vectors) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.Transform(System.Windows.Vector[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (vectors As Vector())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(cli::array &lt;System::Windows::Vector&gt; ^ vectors);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectors" Type="System.Windows.Vector[]" />
      </Parameters>
      <Docs>
        <param name="vectors">要变换的向量。 数组中的原始向量将被它们的变换值替换。</param>
        <summary>用此 <see cref="T:System.Windows.Media.Matrix" /> 变换指定的向量。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何使用<xref:System.Windows.Media.Matrix>转换点和向量。  
  
 [!code-csharp[MatrixExamples_snip#MatrixTransformExamples_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixtransformexamples_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Translate">
      <MemberSignature Language="C#" Value="public void Translate (double offsetX, double offsetY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Translate(float64 offsetX, float64 offsetY) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.Translate(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Translate (offsetX As Double, offsetY As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Translate(double offsetX, double offsetY);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offsetX" Type="System.Double" />
        <Parameter Name="offsetY" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="offsetX">此 <see cref="T:System.Windows.Media.Matrix" /> 沿 x 轴的偏移量。</param>
        <param name="offsetY">此 <see cref="T:System.Windows.Media.Matrix" /> 沿 y 轴的偏移量。</param>
        <summary>在此 <see cref="T:System.Windows.Media.Matrix" /> 结构后面追加指定偏移量的平移。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何将追加到转换<xref:System.Windows.Media.Matrix>结构。  
  
 [!code-csharp[MatrixExamples_snip#MatrixTranslateExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixtranslateexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Matrix.TranslatePrepend(System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="TranslatePrepend">
      <MemberSignature Language="C#" Value="public void TranslatePrepend (double offsetX, double offsetY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslatePrepend(float64 offsetX, float64 offsetY) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.TranslatePrepend(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslatePrepend (offsetX As Double, offsetY As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslatePrepend(double offsetX, double offsetY);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offsetX" Type="System.Double" />
        <Parameter Name="offsetY" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="offsetX">此 <see cref="T:System.Windows.Media.Matrix" /> 沿 x 轴的偏移量。</param>
        <param name="offsetY">此 <see cref="T:System.Windows.Media.Matrix" /> 沿 y 轴的偏移量。</param>
        <summary>在此 <see cref="T:System.Windows.Media.Matrix" /> 结构前面添加指定偏移量的平移。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在复合转换中，各个变换之间的顺序很重要。 例如，如果第一次旋转，则缩放，则转换，你获得不同的结果不是如果首先将转换，然后旋转，则缩放。 顺序很重要的原因之一是，这样像旋转和缩放转换是针对坐标系统的原点。 缩放以原点中心的对象生成比缩放已离开源的对象不同的结果。 同样，轮换基于原点居中的对象生成已离开源的对象与旋转不同的结果。  
  
   
  
## Examples  
 下面的示例演示如何在前面添加平移<xref:System.Windows.Media.Matrix>结构。  
  
 [!code-csharp[MatrixExamples_snip#MatrixTranslatePrependExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixtranslateprependexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Matrix.Translate(System.Double,System.Double)" />
      </Docs>
    </Member>
  </Members>
</Type>