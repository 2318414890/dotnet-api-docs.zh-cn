<Type Name="VisualTreeHelper" FullName="System.Windows.Media.VisualTreeHelper">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9c356ce30d52f1e61985d4aa19d4d128cdbfb356" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57947154" /></Metadata><TypeSignature Language="C#" Value="public static class VisualTreeHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit VisualTreeHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.VisualTreeHelper" />
  <TypeSignature Language="VB.NET" Value="Public Class VisualTreeHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class VisualTreeHelper abstract sealed" />
  <TypeSignature Language="F#" Value="type VisualTreeHelper = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供一些实用工具方法，用于执行涉及可视化树中的节点的常规任务。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可视化树中的节点可以是<xref:System.Windows.Media.Visual>或<xref:System.Windows.Media.Media3D.Visual3D>对象。 特定于可视对象的类型的方法类型化为<xref:System.Windows.Media.Visual>或<xref:System.Windows.Media.Media3D.Visual3D>。 但是中的某些方法<xref:System.Windows.Media.VisualTreeHelper>类可以接受<xref:System.Windows.DependencyObject>值，该值表示可视对象的任何一种。  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 支持以编程方式访问的对象的多个不同的树状结构。 首先，这显示为可视化树和逻辑树。 在某些情况下，逻辑树是中的元素的更有用表示形式[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]应用程序，但从概念上讲是逻辑树实现在级别超出<xref:System.Windows.Media.Visual>类。 与可视化树中，不同逻辑树可以表示非可视化数据对象，如<xref:System.Windows.Documents.ListItem>。 有关逻辑树的详细信息，请参阅 [WPF 中的树](~/docs/framework/wpf/advanced/trees-in-wpf.md)。 逻辑树也支持类似的实用程序方法类， <xref:System.Windows.LogicalTreeHelper>。  
  
   
  
## Examples  
 下面的示例演示如何枚举视觉对象的所有后代，如果你对序列化可视化对象层次结构的所有呈现信息感兴趣，则可能希望使用该技术。  
  
 [!code-csharp[VisualsOverview#101](~/samples/snippets/csharp/VS_Snippets_Wpf/VisualsOverview/CSharp/Window1.xaml.cs#101)]
 [!code-vb[VisualsOverview#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VisualsOverview/visualbasic/window1.xaml.vb#101)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetBitmapEffect">
      <MemberSignature Language="C#" Value="public static System.Windows.Media.Effects.BitmapEffect GetBitmapEffect (System.Windows.Media.Visual reference);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Media.Effects.BitmapEffect GetBitmapEffect(class System.Windows.Media.Visual reference) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualTreeHelper.GetBitmapEffect(System.Windows.Media.Visual)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetBitmapEffect (reference As Visual) As BitmapEffect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Media::Effects::BitmapEffect ^ GetBitmapEffect(System::Windows::Media::Visual ^ reference);" />
      <MemberSignature Language="F#" Value="static member GetBitmapEffect : System.Windows.Media.Visual -&gt; System.Windows.Media.Effects.BitmapEffect" Usage="System.Windows.Media.VisualTreeHelper.GetBitmapEffect reference" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.BitmapEffect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="reference">包含位图效果的 <see cref="T:System.Windows.Media.Visual" />。</param>
        <summary>返回指定 <see cref="T:System.Windows.Media.Effects.BitmapEffect" /> 的 <see cref="T:System.Windows.Media.Visual" /> 值。</summary>
        <returns>用于此 <see cref="T:System.Windows.Media.Effects.BitmapEffect" /> 的 <see cref="T:System.Windows.Media.Visual" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBitmapEffectInput">
      <MemberSignature Language="C#" Value="public static System.Windows.Media.Effects.BitmapEffectInput GetBitmapEffectInput (System.Windows.Media.Visual reference);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Media.Effects.BitmapEffectInput GetBitmapEffectInput(class System.Windows.Media.Visual reference) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualTreeHelper.GetBitmapEffectInput(System.Windows.Media.Visual)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetBitmapEffectInput (reference As Visual) As BitmapEffectInput" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Media::Effects::BitmapEffectInput ^ GetBitmapEffectInput(System::Windows::Media::Visual ^ reference);" />
      <MemberSignature Language="F#" Value="static member GetBitmapEffectInput : System.Windows.Media.Visual -&gt; System.Windows.Media.Effects.BitmapEffectInput" Usage="System.Windows.Media.VisualTreeHelper.GetBitmapEffectInput reference" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.BitmapEffectInput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="reference">包含位图效果输入值的 <see cref="T:System.Windows.Media.Visual" />。</param>
        <summary>返回指定 <see cref="T:System.Windows.Media.Effects.BitmapEffectInput" /> 的 <see cref="T:System.Windows.Media.Visual" /> 值。</summary>
        <returns>用于此 <see cref="T:System.Windows.Media.Effects.BitmapEffectInput" /> 的 <see cref="T:System.Windows.Media.Visual" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCacheMode">
      <MemberSignature Language="C#" Value="public static System.Windows.Media.CacheMode GetCacheMode (System.Windows.Media.Visual reference);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Media.CacheMode GetCacheMode(class System.Windows.Media.Visual reference) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualTreeHelper.GetCacheMode(System.Windows.Media.Visual)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCacheMode (reference As Visual) As CacheMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Media::CacheMode ^ GetCacheMode(System::Windows::Media::Visual ^ reference);" />
      <MemberSignature Language="F#" Value="static member GetCacheMode : System.Windows.Media.Visual -&gt; System.Windows.Media.CacheMode" Usage="System.Windows.Media.VisualTreeHelper.GetCacheMode reference" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.CacheMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="System.Windows.Media.Visual" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="reference">要获取其 <see cref="T:System.Windows.Media.Visual" /> 的 <see cref="T:System.Windows.Media.CacheMode" />。</param>
        <summary>检索指定的 <see cref="T:System.Windows.Media.Visual" /> 的缓存表示形式。</summary>
        <returns><paramref name="reference" /> 的 <see cref="T:System.Windows.Media.CacheMode" />。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Media.BitmapCache" />
        <altmember cref="T:System.Windows.Media.BitmapCacheBrush" />
      </Docs>
    </Member>
    <Member MemberName="GetChild">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyObject GetChild (System.Windows.DependencyObject reference, int childIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyObject GetChild(class System.Windows.DependencyObject reference, int32 childIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualTreeHelper.GetChild(System.Windows.DependencyObject,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChild (reference As DependencyObject, childIndex As Integer) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyObject ^ GetChild(System::Windows::DependencyObject ^ reference, int childIndex);" />
      <MemberSignature Language="F#" Value="static member GetChild : System.Windows.DependencyObject * int -&gt; System.Windows.DependencyObject" Usage="System.Windows.Media.VisualTreeHelper.GetChild (reference, childIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="System.Windows.DependencyObject" />
        <Parameter Name="childIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="reference">父可视对象，作为 <see cref="T:System.Windows.DependencyObject" /> 引用。</param>
        <param name="childIndex">表示 <paramref name="reference" /> 包含的子可视对象的索引。</param>
        <summary>返回指定父可视对象中位于指定集合索引位置的子可视对象。</summary>
        <returns>子可视对象的索引值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用<xref:System.Windows.Media.VisualTreeHelper.GetChildrenCount%2A>方法来确定父可视对象的子元素的总数。  
  
 值`reference`可以表示<xref:System.Windows.Media.Visual>或<xref:System.Windows.Media.Media3D.Visual3D>对象，这就是为什么公共基类型<xref:System.Windows.DependencyObject>使用作为参数类型。  
  
   
  
## Examples  
 下面的示例说明如何枚举视觉对象的所有后代。 这是如果您要对序列的可视化对象层次结构的所有呈现信息感兴趣或正在执行分析或另一种呈现，则可能会使用一种技术。  
  
 [!code-csharp[VisualsOverview#101](~/samples/snippets/csharp/VS_Snippets_Wpf/VisualsOverview/CSharp/Window1.xaml.cs#101)]
 [!code-vb[VisualsOverview#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VisualsOverview/visualbasic/window1.xaml.vb#101)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildrenCount">
      <MemberSignature Language="C#" Value="public static int GetChildrenCount (System.Windows.DependencyObject reference);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetChildrenCount(class System.Windows.DependencyObject reference) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualTreeHelper.GetChildrenCount(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildrenCount (reference As DependencyObject) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetChildrenCount(System::Windows::DependencyObject ^ reference);" />
      <MemberSignature Language="F#" Value="static member GetChildrenCount : System.Windows.DependencyObject -&gt; int" Usage="System.Windows.Media.VisualTreeHelper.GetChildrenCount reference" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="reference">父可视对象，作为 <see cref="T:System.Windows.DependencyObject" /> 引用。</param>
        <summary>返回指定可视对象包含的子级个数。</summary>
        <returns>父可视对象包含的子可视对象数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Media.VisualTreeHelper.GetChild%2A>方法来检索指定的父可视对象的子级。  
  
 值`reference`可以表示<xref:System.Windows.Media.Visual>或<xref:System.Windows.Media.Media3D.Visual3D>对象，这就是为什么公共基类型<xref:System.Windows.DependencyObject>使用作为参数类型。  
  
   
  
## Examples  
 下面的示例说明如何枚举视觉对象的所有后代。 这是如果您要对序列的可视化对象层次结构的所有呈现信息感兴趣或正在执行分析或另一种呈现，则可能会使用一种技术。  
  
 [!code-csharp[VisualsOverview#101](~/samples/snippets/csharp/VS_Snippets_Wpf/VisualsOverview/CSharp/Window1.xaml.cs#101)]
 [!code-vb[VisualsOverview#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VisualsOverview/visualbasic/window1.xaml.vb#101)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetClip">
      <MemberSignature Language="C#" Value="public static System.Windows.Media.Geometry GetClip (System.Windows.Media.Visual reference);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Media.Geometry GetClip(class System.Windows.Media.Visual reference) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualTreeHelper.GetClip(System.Windows.Media.Visual)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetClip (reference As Visual) As Geometry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Media::Geometry ^ GetClip(System::Windows::Media::Visual ^ reference);" />
      <MemberSignature Language="F#" Value="static member GetClip : System.Windows.Media.Visual -&gt; System.Windows.Media.Geometry" Usage="System.Windows.Media.VisualTreeHelper.GetClip reference" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="reference">要返回其剪辑区域值的 <see cref="T:System.Windows.Media.Visual" />。</param>
        <summary>将指定的 <see cref="T:System.Windows.Media.Visual" /> 的剪辑区域作为 <see cref="T:System.Windows.Media.Geometry" /> 值返回。</summary>
        <returns>作为 <see cref="T:System.Windows.Media.Visual" /> 类型返回的 <see cref="T:System.Windows.Media.Geometry" /> 的剪辑区域值。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Media.ContainerVisual.Clip" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms746710(v=vs.90)">如何：创建剪辑区域</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetContentBounds">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回 <see cref="T:System.Windows.Media.Visual" /> 的已缓存的边界框矩形。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetContentBounds">
      <MemberSignature Language="C#" Value="public static System.Windows.Media.Media3D.Rect3D GetContentBounds (System.Windows.Media.Media3D.Visual3D reference);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Media.Media3D.Rect3D GetContentBounds(class System.Windows.Media.Media3D.Visual3D reference) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualTreeHelper.GetContentBounds(System.Windows.Media.Media3D.Visual3D)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetContentBounds (reference As Visual3D) As Rect3D" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Media::Media3D::Rect3D GetContentBounds(System::Windows::Media::Media3D::Visual3D ^ reference);" />
      <MemberSignature Language="F#" Value="static member GetContentBounds : System.Windows.Media.Media3D.Visual3D -&gt; System.Windows.Media.Media3D.Rect3D" Usage="System.Windows.Media.VisualTreeHelper.GetContentBounds reference" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Media3D.Rect3D</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="System.Windows.Media.Media3D.Visual3D" />
      </Parameters>
      <Docs>
        <param name="reference">要计算其边界框值的三维可视对象。</param>
        <summary>返回指定 <see cref="T:System.Windows.Media.Media3D.Visual3D" /> 的已缓存的边界框矩形。</summary>
        <returns><see cref="T:System.Windows.Media.Media3D.Visual3D" /> 的边界框三维矩形。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Media.VisualTreeHelper.GetDescendantBounds%2A>方法返回的所有内容边界框的所有子代的三维可视对象，其中包括联合<xref:System.Windows.Media.Media3D.Visual3D>本身。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.VisualTreeHelper.GetContentBounds(System.Windows.Media.Visual)" />
      </Docs>
    </Member>
    <Member MemberName="GetContentBounds">
      <MemberSignature Language="C#" Value="public static System.Windows.Rect GetContentBounds (System.Windows.Media.Visual reference);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Rect GetContentBounds(class System.Windows.Media.Visual reference) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualTreeHelper.GetContentBounds(System.Windows.Media.Visual)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetContentBounds (reference As Visual) As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Rect GetContentBounds(System::Windows::Media::Visual ^ reference);" />
      <MemberSignature Language="F#" Value="static member GetContentBounds : System.Windows.Media.Visual -&gt; System.Windows.Rect" Usage="System.Windows.Media.VisualTreeHelper.GetContentBounds reference" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="reference">要计算其边界框值的 <see cref="T:System.Windows.Media.Visual" />。</param>
        <summary>返回指定 <see cref="T:System.Windows.Media.Visual" /> 的已缓存的边界框矩形。</summary>
        <returns><see cref="T:System.Windows.Media.Visual" /> 的边界框矩形。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用<xref:System.Windows.Media.VisualTreeHelper.GetDescendantBounds%2A>方法返回的所有内容边界框的视觉对象，其中包括的所有后代联合<xref:System.Windows.Media.Visual>本身。  
  
   
  
## Examples  
 下面的示例演示如何检索的绑定矩形<xref:System.Windows.Media.Visual>对象。  
  
 [!code-csharp[VisualsOverview#102](~/samples/snippets/csharp/VS_Snippets_Wpf/VisualsOverview/CSharp/Window1.xaml.cs#102)]
 [!code-vb[VisualsOverview#102](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VisualsOverview/visualbasic/window1.xaml.vb#102)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.VisualTreeHelper.GetContentBounds(System.Windows.Media.Media3D.Visual3D)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDescendantBounds">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回视觉对象所有后代的全部内容范围框的联合，其中包括 <see cref="T:System.Windows.Media.Visual" /> 的内容范围框。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDescendantBounds">
      <MemberSignature Language="C#" Value="public static System.Windows.Media.Media3D.Rect3D GetDescendantBounds (System.Windows.Media.Media3D.Visual3D reference);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Media.Media3D.Rect3D GetDescendantBounds(class System.Windows.Media.Media3D.Visual3D reference) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualTreeHelper.GetDescendantBounds(System.Windows.Media.Media3D.Visual3D)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDescendantBounds (reference As Visual3D) As Rect3D" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Media::Media3D::Rect3D GetDescendantBounds(System::Windows::Media::Media3D::Visual3D ^ reference);" />
      <MemberSignature Language="F#" Value="static member GetDescendantBounds : System.Windows.Media.Media3D.Visual3D -&gt; System.Windows.Media.Media3D.Rect3D" Usage="System.Windows.Media.VisualTreeHelper.GetDescendantBounds reference" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Media3D.Rect3D</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="System.Windows.Media.Media3D.Visual3D" />
      </Parameters>
      <Docs>
        <param name="reference">要计算其所有子代的边界框值的三维可视对象。</param>
        <summary>返回指定 <see cref="T:System.Windows.Media.Media3D.Visual3D" /> 所有子代的所有内容边界框的联合，其中包括 <see cref="T:System.Windows.Media.Media3D.Visual3D" /> 的内容边界框。</summary>
        <returns>返回三维可视对象的边界框三维矩形。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用<xref:System.Windows.Media.VisualTreeHelper.GetContentBounds%2A>方法以返回三维可视对象的缓存边界框矩形。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDescendantBounds">
      <MemberSignature Language="C#" Value="public static System.Windows.Rect GetDescendantBounds (System.Windows.Media.Visual reference);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Rect GetDescendantBounds(class System.Windows.Media.Visual reference) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualTreeHelper.GetDescendantBounds(System.Windows.Media.Visual)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDescendantBounds (reference As Visual) As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Rect GetDescendantBounds(System::Windows::Media::Visual ^ reference);" />
      <MemberSignature Language="F#" Value="static member GetDescendantBounds : System.Windows.Media.Visual -&gt; System.Windows.Rect" Usage="System.Windows.Media.VisualTreeHelper.GetDescendantBounds reference" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="reference">要计算其所有子代的边界框值的 <see cref="T:System.Windows.Media.Visual" />。</param>
        <summary>返回 <see cref="T:System.Windows.Media.Visual" /> 所有子代的所有内容边界框的联合，其中包括 <see cref="T:System.Windows.Media.Visual" /> 的内容边界框。</summary>
        <returns>指定的 <see cref="T:System.Windows.Media.Visual" /> 的边界框矩形。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用<xref:System.Windows.Media.VisualTreeHelper.GetContentBounds%2A>方法以返回有关缓存的边界框矩形<xref:System.Windows.Media.Visual>。  
  
   
  
## Examples  
 下面的示例演示如何检索子代的边框组成的联合<xref:System.Windows.Media.Visual>。  
  
 [!code-csharp[VisualsOverview#102](~/samples/snippets/csharp/VS_Snippets_Wpf/VisualsOverview/CSharp/Window1.xaml.cs#102)]
 [!code-vb[VisualsOverview#102](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VisualsOverview/visualbasic/window1.xaml.vb#102)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDpi">
      <MemberSignature Language="C#" Value="public static System.Windows.DpiScale GetDpi (System.Windows.Media.Visual visual);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.DpiScale GetDpi(class System.Windows.Media.Visual visual) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualTreeHelper.GetDpi(System.Windows.Media.Visual)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DpiScale GetDpi(System::Windows::Media::Visual ^ visual);" />
      <MemberSignature Language="F#" Value="static member GetDpi : System.Windows.Media.Visual -&gt; System.Windows.DpiScale" Usage="System.Windows.Media.VisualTreeHelper.GetDpi visual" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DpiScale</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visual" Type="System.Windows.Media.Visual" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="visual">视觉目标对象。</param>
        <summary>获取测量和呈现此视觉对象的 DPI 信息。</summary>
        <returns>DPIScale 值。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDrawing">
      <MemberSignature Language="C#" Value="public static System.Windows.Media.DrawingGroup GetDrawing (System.Windows.Media.Visual reference);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Media.DrawingGroup GetDrawing(class System.Windows.Media.Visual reference) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualTreeHelper.GetDrawing(System.Windows.Media.Visual)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDrawing (reference As Visual) As DrawingGroup" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Media::DrawingGroup ^ GetDrawing(System::Windows::Media::Visual ^ reference);" />
      <MemberSignature Language="F#" Value="static member GetDrawing : System.Windows.Media.Visual -&gt; System.Windows.Media.DrawingGroup" Usage="System.Windows.Media.VisualTreeHelper.GetDrawing reference" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.DrawingGroup</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="reference">要返回其绘图内容的 <see cref="T:System.Windows.Media.Visual" />。</param>
        <summary>返回指定的 <see cref="T:System.Windows.Media.Visual" /> 的绘图内容。</summary>
        <returns>作为 <see cref="T:System.Windows.Media.Visual" /> 类型返回的 <see cref="T:System.Windows.Media.DrawingGroup" /> 的绘图内容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何检索<xref:System.Windows.Media.DrawingGroup>使用的视觉对象从<xref:System.Windows.Media.VisualTreeHelper.GetDrawing%2A>方法。 然后每个绘图的几何图形上执行命中的测试<xref:System.Windows.Media.DrawingGroup>以确定命中了哪个几何图形。  
  
 [!code-csharp[VisualsOverview#VisualsOverviewSnippet4](~/samples/snippets/csharp/VS_Snippets_Wpf/VisualsOverview/CSharp/Window1.xaml.cs#visualsoverviewsnippet4)]
 [!code-vb[VisualsOverview#VisualsOverviewSnippet4](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VisualsOverview/visualbasic/window1.xaml.vb#visualsoverviewsnippet4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEdgeMode">
      <MemberSignature Language="C#" Value="public static System.Windows.Media.EdgeMode GetEdgeMode (System.Windows.Media.Visual reference);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Media.EdgeMode GetEdgeMode(class System.Windows.Media.Visual reference) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualTreeHelper.GetEdgeMode(System.Windows.Media.Visual)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetEdgeMode (reference As Visual) As EdgeMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Media::EdgeMode GetEdgeMode(System::Windows::Media::Visual ^ reference);" />
      <MemberSignature Language="F#" Value="static member GetEdgeMode : System.Windows.Media.Visual -&gt; System.Windows.Media.EdgeMode" Usage="System.Windows.Media.VisualTreeHelper.GetEdgeMode reference" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.EdgeMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="reference">要返回其边缘模式值的 <see cref="T:System.Windows.Media.Visual" />。</param>
        <summary>将指定的 <see cref="T:System.Windows.Media.Visual" /> 的边缘模式作为 <see cref="T:System.Windows.Media.EdgeMode" /> 值返回。</summary>
        <returns><see cref="T:System.Windows.Media.EdgeMode" /> 的 <see cref="T:System.Windows.Media.Visual" /> 值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 边缘模式值确定非文本基元的边缘呈现方式。  
  
|边缘模式值|描述|  
|---------------------|-----------------|  
|<xref:System.Windows.Media.EdgeMode.Aliased>|将非文本基元的边缘呈现为锯齿边缘。|  
|<xref:System.Windows.Media.EdgeMode.Unspecified>|未指定边缘模式。 不要更改当前应用于非文本基元的边缘模式。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEffect">
      <MemberSignature Language="C#" Value="public static System.Windows.Media.Effects.Effect GetEffect (System.Windows.Media.Visual reference);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Media.Effects.Effect GetEffect(class System.Windows.Media.Visual reference) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualTreeHelper.GetEffect(System.Windows.Media.Visual)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetEffect (reference As Visual) As Effect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Media::Effects::Effect ^ GetEffect(System::Windows::Media::Visual ^ reference);" />
      <MemberSignature Language="F#" Value="static member GetEffect : System.Windows.Media.Visual -&gt; System.Windows.Media.Effects.Effect" Usage="System.Windows.Media.VisualTreeHelper.GetEffect reference" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.Effect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="reference">要为其获取位图效果的 <see cref="T:System.Windows.Media.Visual" />。</param>
        <summary>获取指定 <see cref="T:System.Windows.Media.Visual" /> 的位图效果。</summary>
        <returns>应用到 <paramref name="reference" /> 的 <see cref="T:System.Windows.Media.Effects.Effect" />。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Media.Effects.Effect" />
        <altmember cref="T:System.Windows.Media.Effects.ShaderEffect" />
        <altmember cref="T:System.Windows.Media.Effects.PixelShader" />
      </Docs>
    </Member>
    <Member MemberName="GetOffset">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector GetOffset (System.Windows.Media.Visual reference);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector GetOffset(class System.Windows.Media.Visual reference) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualTreeHelper.GetOffset(System.Windows.Media.Visual)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetOffset (reference As Visual) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector GetOffset(System::Windows::Media::Visual ^ reference);" />
      <MemberSignature Language="F#" Value="static member GetOffset : System.Windows.Media.Visual -&gt; System.Windows.Vector" Usage="System.Windows.Media.VisualTreeHelper.GetOffset reference" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="reference">要返回其偏移量的 <see cref="T:System.Windows.Media.Visual" />。</param>
        <summary>返回 <see cref="T:System.Windows.Media.Visual" /> 的偏移量。</summary>
        <returns>一个 <see cref="T:System.Windows.Vector" />，表示 <see cref="T:System.Windows.Media.Visual" /> 的偏移值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的偏移量的值是相对于父级的<xref:System.Windows.Media.Visual>。 如果你想要返回的不是相对于父级的偏移量的值<xref:System.Windows.Media.Visual>，使用<xref:System.Windows.Media.Visual.TransformToAncestor%2A>方法。  
  
   
  
## Examples  
 以下标记示例演示<xref:System.Windows.Controls.TextBlock>定义与<xref:System.Windows.FrameworkElement.Margin%2A>值为 4。  
  
 [!code-xaml[VisualSnippets#VisualSnippet1](~/samples/snippets/csharp/VS_Snippets_Wpf/VisualSnippets/CSharp/Window1.xaml#visualsnippet1)]  
  
 下面的代码示例演示如何使用<xref:System.Windows.Media.VisualTreeHelper.GetOffset%2A>方法来检索其中的偏移量<xref:System.Windows.Controls.TextBlock>。 偏移量的值包含在返回<xref:System.Windows.Vector>值。  
  
 [!code-csharp[VisualSnippets#VisualSnippet2](~/samples/snippets/csharp/VS_Snippets_Wpf/VisualSnippets/CSharp/Window1.xaml.cs#visualsnippet2)]
 [!code-vb[VisualSnippets#VisualSnippet2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VisualSnippets/visualbasic/window1.xaml.vb#visualsnippet2)]  
  
 偏移量将考虑<xref:System.Windows.FrameworkElement.Margin%2A>值。 在这种情况下，<xref:System.Windows.Vector.X%2A>为 4，和<xref:System.Windows.Vector.Y%2A>为 4。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOpacity">
      <MemberSignature Language="C#" Value="public static double GetOpacity (System.Windows.Media.Visual reference);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetOpacity(class System.Windows.Media.Visual reference) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualTreeHelper.GetOpacity(System.Windows.Media.Visual)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetOpacity (reference As Visual) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetOpacity(System::Windows::Media::Visual ^ reference);" />
      <MemberSignature Language="F#" Value="static member GetOpacity : System.Windows.Media.Visual -&gt; double" Usage="System.Windows.Media.VisualTreeHelper.GetOpacity reference" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="reference">要返回其不透明度值的 <see cref="T:System.Windows.Media.Visual" />。</param>
        <summary>返回 <see cref="T:System.Windows.Media.Visual" /> 的不透明度。</summary>
        <returns>一个 <see cref="T:System.Double" /> 类型的值，表示 <see cref="T:System.Windows.Media.Visual" /> 的不透明度值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不透明度的值表示为介于 0 和 1 之间的值。 值为 0，则指示元素完全透明; 如果值为 1 指示该元素是完全不透明。 值 0.5 表示该元素为 50%不透明。 值小于 0 将被视为 0，而大于 1 的值将被视为 1。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOpacityMask">
      <MemberSignature Language="C#" Value="public static System.Windows.Media.Brush GetOpacityMask (System.Windows.Media.Visual reference);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Media.Brush GetOpacityMask(class System.Windows.Media.Visual reference) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualTreeHelper.GetOpacityMask(System.Windows.Media.Visual)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetOpacityMask (reference As Visual) As Brush" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Media::Brush ^ GetOpacityMask(System::Windows::Media::Visual ^ reference);" />
      <MemberSignature Language="F#" Value="static member GetOpacityMask : System.Windows.Media.Visual -&gt; System.Windows.Media.Brush" Usage="System.Windows.Media.VisualTreeHelper.GetOpacityMask reference" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Brush</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="reference">要返回其不透明蒙板值的 <see cref="T:System.Windows.Media.Visual" />。</param>
        <summary>返回一个 <see cref="T:System.Windows.Media.Brush" /> 值，该值表示 <see cref="T:System.Windows.Media.Visual" /> 的不透明蒙板。</summary>
        <returns>一个类型为 <see cref="T:System.Windows.Media.Brush" /> 的值，表示 <see cref="T:System.Windows.Media.Visual" /> 的不透明蒙板值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不透明蒙板是<xref:System.Windows.Media.Brush>应用于呈现的内容的任何 alpha 通道蒙<xref:System.Windows.Media.Visual>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParent">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyObject GetParent (System.Windows.DependencyObject reference);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyObject GetParent(class System.Windows.DependencyObject reference) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualTreeHelper.GetParent(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetParent (reference As DependencyObject) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyObject ^ GetParent(System::Windows::DependencyObject ^ reference);" />
      <MemberSignature Language="F#" Value="static member GetParent : System.Windows.DependencyObject -&gt; System.Windows.DependencyObject" Usage="System.Windows.Media.VisualTreeHelper.GetParent reference" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="reference">要返回其父对象的可视对象。</param>
        <summary>返回表示视觉对象的父对象的 <see cref="T:System.Windows.DependencyObject" /> 值。</summary>
        <returns>可见对象的父对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值`reference`可以表示<xref:System.Windows.Media.Visual>或<xref:System.Windows.Media.Media3D.Visual3D>对象。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="reference" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="reference" /> 不是 <see cref="T:System.Windows.Media.Visual" /> 或 <see cref="T:System.Windows.Media.Media3D.Visual3D" /> 对象。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetTransform">
      <MemberSignature Language="C#" Value="public static System.Windows.Media.Transform GetTransform (System.Windows.Media.Visual reference);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Media.Transform GetTransform(class System.Windows.Media.Visual reference) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualTreeHelper.GetTransform(System.Windows.Media.Visual)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTransform (reference As Visual) As Transform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Media::Transform ^ GetTransform(System::Windows::Media::Visual ^ reference);" />
      <MemberSignature Language="F#" Value="static member GetTransform : System.Windows.Media.Visual -&gt; System.Windows.Media.Transform" Usage="System.Windows.Media.VisualTreeHelper.GetTransform reference" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Transform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="reference">要返回其变换值的 <see cref="T:System.Windows.Media.Visual" />。</param>
        <summary>返回 <see cref="T:System.Windows.Media.Transform" /> 的 <see cref="T:System.Windows.Media.Visual" /> 值。</summary>
        <returns><see cref="T:System.Windows.Media.Visual" /> 的变换值；如果 <paramref name="reference" /> 未定义变换，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 或者，可以使用<xref:System.Windows.Media.Visual.TransformToAncestor%2A>方法返回的上级的转换值<xref:System.Windows.Media.Visual>。 此方法始终返回有效的转换。 下面的代码示例演示如何使用<xref:System.Windows.Media.Visual.TransformToAncestor%2A>方法。  
  
 [!code-csharp[VisualSnippets#VisualSnippet3](~/samples/snippets/csharp/VS_Snippets_Wpf/VisualSnippets/CSharp/Window1.xaml.cs#visualsnippet3)]
 [!code-vb[VisualSnippets#VisualSnippet3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VisualSnippets/visualbasic/window1.xaml.vb#visualsnippet3)]  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Media.VisualTreeHelper.GetTransform%2A>方法来检索指定的可视对象的转换。  
  
 [!code-csharp[VisualSnippets#VisualSnippet6](~/samples/snippets/csharp/VS_Snippets_Wpf/VisualSnippets/CSharp/Window1.xaml.cs#visualsnippet6)]
 [!code-vb[VisualSnippets#VisualSnippet6](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VisualSnippets/visualbasic/window1.xaml.vb#visualsnippet6)]  
  
 该代码应针对测试`null`之前使用返回的值。 若要返回的返回转换的偏移量，请使用<xref:System.Windows.Media.GeneralTransform.Transform%2A>方法。 偏移量的值是相对于父级的<xref:System.Windows.Media.Visual>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXSnappingGuidelines">
      <MemberSignature Language="C#" Value="public static System.Windows.Media.DoubleCollection GetXSnappingGuidelines (System.Windows.Media.Visual reference);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Media.DoubleCollection GetXSnappingGuidelines(class System.Windows.Media.Visual reference) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualTreeHelper.GetXSnappingGuidelines(System.Windows.Media.Visual)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetXSnappingGuidelines (reference As Visual) As DoubleCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Media::DoubleCollection ^ GetXSnappingGuidelines(System::Windows::Media::Visual ^ reference);" />
      <MemberSignature Language="F#" Value="static member GetXSnappingGuidelines : System.Windows.Media.Visual -&gt; System.Windows.Media.DoubleCollection" Usage="System.Windows.Media.VisualTreeHelper.GetXSnappingGuidelines reference" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.DoubleCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="reference">要返回其 X 坐标准线集合的 <see cref="T:System.Windows.Media.Visual" />。</param>
        <summary>返回 X 坐标（垂直）准线集合。</summary>
        <returns><see cref="T:System.Windows.Media.Visual" /> 的 X 坐标准线集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 启用像素对齐功能是，以便对象边缘呈现在特定于设备的像素为单位，内容布局固定的过程。 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 图形系统使用与设备无关的单元来使分辨率和设备独立。 每个与设备无关的像素都会随着系统的 [!INCLUDE[TLA#tla_dpi](~/includes/tlasharptla-dpi-md.md)] 设置自动进行缩放。 这为 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 应用程序提供了不同 [!INCLUDE[TLA2#tla_dpi](~/includes/tla2sharptla-dpi-md.md)] 设置的适当缩放，并使应用程序自动感知 [!INCLUDE[TLA2#tla_dpi](~/includes/tla2sharptla-dpi-md.md)]。  
  
 但是，这[!INCLUDE[TLA2#tla_dpi](~/includes/tla2sharptla-dpi-md.md)]独立性可能由于抗锯齿不规则的边缘呈现出。 边缘的位置位于中间设备像素，而不是设备像素之间时，可能发生的这些项目，通常可看做模糊，或"软"边缘。 若要解决此问题，[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]消除生成的抗锯齿的柔化边缘的可视化树与设备像素为单位通过启用像素对齐功能，"对齐"中的对象边缘提供一种方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Visual.VisualXSnappingGuidelines" />
      </Docs>
    </Member>
    <Member MemberName="GetYSnappingGuidelines">
      <MemberSignature Language="C#" Value="public static System.Windows.Media.DoubleCollection GetYSnappingGuidelines (System.Windows.Media.Visual reference);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Media.DoubleCollection GetYSnappingGuidelines(class System.Windows.Media.Visual reference) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualTreeHelper.GetYSnappingGuidelines(System.Windows.Media.Visual)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetYSnappingGuidelines (reference As Visual) As DoubleCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Media::DoubleCollection ^ GetYSnappingGuidelines(System::Windows::Media::Visual ^ reference);" />
      <MemberSignature Language="F#" Value="static member GetYSnappingGuidelines : System.Windows.Media.Visual -&gt; System.Windows.Media.DoubleCollection" Usage="System.Windows.Media.VisualTreeHelper.GetYSnappingGuidelines reference" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.DoubleCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="reference">要返回其 Y 坐标准线集合的 <see cref="T:System.Windows.Media.Visual" />。</param>
        <summary>返回 Y 坐标（水平）准线集合。</summary>
        <returns><see cref="T:System.Windows.Media.Visual" /> 的 Y 坐标准线集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 启用像素对齐功能是，以便对象边缘呈现在特定于设备的像素为单位，内容布局固定的过程。 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 图形系统使用与设备无关的单元来使分辨率和设备独立。 每个与设备无关的像素都会随着系统的 [!INCLUDE[TLA#tla_dpi](~/includes/tlasharptla-dpi-md.md)] 设置自动进行缩放。 这为 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 应用程序提供了不同 [!INCLUDE[TLA2#tla_dpi](~/includes/tla2sharptla-dpi-md.md)] 设置的适当缩放，并使应用程序自动感知 [!INCLUDE[TLA2#tla_dpi](~/includes/tla2sharptla-dpi-md.md)]。  
  
 但是，这[!INCLUDE[TLA2#tla_dpi](~/includes/tla2sharptla-dpi-md.md)]独立性可能由于抗锯齿不规则的边缘呈现出。 边缘的位置位于中间设备像素，而不是设备像素之间时，可能发生的这些项目，通常可看做模糊，或"软"边缘。 若要解决此问题，[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]消除生成的抗锯齿的柔化边缘的可视化树与设备像素为单位通过启用像素对齐功能，"对齐"中的对象边缘提供一种方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Visual.VisualYSnappingGuidelines" />
      </Docs>
    </Member>
    <MemberGroup MemberName="HitTest">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回命中测试的最顶层 <see cref="T:System.Windows.Media.Visual" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 重载的方法采用<xref:System.Windows.Media.HitTestResultCallback>和<xref:System.Windows.Media.HitTestFilterCallback>参数在命中测试期间提供附加功能：  
  
-   使用此选项可参与命中测试期间控制对可视化树遍历。  
  
-   可以用来检索所有点或几何图形，而不仅仅是最顶层的一个下视觉对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="HitTest">
      <MemberSignature Language="C#" Value="public static System.Windows.Media.HitTestResult HitTest (System.Windows.Media.Visual reference, System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Media.HitTestResult HitTest(class System.Windows.Media.Visual reference, valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualTreeHelper.HitTest(System.Windows.Media.Visual,System.Windows.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Media::HitTestResult ^ HitTest(System::Windows::Media::Visual ^ reference, System::Windows::Point point);" />
      <MemberSignature Language="F#" Value="static member HitTest : System.Windows.Media.Visual * System.Windows.Point -&gt; System.Windows.Media.HitTestResult" Usage="System.Windows.Media.VisualTreeHelper.HitTest (reference, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.HitTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="System.Windows.Media.Visual" />
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="reference">要进行命中测试的 <see cref="T:System.Windows.Media.Visual" />。</param>
        <param name="point">要进行命中测试的点值。</param>
        <summary>通过指定 <see cref="T:System.Windows.Point" /> 返回命中测试的最顶层 <see cref="T:System.Windows.Media.Visual" /> 对象。</summary>
        <returns><see cref="T:System.Windows.Media.Visual" /> 的命中测试结果，作为 <see cref="T:System.Windows.Media.HitTestResult" /> 类型返回。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.HitTestResult.VisualHit%2A>属性的返回值表示<xref:System.Windows.Media.Visual>命中对象。  
  
> [!NOTE]
>  它是用 2D 的可视化树，以返回一个命中测试<xref:System.Windows.Media.Media3D.RayHitTestResult>，这是一个三维命中的测试结果对象。 命中测试在二维可视化树中的启动无缝扩展到任何已定义的三维可视树。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Windows.Media.VisualTreeHelper.HitTest%2A>方法进行命中测试中的对象<xref:System.Windows.Controls.Canvas>。  
  
 [!code-csharp[HitTestingOverview#100](~/samples/snippets/csharp/VS_Snippets_Wpf/HitTestingOverview/CSharp/Window1.xaml.cs#100)]
 [!code-vb[HitTestingOverview#100](~/samples/snippets/visualbasic/VS_Snippets_Wpf/HitTestingOverview/visualbasic/window1.xaml.vb#100)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159994">命中测试使用 drawingvisuals 执行示例</related>
      </Docs>
    </Member>
    <Member MemberName="HitTest">
      <MemberSignature Language="C#" Value="public static void HitTest (System.Windows.Media.Media3D.Visual3D reference, System.Windows.Media.HitTestFilterCallback filterCallback, System.Windows.Media.HitTestResultCallback resultCallback, System.Windows.Media.Media3D.HitTestParameters3D hitTestParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HitTest(class System.Windows.Media.Media3D.Visual3D reference, class System.Windows.Media.HitTestFilterCallback filterCallback, class System.Windows.Media.HitTestResultCallback resultCallback, class System.Windows.Media.Media3D.HitTestParameters3D hitTestParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualTreeHelper.HitTest(System.Windows.Media.Media3D.Visual3D,System.Windows.Media.HitTestFilterCallback,System.Windows.Media.HitTestResultCallback,System.Windows.Media.Media3D.HitTestParameters3D)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HitTest (reference As Visual3D, filterCallback As HitTestFilterCallback, resultCallback As HitTestResultCallback, hitTestParameters As HitTestParameters3D)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void HitTest(System::Windows::Media::Media3D::Visual3D ^ reference, System::Windows::Media::HitTestFilterCallback ^ filterCallback, System::Windows::Media::HitTestResultCallback ^ resultCallback, System::Windows::Media::Media3D::HitTestParameters3D ^ hitTestParameters);" />
      <MemberSignature Language="F#" Value="static member HitTest : System.Windows.Media.Media3D.Visual3D * System.Windows.Media.HitTestFilterCallback * System.Windows.Media.HitTestResultCallback * System.Windows.Media.Media3D.HitTestParameters3D -&gt; unit" Usage="System.Windows.Media.VisualTreeHelper.HitTest (reference, filterCallback, resultCallback, hitTestParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="System.Windows.Media.Media3D.Visual3D" />
        <Parameter Name="filterCallback" Type="System.Windows.Media.HitTestFilterCallback" />
        <Parameter Name="resultCallback" Type="System.Windows.Media.HitTestResultCallback" />
        <Parameter Name="hitTestParameters" Type="System.Windows.Media.Media3D.HitTestParameters3D" />
      </Parameters>
      <Docs>
        <param name="reference">要进行命中测试的 <see cref="T:System.Windows.Media.Media3D.Visual3D" />。</param>
        <param name="filterCallback">表示命中测试筛选回调值的方法。</param>
        <param name="resultCallback">表示命中测试结果回调值的方法。</param>
        <param name="hitTestParameters">要对其执行命中测试的 3D 参数值。</param>
        <summary>使用调用方定义的 <see cref="T:System.Windows.Media.HitTestFilterCallback" /> 和 <see cref="T:System.Windows.Media.HitTestResultCallback" /> 方法对指定 <see cref="T:System.Windows.Media.Media3D.Visual3D" /> 启动命中测试。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `filterCallback`参数可以是`null`，在这种情况下，它将被忽略。 如果`filterCallback`不是`null`之前, 调用`resultCallback`。  `resultCallback` 不能为 `null`。  
  
> [!NOTE]
>  它是用 2D 的可视化树，以返回一个命中测试<xref:System.Windows.Media.Media3D.RayHitTestResult>，这是一个三维命中的测试结果对象。 命中测试在二维可视化树中的启动无缝扩展到任何已定义的三维可视树。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HitTest">
      <MemberSignature Language="C#" Value="public static void HitTest (System.Windows.Media.Visual reference, System.Windows.Media.HitTestFilterCallback filterCallback, System.Windows.Media.HitTestResultCallback resultCallback, System.Windows.Media.HitTestParameters hitTestParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HitTest(class System.Windows.Media.Visual reference, class System.Windows.Media.HitTestFilterCallback filterCallback, class System.Windows.Media.HitTestResultCallback resultCallback, class System.Windows.Media.HitTestParameters hitTestParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualTreeHelper.HitTest(System.Windows.Media.Visual,System.Windows.Media.HitTestFilterCallback,System.Windows.Media.HitTestResultCallback,System.Windows.Media.HitTestParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void HitTest(System::Windows::Media::Visual ^ reference, System::Windows::Media::HitTestFilterCallback ^ filterCallback, System::Windows::Media::HitTestResultCallback ^ resultCallback, System::Windows::Media::HitTestParameters ^ hitTestParameters);" />
      <MemberSignature Language="F#" Value="static member HitTest : System.Windows.Media.Visual * System.Windows.Media.HitTestFilterCallback * System.Windows.Media.HitTestResultCallback * System.Windows.Media.HitTestParameters -&gt; unit" Usage="System.Windows.Media.VisualTreeHelper.HitTest (reference, filterCallback, resultCallback, hitTestParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="System.Windows.Media.Visual" />
        <Parameter Name="filterCallback" Type="System.Windows.Media.HitTestFilterCallback" />
        <Parameter Name="resultCallback" Type="System.Windows.Media.HitTestResultCallback" />
        <Parameter Name="hitTestParameters" Type="System.Windows.Media.HitTestParameters" />
      </Parameters>
      <Docs>
        <param name="reference">要进行命中测试的 <see cref="T:System.Windows.Media.Visual" />。</param>
        <param name="filterCallback">表示命中测试筛选回调值的方法。</param>
        <param name="resultCallback">表示命中测试结果回调值的方法。</param>
        <param name="hitTestParameters">要对其执行命中测试的参数值。</param>
        <summary>使用调用方定义的 <see cref="T:System.Windows.Media.HitTestFilterCallback" /> 和 <see cref="T:System.Windows.Media.HitTestResultCallback" /> 方法对指定 <see cref="T:System.Windows.Media.Visual" /> 启动命中测试。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `filterCallback`参数可以是`null`，在这种情况下它将被忽略。 如果`filterCallback`不是`null`之前, 调用`resultCallback`。 `resultCallback` 不能为 `null`。  
  
> [!NOTE]
>  它是用 2D 的可视化树，以返回一个命中测试<xref:System.Windows.Media.Media3D.RayHitTestResult>，这是一个三维命中的测试结果对象。 命中测试在二维可视化树中的启动无缝扩展到任何已定义的三维可视树。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Windows.Media.VisualTreeHelper.HitTest%2A>方法进行命中测试中的对象<xref:System.Windows.Controls.Canvas>。  
  
 [!code-csharp[HitTestingOverview#101](~/samples/snippets/csharp/VS_Snippets_Wpf/HitTestingOverview/CSharp/Window1.xaml.cs#101)]
 [!code-vb[HitTestingOverview#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/HitTestingOverview/visualbasic/window1.xaml.vb#101)]  
[!code-csharp[HitTestingOverview#102](~/samples/snippets/csharp/VS_Snippets_Wpf/HitTestingOverview/CSharp/Window1.xaml.cs#102)]
[!code-vb[HitTestingOverview#102](~/samples/snippets/visualbasic/VS_Snippets_Wpf/HitTestingOverview/visualbasic/window1.xaml.vb#102)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159994">命中测试使用 drawingvisuals 执行示例</related>
      </Docs>
    </Member>
    <Member MemberName="SetRootDpi">
      <MemberSignature Language="C#" Value="public static void SetRootDpi (System.Windows.Media.Visual visual, System.Windows.DpiScale dpiInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetRootDpi(class System.Windows.Media.Visual visual, valuetype System.Windows.DpiScale dpiInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualTreeHelper.SetRootDpi(System.Windows.Media.Visual,System.Windows.DpiScale)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetRootDpi(System::Windows::Media::Visual ^ visual, System::Windows::DpiScale dpiInfo);" />
      <MemberSignature Language="F#" Value="static member SetRootDpi : System.Windows.Media.Visual * System.Windows.DpiScale -&gt; unit" Usage="System.Windows.Media.VisualTreeHelper.SetRootDpi (visual, dpiInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visual" Type="System.Windows.Media.Visual" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="dpiInfo" Type="System.Windows.DpiScale" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="visual">视觉对象目标。</param>
        <param name="dpiInfo">目标视觉对象的 DPI 信息。</param>
        <summary>更新视觉对象的 DPI 信息。 它仅能在没有父级的视觉对象上调用。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>