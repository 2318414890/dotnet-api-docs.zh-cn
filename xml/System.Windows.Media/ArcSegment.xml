<Type Name="ArcSegment" FullName="System.Windows.Media.ArcSegment">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4ea813a0debea0d5d584dbffe701f14ae99e44bf" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30669241" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ArcSegment : System.Windows.Media.PathSegment" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ArcSegment extends System.Windows.Media.PathSegment" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.ArcSegment" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ArcSegment&#xA;Inherits PathSegment" />
  <TypeSignature Language="C++ CLI" Value="public ref class ArcSegment sealed : System::Windows::Media::PathSegment" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.PathSegment</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示两点之间的一条椭圆弧。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Media.PathFigure>要存储对象<xref:System.Windows.Media.ArcSegment>对象和其他段。  
  
 一条椭圆弧由其起点和终点，x 轴半径和 y 的半径，x 轴旋转的比例，值，该值指示弧是否应大于 180 度和一个描述的方向绘制弧将值定义。 <xref:System.Windows.Media.ArcSegment>类并不包含弧线的起始点的属性; 它只定义了它所代表的圆弧的终点。 圆弧的起点是当前的点<xref:System.Windows.Media.PathFigure>到<xref:System.Windows.Media.ArcSegment>添加。  
  
 下图演示不同的终结点， <xref:System.Windows.Media.ArcSegment.Size%2A>，和<xref:System.Windows.Media.ArcSegment.RotationAngle%2A>设置。  
  
 ![具有不同 Point 设置的 Arcsegment](~/add/media/arcsegment-point.png "具有不同 Point 设置的 Arcsegment")  
  
 ![具有不同 Size 设置的 Arcsegment](~/add/media/arcsegment-size.png "具有不同 Size 设置的 Arcsegment")  
  
 ![具有不同 RotationAngle 设置的 Arcsegment](~/add/media/arcsegment-rotationangle.png "具有不同 RotationAngle 设置的 Arcsegment")  
  
## <a name="islargearc-and-sweepdirection"></a>IsLargeArc 和 SweepDirection  
 对于大多数弧的特定位置、 大小和轮换，有四个不同弧可绘制;<xref:System.Windows.Media.ArcSegment.IsLargeArc%2A>和<xref:System.Windows.Media.ArcSegment.SweepDirection%2A>属性指示要使用哪些弧。  
  
 四个候选弧线扫描，两个表示大弧扫描的 180 度或更高版本，另外两个表示与扫描 180 度或更少的小弧。 如果<xref:System.Windows.Media.ArcSegment.IsLargeArc%2A>是**true**，则两个较大弧线扫描之一是选; 否则为如果是**false**、 一个较小弧的选择扫描。 剩余的两个弧候选每绘制在一个不同的方向：<xref:System.Windows.Media.SweepDirection.Counterclockwise>或<xref:System.Windows.Media.SweepDirection.Clockwise>。 <xref:System.Windows.Media.ArcSegment.SweepDirection%2A>属性指定要使用哪一种。  
  
 下图显示了不同<xref:System.Windows.Media.ArcSegment.IsLargeArc%2A>和<xref:System.Windows.Media.ArcSegment.SweepDirection%2A>设置。  
  
 ![具有不同 IsLargeArc 设置的 Arcsegment](~/add/media/arcsegment-islargearc.png "具有不同 IsLargeArc 设置的 Arcsegment")  
具有不同 IsLargeArc 设置的 ArcSegment 对象  
  
 ![具有不同 SweepDirection 设置的 Arcsegment](~/add/media/arcsegment-sweepdirection.png "具有不同 SweepDirection 设置的 Arcsegment")  
具有不同 SweepDirection 设置的 ArcSegment 对象  
  
## <a name="freezable-features"></a>Freezable 功能  
 <xref:System.Windows.Media.ArcSegment>是一种<xref:System.Windows.Freezable>对象。 璝惠<xref:System.Windows.Freezable>功能，如冻结和克隆，请参阅[可冻结对象概述](~/docs/framework/wpf/advanced/freezable-objects-overview.md)。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Media.PathFigure" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Media.ArcSegment" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.ArcSegment>类定义只有段弧线，它表示的目标点; 圆弧的起点是当前的点<xref:System.Windows.Media.PathFigure>到其<xref:System.Windows.Media.ArcSegment>添加。  
  
 对于最椭圆弧的特定位置、 大小和轮换，有四个不同弧可绘制;`largeArc`和`sweepDirection`参数指示要使用哪些弧。  
  
 四个候选弧线扫描，两个表示大弧扫描的 180 度或更高版本，另外两个表示与扫描 180 度或更少的小弧。 如果`largeArc`是**true**，则两个较大弧线扫描之一是选; 否则为如果`largeArc`是**false**、 一个较小弧的选择扫描。  
  
 如果`sweepDirection`是<xref:System.Windows.Media.SweepDirection.Clockwise>，按正角方向绘制弧。 如果`sweepDirection`是<xref:System.Windows.Media.SweepDirection.Counterclockwise>，按负角方向绘制弧。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArcSegment ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.ArcSegment.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ArcSegment();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Media.ArcSegment" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.ArcSegment>类定义只有段弧线，它表示的目标点; 圆弧的起点是当前的点<xref:System.Windows.Media.PathFigure>到其<xref:System.Windows.Media.ArcSegment>添加。  
  
 对于最椭圆弧的特定位置、 大小和轮换，有四个不同弧可绘制;`largeArc`和`sweepDirection`参数指示要使用哪些弧。  
  
 四个候选弧线扫描，两个表示大弧扫描的 180 度或更高版本，另外两个表示与扫描 180 度或更少的小弧。 如果`largeArc`是**true**，则两个较大弧线扫描之一是选; 否则为如果`largeArc`是**false**、 一个较小弧的选择扫描。  
  
 如果`sweepDirection`是<xref:System.Windows.Media.SweepDirection.Clockwise>，按正角方向绘制弧。 如果`sweepDirection`是<xref:System.Windows.Media.SweepDirection.Counterclockwise>，按负角方向绘制弧。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArcSegment (System.Windows.Point point, System.Windows.Size size, double rotationAngle, bool isLargeArc, System.Windows.Media.SweepDirection sweepDirection, bool isStroked);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Point point, valuetype System.Windows.Size size, float64 rotationAngle, bool isLargeArc, valuetype System.Windows.Media.SweepDirection sweepDirection, bool isStroked) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.ArcSegment.#ctor(System.Windows.Point,System.Windows.Size,System.Double,System.Boolean,System.Windows.Media.SweepDirection,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ArcSegment(System::Windows::Point point, System::Windows::Size size, double rotationAngle, bool isLargeArc, System::Windows::Media::SweepDirection sweepDirection, bool isStroked);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
        <Parameter Name="size" Type="System.Windows.Size" />
        <Parameter Name="rotationAngle" Type="System.Double" />
        <Parameter Name="isLargeArc" Type="System.Boolean" />
        <Parameter Name="sweepDirection" Type="System.Windows.Media.SweepDirection" />
        <Parameter Name="isStroked" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="point">圆弧的终点；圆弧的起点定义为要添加 <see cref="T:System.Windows.Media.ArcSegment" /> 的 <see cref="T:System.Windows.Media.PathFigure" /> 的当前点。</param>
        <param name="size">圆弧的 x 轴和 y 轴半径。x 轴半径由 <see cref="T:System.Windows.Size" /> 结构的 <see cref="P:System.Windows.Size.Width" /> 属性指定，y 轴半径由 <see cref="T:System.Windows.Size" /> 结构的 <see cref="P:System.Windows.Size.Height" /> 属性指定。</param>
        <param name="rotationAngle">椭圆的 X 轴旋转。</param>
        <param name="isLargeArc">圆弧是否应大于 180 度。</param>
        <param name="sweepDirection">若按正角方向绘制圆弧，则设置为 <see cref="F:System.Windows.Media.SweepDirection.Clockwise" />；若要按负角方向绘制圆弧，则设置为 <see cref="F:System.Windows.Media.SweepDirection.Counterclockwise" />。</param>
        <param name="isStroked">若要在使用 <see cref="T:System.Windows.Media.Pen" /> 呈现段时绘制圆弧，则设置为 <c>true</c>；否则设置为 <c>false</c>。</param>
        <summary>初始化 <see cref="T:System.Windows.Media.ArcSegment" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.ArcSegment>类定义只有段弧线，它表示的目标点; 圆弧的起点是当前的点<xref:System.Windows.Media.PathFigure>到其<xref:System.Windows.Media.ArcSegment>添加。  
  
 对于最椭圆弧的特定位置、 大小和轮换，有四个不同弧可绘制;`largeArc`和`sweepDirection`参数指示要使用哪些弧。  
  
 四个候选弧线扫描，两个表示大弧扫描的 180 度或更高版本，另外两个表示与扫描 180 度或更少的小弧。 如果`largeArc`是**true**，则两个较大弧线扫描之一是选; 否则为如果`largeArc`是**false**、 一个较小弧的选择扫描。  
  
 如果`sweepDirection`是<xref:System.Windows.Media.SweepDirection.Clockwise>，按正角方向绘制弧。 如果`sweepDirection`是<xref:System.Windows.Media.SweepDirection.Counterclockwise>，按负角方向绘制弧。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Media.ArcSegment Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Media.ArcSegment Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.ArcSegment.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As ArcSegment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Media::ArcSegment ^ Clone();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.ArcSegment</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建此 <see cref="T:System.Windows.Media.ArcSegment" /> 的可修改克隆，从而深度复制此对象的值。 在复制依赖项属性时，此方法会复制资源引用和数据绑定（但可能不再解析），但不复制动画或其当前值。</summary>
        <returns>当前对象的可修改复本。 即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 <see langword="true." />，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法用于生成的可修改副本冻结<xref:System.Windows.Freezable>对象 (或任何<xref:System.Windows.Freezable>对象)。 为方便起见，此方法将隐藏继承的强类型实现的版本。  
  
 有关详情，请参阅<xref:System.Windows.Freezable.Clone%2A?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneCurrentValue">
      <MemberSignature Language="C#" Value="public System.Windows.Media.ArcSegment CloneCurrentValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Media.ArcSegment CloneCurrentValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.ArcSegment.CloneCurrentValue" />
      <MemberSignature Language="VB.NET" Value="Public Function CloneCurrentValue () As ArcSegment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Media::ArcSegment ^ CloneCurrentValue();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.ArcSegment</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建此 <see cref="T:System.Windows.Media.ArcSegment" /> 对象的可修改复本，从而深度复制此对象的当前值。 不复制资源引用、数据绑定和动画，而是复制其当前值。</summary>
        <returns>当前对象的可修改复本。 即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 <see langword="true" />，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法用于生成的可修改副本冻结<xref:System.Windows.Freezable>对象 (或任何<xref:System.Windows.Freezable>对象)。 为方便起见，此方法将隐藏继承的强类型实现的版本。  
  
 有关详情，请参阅<xref:System.Windows.Freezable.CloneCurrentValue%2A?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.ArcSegment.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLargeArc">
      <MemberSignature Language="C#" Value="public bool IsLargeArc { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLargeArc" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.ArcSegment.IsLargeArc" />
      <MemberSignature Language="VB.NET" Value="Public Property IsLargeArc As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLargeArc { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示弧是否应大于 180 度。</summary>
        <value>**true**如果弧应大于 180 度; 否则为**false**。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于大多数弧的特定位置、 大小和轮换，有四个不同弧可绘制;<xref:System.Windows.Media.ArcSegment.IsLargeArc%2A>和<xref:System.Windows.Media.ArcSegment.SweepDirection%2A>属性指示要使用哪些弧。  
  
 四个候选弧线扫描，两个表示大弧扫描的 180 度或更高版本，另外两个表示与扫描 180 度或更少的小弧。 如果<xref:System.Windows.Media.ArcSegment.IsLargeArc%2A>是**true**，则两个较大弧线扫描之一是选; 否则为如果是**false**、 一个较小弧的选择扫描。 剩余的两个弧候选每绘制在一个不同的方向：<xref:System.Windows.Media.SweepDirection.Counterclockwise>或<xref:System.Windows.Media.SweepDirection.Clockwise>。 <xref:System.Windows.Media.ArcSegment.SweepDirection%2A>属性指定要使用哪一种。  
  
 下图显示除相同的两条椭圆弧其<xref:System.Windows.Media.ArcSegment.IsLargeArc%2A>设置。  
  
 ![具有不同 IsLargeArc 设置的 Arcsegment](~/add/media/arcsegment-islargearc.png "具有不同 IsLargeArc 设置的 Arcsegment")  
具有不同 IsLargeArc 设置的 ArcSegment 对象  
  
<a name="dependencyPropertyInfo_IsLargeArc"></a>   
## <a name="dependency-property-information"></a>依赖项属性信息  
  
|||  
|-|-|  
|标识符字段|<xref:System.Windows.Media.ArcSegment.IsLargeArcProperty>|  
|元数据属性设置为**true**|无|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLargeArcProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsLargeArcProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsLargeArcProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.ArcSegment.IsLargeArcProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsLargeArcProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsLargeArcProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="P:System.Windows.Media.ArcSegment.IsLargeArc" /> 依赖项属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Point">
      <MemberSignature Language="C#" Value="public System.Windows.Point Point { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point Point" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.ArcSegment.Point" />
      <MemberSignature Language="VB.NET" Value="Public Property Point As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Point Point { System::Windows::Point get(); void set(System::Windows::Point value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置椭圆弧的终结点。</summary>
        <value>绘制弧将通过的点。 默认值为 (0,0)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.ArcSegment>类定义只有段弧线，它表示的目标点; 圆弧的起点是当前的点<xref:System.Windows.Media.PathFigure>到<xref:System.Windows.Media.ArcSegment>添加。  
  
 如果圆弧线段的起点和终点都相同的不能绘制弧。  
  
 对于大多数弧的特定位置、 大小和轮换，有四个不同弧可绘制;<xref:System.Windows.Media.ArcSegment.IsLargeArc%2A>和<xref:System.Windows.Media.ArcSegment.SweepDirection%2A>属性指示要使用哪些弧。  
  
 四个候选弧线扫描，两个表示大弧扫描的 180 度或更高版本，另外两个表示与扫描 180 度或更少的小弧。 如果<xref:System.Windows.Media.ArcSegment.IsLargeArc%2A>是**true**，则两个较大弧线扫描之一是选; 否则为如果是**false**、 一个较小弧的选择扫描。 剩余的两个弧候选每绘制在一个不同的方向：<xref:System.Windows.Media.SweepDirection.Counterclockwise>或<xref:System.Windows.Media.SweepDirection.Clockwise>。 <xref:System.Windows.Media.ArcSegment.SweepDirection%2A>属性指定要使用哪一种。  
  
 下图显示相同除外的几条椭圆弧其<xref:System.Windows.Media.ArcSegment.Point%2A>设置。  
  
 ![具有不同 Point 设置的 Arcsegment](~/add/media/arcsegment-point.png "具有不同 Point 设置的 Arcsegment")  
多个具有不同 Point 设置的 ArcSegment 对象  
  
<a name="dependencyPropertyInfo_Point"></a>   
## <a name="dependency-property-information"></a>依赖项属性信息  
  
|||  
|-|-|  
|标识符字段|<xref:System.Windows.Media.ArcSegment.PointProperty>|  
|元数据属性设置为**true**|无|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PointProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty PointProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty PointProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.ArcSegment.PointProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PointProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ PointProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="P:System.Windows.Media.ArcSegment.Point" /> 依赖项属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RotationAngle">
      <MemberSignature Language="C#" Value="public double RotationAngle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 RotationAngle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.ArcSegment.RotationAngle" />
      <MemberSignature Language="VB.NET" Value="Public Property RotationAngle As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double RotationAngle { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置椭圆围绕 x 轴旋转的量（以度为单位）。</summary>
        <value>椭圆围绕 x 轴旋转的量（以度为单位）。 默认值为 0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下图显示相同除外的几条椭圆弧其<xref:System.Windows.Media.ArcSegment.RotationAngle%2A>设置。  
  
 ![具有不同 RotationAngle 设置的 Arcsegment](~/add/media/arcsegment-rotationangle.png "具有不同 RotationAngle 设置的 Arcsegment")  
多个具有不同 RotationAngle 设置的 ArcSegment 对象  
  
 请注意，是否弧的宽度和高度相同，将此属性设置不起作用。  
  
<a name="dependencyPropertyInfo_RotationAngle"></a>   
## <a name="dependency-property-information"></a>依赖项属性信息  
  
|||  
|-|-|  
|标识符字段|<xref:System.Windows.Media.ArcSegment.RotationAngleProperty>|  
|元数据属性设置为**true**|无|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RotationAngleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RotationAngleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RotationAngleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.ArcSegment.RotationAngleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RotationAngleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ RotationAngleProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="P:System.Windows.Media.ArcSegment.RotationAngle" /> 依赖属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public System.Windows.Size Size { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Size Size" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.ArcSegment.Size" />
      <MemberSignature Language="VB.NET" Value="Public Property Size As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Size Size { System::Windows::Size get(); void set(System::Windows::Size value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置弧的 X 轴半径和 Y 轴半径作为 <see cref="T:System.Windows.Size" /> 结构。</summary>
        <value>A<see cref="T:System.Windows.Size" />描述 x-半径和 y 轴半径椭圆弧的结构。<see cref="T:System.Windows.Size" />结构的<see cref="P:System.Windows.Size.Width" />属性指定弧的 x 轴半径; 其<see cref="P:System.Windows.Size.Height" />属性指定弧的 y 轴半径。 默认值为 0,0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下图显示相同除外的几条椭圆弧其<xref:System.Windows.Media.ArcSegment.Size%2A>设置。  
  
 ![具有不同 Size 设置的 Arcsegment](~/add/media/arcsegment-size.png "具有不同 Size 设置的 Arcsegment")  
多个具有不同 Size 设置的 ArcSegment 对象  
  
<a name="dependencyPropertyInfo_Size"></a>   
## <a name="dependency-property-information"></a>依赖项属性信息  
  
|||  
|-|-|  
|标识符字段|<xref:System.Windows.Media.ArcSegment.SizeProperty>|  
|元数据属性设置为**true**|无|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SizeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SizeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.ArcSegment.SizeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SizeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SizeProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="P:System.Windows.Media.ArcSegment.Size" /> 依赖项属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SweepDirection">
      <MemberSignature Language="C#" Value="public System.Windows.Media.SweepDirection SweepDirection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Media.SweepDirection SweepDirection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.ArcSegment.SweepDirection" />
      <MemberSignature Language="VB.NET" Value="Public Property SweepDirection As SweepDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::SweepDirection SweepDirection { System::Windows::Media::SweepDirection get(); void set(System::Windows::Media::SweepDirection value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.SweepDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指定是以 <see cref="F:System.Windows.Media.SweepDirection.Clockwise" /> 方向还是以 <see cref="F:System.Windows.Media.SweepDirection.Counterclockwise" /> 方向绘制弧。</summary>
        <value>一个指定弧的绘制方向的值。 默认值为 <see cref="F:System.Windows.Media.SweepDirection.Counterclockwise" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关<xref:System.Windows.Media.ArcSegment>与给定<xref:System.Windows.Media.ArcSegment.Size%2A>， <xref:System.Windows.Media.ArcSegment.RotationAngle%2A>、 开始点，日期和结束<xref:System.Windows.Media.ArcSegment.Point%2A>，可能会出现四个不同弧。 指定<xref:System.Windows.Media.ArcSegment.IsLargeArc%2A>属性可能弧数减少到两个： 到末尾从起始点绘制一段弧线<xref:System.Windows.Media.ArcSegment.Point%2A>中<xref:System.Windows.Media.SweepDirection.Clockwise>方向和终结点在从起始点绘制一段弧线<xref:System.Windows.Media.SweepDirection.Counterclockwise>方向。  
  
 下图显示除相同的两条椭圆弧其<xref:System.Windows.Media.ArcSegment.SweepDirection%2A>设置。  
  
 ![具有不同 SweepDirection 设置的 Arcsegment](~/add/media/arcsegment-sweepdirection.png "具有不同 SweepDirection 设置的 Arcsegment")  
具有不同 SweepDirection 设置的 ArcSegment 对象  
  
<a name="dependencyPropertyInfo_SweepDirection"></a>   
## <a name="dependency-property-information"></a>依赖项属性信息  
  
|||  
|-|-|  
|标识符字段|<xref:System.Windows.Media.ArcSegment.SweepDirectionProperty>|  
|元数据属性设置为**true**|无|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SweepDirectionProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SweepDirectionProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SweepDirectionProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.ArcSegment.SweepDirectionProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SweepDirectionProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SweepDirectionProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="P:System.Windows.Media.ArcSegment.SweepDirection" /> 依赖项属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>