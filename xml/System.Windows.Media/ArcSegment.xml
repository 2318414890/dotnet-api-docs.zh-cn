<Type Name="ArcSegment" FullName="System.Windows.Media.ArcSegment">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e590a9fac00879723d7b34096185be6614841545" /><Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="12/01/2018" /><Meta Name="ms.locfileid" Value="52733195" /></Metadata><TypeSignature Language="C#" Value="public sealed class ArcSegment : System.Windows.Media.PathSegment" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ArcSegment extends System.Windows.Media.PathSegment" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.ArcSegment" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ArcSegment&#xA;Inherits PathSegment" />
  <TypeSignature Language="C++ CLI" Value="public ref class ArcSegment sealed : System::Windows::Media::PathSegment" />
  <TypeSignature Language="F#" Value="type ArcSegment = class&#xA;    inherit PathSegment" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.PathSegment</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示两点之间的一条椭圆弧。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Media.PathFigure>对象来存储<xref:System.Windows.Media.ArcSegment>对象和其他段。  
  
 由其起点和终点，x 轴半径和 y 的半径，x 轴旋转的比例，值，该值指示弧是否应大于 180 度，并描述在其中绘制弧线的方向的值定义椭圆弧。 <xref:System.Windows.Media.ArcSegment>类不包含弧线的起始点的属性; 它只定义它表示的弧线的目标点。 圆弧的起点是当前的点<xref:System.Windows.Media.PathFigure>到<xref:System.Windows.Media.ArcSegment>添加。  
  
 下图演示不同的终结点， <xref:System.Windows.Media.ArcSegment.Size%2A>，和<xref:System.Windows.Media.ArcSegment.RotationAngle%2A>设置。  
  
 ![具有不同 Point 设置的 Arcsegment](~/add/media/arcsegment-point.png "具有不同 Point 设置的 Arcsegment")  
  
 ![具有不同大小设置的 Arcsegment](~/add/media/arcsegment-size.png "具有不同大小设置的 Arcsegment")  
  
 ![具有不同 RotationAngle 设置的 Arcsegment](~/add/media/arcsegment-rotationangle.png "具有不同 RotationAngle 设置的 Arcsegment")  
  
## <a name="islargearc-and-sweepdirection"></a>IsLargeArc 和 SweepDirection  
 对于大多数的特定位置、 大小和旋转弧线，有四个不同的弧线可绘制;<xref:System.Windows.Media.ArcSegment.IsLargeArc%2A>和<xref:System.Windows.Media.ArcSegment.SweepDirection%2A>属性指示要使用哪个弧线。  
  
 四个候选弧扫掠，两个表示大弧与扫描的 180 度或更高版本，另外两个表示小于或等于扫描 180 度的小弧。 如果<xref:System.Windows.Media.ArcSegment.IsLargeArc%2A>是`true`，则这两个较大弧扫掠之一就是所选; 否则为如果是`false`、 一个扫描所选的较小的弧线。 剩余的两个圆弧候选人每个绘制不同方向：<xref:System.Windows.Media.SweepDirection.Counterclockwise>或<xref:System.Windows.Media.SweepDirection.Clockwise>。 <xref:System.Windows.Media.ArcSegment.SweepDirection%2A>属性指定应使用哪一个。  
  
 下图显示了不同<xref:System.Windows.Media.ArcSegment.IsLargeArc%2A>和<xref:System.Windows.Media.ArcSegment.SweepDirection%2A>设置。  
  
 ![具有不同 IsLargeArc 设置的 Arcsegment](~/add/media/arcsegment-islargearc.png "具有不同 IsLargeArc 设置的 Arcsegment")  
具有不同 IsLargeArc 设置的 ArcSegment 对象  
  
 ![具有不同 SweepDirection 设置的 Arcsegment](~/add/media/arcsegment-sweepdirection.png "具有不同 SweepDirection 设置的 Arcsegment")  
具有不同 SweepDirection 设置的 ArcSegment 对象  
  
## <a name="freezable-features"></a>Freezable 功能  
 <xref:System.Windows.Media.ArcSegment>是一种<xref:System.Windows.Freezable>对象。 关于<xref:System.Windows.Freezable>功能，例如冻结和克隆，请参阅[Freezable 对象概述](~/docs/framework/wpf/advanced/freezable-objects-overview.md)。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Media.PathFigure" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Media.ArcSegment" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.ArcSegment>类定义它表示的弧线的目标点; 圆弧的起点是当前的点<xref:System.Windows.Media.PathFigure>到该<xref:System.Windows.Media.ArcSegment>添加。  
  
 对于最椭圆弧的特定位置、 大小和旋转，有四个不同的弧线可绘制;`largeArc`和`sweepDirection`参数指示要使用哪个弧线。  
  
 四个候选弧扫掠，两个表示大弧与扫描的 180 度或更高版本，另外两个表示小于或等于扫描 180 度的小弧。 如果`largeArc`是`true`，则这两个较大弧扫掠之一就是所选; 否则为如果`largeArc`是`false`、 一个扫描所选的较小的弧线。  
  
 如果`sweepDirection`是<xref:System.Windows.Media.SweepDirection.Clockwise>，正角方向绘制弧线。 如果`sweepDirection`是<xref:System.Windows.Media.SweepDirection.Counterclockwise>，按负角方向绘制弧线。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArcSegment ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.ArcSegment.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ArcSegment();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Media.ArcSegment" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.ArcSegment>类定义它表示的弧线的目标点; 圆弧的起点是当前的点<xref:System.Windows.Media.PathFigure>到该<xref:System.Windows.Media.ArcSegment>添加。  
  
 对于最椭圆弧的特定位置、 大小和旋转，有四个不同的弧线可绘制;`largeArc`和`sweepDirection`参数指示要使用哪个弧线。  
  
 四个候选弧扫掠，两个表示大弧与扫描的 180 度或更高版本，另外两个表示小于或等于扫描 180 度的小弧。 如果`largeArc`是`true`，则这两个较大弧扫掠之一就是所选; 否则为如果`largeArc`是`false`、 一个扫描所选的较小的弧线。  
  
 如果`sweepDirection`是<xref:System.Windows.Media.SweepDirection.Clockwise>，正角方向绘制弧线。 如果`sweepDirection`是<xref:System.Windows.Media.SweepDirection.Counterclockwise>，按负角方向绘制弧线。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArcSegment (System.Windows.Point point, System.Windows.Size size, double rotationAngle, bool isLargeArc, System.Windows.Media.SweepDirection sweepDirection, bool isStroked);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Point point, valuetype System.Windows.Size size, float64 rotationAngle, bool isLargeArc, valuetype System.Windows.Media.SweepDirection sweepDirection, bool isStroked) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.ArcSegment.#ctor(System.Windows.Point,System.Windows.Size,System.Double,System.Boolean,System.Windows.Media.SweepDirection,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ArcSegment(System::Windows::Point point, System::Windows::Size size, double rotationAngle, bool isLargeArc, System::Windows::Media::SweepDirection sweepDirection, bool isStroked);" />
      <MemberSignature Language="F#" Value="new System.Windows.Media.ArcSegment : System.Windows.Point * System.Windows.Size * double * bool * System.Windows.Media.SweepDirection * bool -&gt; System.Windows.Media.ArcSegment" Usage="new System.Windows.Media.ArcSegment (point, size, rotationAngle, isLargeArc, sweepDirection, isStroked)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
        <Parameter Name="size" Type="System.Windows.Size" />
        <Parameter Name="rotationAngle" Type="System.Double" />
        <Parameter Name="isLargeArc" Type="System.Boolean" />
        <Parameter Name="sweepDirection" Type="System.Windows.Media.SweepDirection" />
        <Parameter Name="isStroked" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="point">圆弧的终点；圆弧的起点定义为要添加 <see cref="T:System.Windows.Media.ArcSegment" /> 的 <see cref="T:System.Windows.Media.PathFigure" /> 的当前点。</param>
        <param name="size">圆弧的 x 轴和 y 轴半径。x 轴半径由 <see cref="T:System.Windows.Size" /> 结构的 <see cref="P:System.Windows.Size.Width" /> 属性指定，y 轴半径由 <see cref="T:System.Windows.Size" /> 结构的 <see cref="P:System.Windows.Size.Height" /> 属性指定。</param>
        <param name="rotationAngle">椭圆的 X 轴旋转。</param>
        <param name="isLargeArc">圆弧是否应大于 180 度。</param>
        <param name="sweepDirection">若按正角方向绘制圆弧，则设置为 <see cref="F:System.Windows.Media.SweepDirection.Clockwise" />；若要按负角方向绘制圆弧，则设置为 <see cref="F:System.Windows.Media.SweepDirection.Counterclockwise" />。</param>
        <param name="isStroked">若要在使用 <see cref="T:System.Windows.Media.Pen" /> 呈现段时绘制圆弧，则设置为 <c>true</c>；否则设置为 <c>false</c>。</param>
        <summary>初始化 <see cref="T:System.Windows.Media.ArcSegment" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.ArcSegment>类定义它表示的弧线的目标点; 圆弧的起点是当前的点<xref:System.Windows.Media.PathFigure>到该<xref:System.Windows.Media.ArcSegment>添加。  
  
 对于最椭圆弧的特定位置、 大小和旋转，有四个不同的弧线可绘制;`largeArc`和`sweepDirection`参数指示要使用哪个弧线。  
  
 四个候选弧扫掠，两个表示大弧与扫描的 180 度或更高版本，另外两个表示小于或等于扫描 180 度的小弧。 如果`largeArc`是`true`，则这两个较大弧扫掠之一就是所选; 否则为如果`largeArc`是`false`、 一个扫描所选的较小的弧线。  
  
 如果`sweepDirection`是<xref:System.Windows.Media.SweepDirection.Clockwise>，正角方向绘制弧线。 如果`sweepDirection`是<xref:System.Windows.Media.SweepDirection.Counterclockwise>，按负角方向绘制弧线。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Media.ArcSegment Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Media.ArcSegment Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.ArcSegment.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As ArcSegment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Media::ArcSegment ^ Clone();" />
      <MemberSignature Language="F#" Value="override this.Clone : unit -&gt; System.Windows.Media.ArcSegment" Usage="arcSegment.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.ArcSegment</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建此 <see cref="T:System.Windows.Media.ArcSegment" /> 的可修改克隆，从而深度复制此对象的值。 在复制依赖项属性时，此方法会复制资源引用和数据绑定（但可能不再解析），但不复制动画或其当前值。</summary>
        <returns>当前对象的可修改复本。 即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 <see langword="true." />，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法用于生成的可修改副本冻结<xref:System.Windows.Freezable>对象 (或任何<xref:System.Windows.Freezable>对象)。 为方便起见，此方法隐藏继承的版本使用的强类型实现。  
  
 有关详情，请参阅<xref:System.Windows.Freezable.Clone%2A?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneCurrentValue">
      <MemberSignature Language="C#" Value="public System.Windows.Media.ArcSegment CloneCurrentValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Media.ArcSegment CloneCurrentValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.ArcSegment.CloneCurrentValue" />
      <MemberSignature Language="VB.NET" Value="Public Function CloneCurrentValue () As ArcSegment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Media::ArcSegment ^ CloneCurrentValue();" />
      <MemberSignature Language="F#" Value="override this.CloneCurrentValue : unit -&gt; System.Windows.Media.ArcSegment" Usage="arcSegment.CloneCurrentValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.ArcSegment</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建此 <see cref="T:System.Windows.Media.ArcSegment" /> 对象的可修改复本，从而深度复制此对象的当前值。 不复制资源引用、数据绑定和动画，而是复制其当前值。</summary>
        <returns>当前对象的可修改复本。 即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 <see langword="true" />，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法用于生成的可修改副本冻结<xref:System.Windows.Freezable>对象 (或任何<xref:System.Windows.Freezable>对象)。 为方便起见，此方法隐藏继承的版本使用的强类型实现。  
  
 有关详情，请参阅<xref:System.Windows.Freezable.CloneCurrentValue%2A?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.ArcSegment.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberSignature Language="F#" Value="abstract member CreateInstanceCore : unit -&gt; System.Windows.Freezable&#xA;override this.CreateInstanceCore : unit -&gt; System.Windows.Freezable" Usage="arcSegment.CreateInstanceCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLargeArc">
      <MemberSignature Language="C#" Value="public bool IsLargeArc { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLargeArc" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.ArcSegment.IsLargeArc" />
      <MemberSignature Language="VB.NET" Value="Public Property IsLargeArc As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLargeArc { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsLargeArc : bool with get, set" Usage="System.Windows.Media.ArcSegment.IsLargeArc" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示弧是否应大于 180 度。</summary>
        <value><see langword="true" /> 如果弧应大于 180 度;否则为<see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于大多数的特定位置、 大小和旋转弧线，有四个不同的弧线可绘制;<xref:System.Windows.Media.ArcSegment.IsLargeArc%2A>和<xref:System.Windows.Media.ArcSegment.SweepDirection%2A>属性指示要使用哪个弧线。  
  
 四个候选弧扫掠，两个表示大弧与扫描的 180 度或更高版本，另外两个表示小于或等于扫描 180 度的小弧。 如果<xref:System.Windows.Media.ArcSegment.IsLargeArc%2A>是`true`，则这两个较大弧扫掠之一就是所选; 否则为如果是`false`、 一个扫描所选的较小的弧线。 剩余的两个圆弧候选人每个绘制不同方向：<xref:System.Windows.Media.SweepDirection.Counterclockwise>或<xref:System.Windows.Media.SweepDirection.Clockwise>。 <xref:System.Windows.Media.ArcSegment.SweepDirection%2A>属性指定应使用哪一个。  
  
 下图显示了除完全相同的两个椭圆弧形其<xref:System.Windows.Media.ArcSegment.IsLargeArc%2A>设置。  
  
 ![具有不同 IsLargeArc 设置的 Arcsegment](~/add/media/arcsegment-islargearc.png "具有不同 IsLargeArc 设置的 Arcsegment")  
具有不同 IsLargeArc 设置的 ArcSegment 对象  
  
<a name="dependencyPropertyInfo_IsLargeArc"></a>   
## <a name="dependency-property-information"></a>依赖项属性信息  
  
|||  
|-|-|  
|标识符字段|<xref:System.Windows.Media.ArcSegment.IsLargeArcProperty>|  
|元数据属性设置为 `true`|无|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLargeArcProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsLargeArcProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsLargeArcProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.ArcSegment.IsLargeArcProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsLargeArcProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsLargeArcProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsLargeArcProperty : System.Windows.DependencyProperty" Usage="System.Windows.Media.ArcSegment.IsLargeArcProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="P:System.Windows.Media.ArcSegment.IsLargeArc" /> 依赖项属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Point">
      <MemberSignature Language="C#" Value="public System.Windows.Point Point { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point Point" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.ArcSegment.Point" />
      <MemberSignature Language="VB.NET" Value="Public Property Point As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Point Point { System::Windows::Point get(); void set(System::Windows::Point value); };" />
      <MemberSignature Language="F#" Value="member this.Point : System.Windows.Point with get, set" Usage="System.Windows.Media.ArcSegment.Point" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置椭圆弧的终结点。</summary>
        <value>绘制弧将通过的点。 默认值为 (0,0)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.ArcSegment>类定义它表示的弧线的目标点; 圆弧的起点是当前的点<xref:System.Windows.Media.PathFigure>到<xref:System.Windows.Media.ArcSegment>添加。  
  
 如果圆弧线段的起始点和终结点是相同的不能绘制弧。  
  
 对于大多数的特定位置、 大小和旋转弧线，有四个不同的弧线可绘制;<xref:System.Windows.Media.ArcSegment.IsLargeArc%2A>和<xref:System.Windows.Media.ArcSegment.SweepDirection%2A>属性指示要使用哪个弧线。  
  
 四个候选弧扫掠，两个表示大弧与扫描的 180 度或更高版本，另外两个表示小于或等于扫描 180 度的小弧。 如果<xref:System.Windows.Media.ArcSegment.IsLargeArc%2A>是`true`，则这两个较大弧扫掠之一就是所选; 否则为如果是`false`、 一个扫描所选的较小的弧线。 剩余的两个圆弧候选人每个绘制不同方向：<xref:System.Windows.Media.SweepDirection.Counterclockwise>或<xref:System.Windows.Media.SweepDirection.Clockwise>。 <xref:System.Windows.Media.ArcSegment.SweepDirection%2A>属性指定应使用哪一个。  
  
 下图显示了除完全相同的几条椭圆弧其<xref:System.Windows.Media.ArcSegment.Point%2A>设置。  
  
 ![具有不同 Point 设置的 Arcsegment](~/add/media/arcsegment-point.png "具有不同 Point 设置的 Arcsegment")  
多个具有不同 Point 设置的 ArcSegment 对象  
  
<a name="dependencyPropertyInfo_Point"></a>   
## <a name="dependency-property-information"></a>依赖项属性信息  
  
|||  
|-|-|  
|标识符字段|<xref:System.Windows.Media.ArcSegment.PointProperty>|  
|元数据属性设置为 `true`|无|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PointProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty PointProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty PointProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.ArcSegment.PointProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PointProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ PointProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable PointProperty : System.Windows.DependencyProperty" Usage="System.Windows.Media.ArcSegment.PointProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="P:System.Windows.Media.ArcSegment.Point" /> 依赖项属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RotationAngle">
      <MemberSignature Language="C#" Value="public double RotationAngle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 RotationAngle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.ArcSegment.RotationAngle" />
      <MemberSignature Language="VB.NET" Value="Public Property RotationAngle As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double RotationAngle { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.RotationAngle : double with get, set" Usage="System.Windows.Media.ArcSegment.RotationAngle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置椭圆围绕 x 轴旋转的量（以度为单位）。</summary>
        <value>椭圆围绕 x 轴旋转的量（以度为单位）。 默认值为 0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下图显示了除完全相同的几条椭圆弧其<xref:System.Windows.Media.ArcSegment.RotationAngle%2A>设置。  
  
 ![具有不同 RotationAngle 设置的 Arcsegment](~/add/media/arcsegment-rotationangle.png "具有不同 RotationAngle 设置的 Arcsegment")  
多个具有不同 RotationAngle 设置的 ArcSegment 对象  
  
 请注意，是否弧的宽度和高度相同，设置此属性没有任何作用。  
  
<a name="dependencyPropertyInfo_RotationAngle"></a>   
## <a name="dependency-property-information"></a>依赖项属性信息  
  
|||  
|-|-|  
|标识符字段|<xref:System.Windows.Media.ArcSegment.RotationAngleProperty>|  
|元数据属性设置为 `true`|无|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RotationAngleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RotationAngleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RotationAngleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.ArcSegment.RotationAngleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RotationAngleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ RotationAngleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable RotationAngleProperty : System.Windows.DependencyProperty" Usage="System.Windows.Media.ArcSegment.RotationAngleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="P:System.Windows.Media.ArcSegment.RotationAngle" /> 依赖属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public System.Windows.Size Size { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Size Size" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.ArcSegment.Size" />
      <MemberSignature Language="VB.NET" Value="Public Property Size As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Size Size { System::Windows::Size get(); void set(System::Windows::Size value); };" />
      <MemberSignature Language="F#" Value="member this.Size : System.Windows.Size with get, set" Usage="System.Windows.Media.ArcSegment.Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置弧的 X 轴半径和 Y 轴半径作为 <see cref="T:System.Windows.Size" /> 结构。</summary>
        <value>描述椭圆弧的 X 轴半径和 Y 轴半径的 <see cref="T:System.Windows.Size" /> 结构。<see cref="T:System.Windows.Size" />结构的<see cref="P:System.Windows.Size.Width" />属性指定弧的 x 轴半径; 它<see cref="P:System.Windows.Size.Height" />属性指定弧的 y 轴半径。 默认值为 0,0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下图显示了除完全相同的几条椭圆弧其<xref:System.Windows.Media.ArcSegment.Size%2A>设置。  
  
 ![具有不同大小设置的 Arcsegment](~/add/media/arcsegment-size.png "具有不同大小设置的 Arcsegment")  
多个具有不同 Size 设置的 ArcSegment 对象  
  
<a name="dependencyPropertyInfo_Size"></a>   
## <a name="dependency-property-information"></a>依赖项属性信息  
  
|||  
|-|-|  
|标识符字段|<xref:System.Windows.Media.ArcSegment.SizeProperty>|  
|元数据属性设置为 `true`|无|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SizeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SizeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.ArcSegment.SizeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SizeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SizeProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable SizeProperty : System.Windows.DependencyProperty" Usage="System.Windows.Media.ArcSegment.SizeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="P:System.Windows.Media.ArcSegment.Size" /> 依赖项属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SweepDirection">
      <MemberSignature Language="C#" Value="public System.Windows.Media.SweepDirection SweepDirection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Media.SweepDirection SweepDirection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.ArcSegment.SweepDirection" />
      <MemberSignature Language="VB.NET" Value="Public Property SweepDirection As SweepDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::SweepDirection SweepDirection { System::Windows::Media::SweepDirection get(); void set(System::Windows::Media::SweepDirection value); };" />
      <MemberSignature Language="F#" Value="member this.SweepDirection : System.Windows.Media.SweepDirection with get, set" Usage="System.Windows.Media.ArcSegment.SweepDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.SweepDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指定是以 <see cref="F:System.Windows.Media.SweepDirection.Clockwise" /> 方向还是以 <see cref="F:System.Windows.Media.SweepDirection.Counterclockwise" /> 方向绘制弧。</summary>
        <value>一个指定弧的绘制方向的值。 默认值为 <see cref="F:System.Windows.Media.SweepDirection.Counterclockwise" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关<xref:System.Windows.Media.ArcSegment>与给定<xref:System.Windows.Media.ArcSegment.Size%2A>， <xref:System.Windows.Media.ArcSegment.RotationAngle%2A>，开始点，并结束<xref:System.Windows.Media.ArcSegment.Point%2A>，可能会出现四个不同的弧线。 指定<xref:System.Windows.Media.ArcSegment.IsLargeArc%2A>属性可能的弧数量减少到两个： 一段弧线，从起点到结束绘制<xref:System.Windows.Media.ArcSegment.Point%2A>中<xref:System.Windows.Media.SweepDirection.Clockwise>方向和终结点在从起始点绘制一段弧线<xref:System.Windows.Media.SweepDirection.Counterclockwise>方向。  
  
 下图显示了除完全相同的两个椭圆弧形其<xref:System.Windows.Media.ArcSegment.SweepDirection%2A>设置。  
  
 ![具有不同 SweepDirection 设置的 Arcsegment](~/add/media/arcsegment-sweepdirection.png "具有不同 SweepDirection 设置的 Arcsegment")  
具有不同 SweepDirection 设置的 ArcSegment 对象  
  
<a name="dependencyPropertyInfo_SweepDirection"></a>   
## <a name="dependency-property-information"></a>依赖项属性信息  
  
|||  
|-|-|  
|标识符字段|<xref:System.Windows.Media.ArcSegment.SweepDirectionProperty>|  
|元数据属性设置为 `true`|无|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SweepDirectionProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SweepDirectionProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SweepDirectionProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.ArcSegment.SweepDirectionProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SweepDirectionProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SweepDirectionProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable SweepDirectionProperty : System.Windows.DependencyProperty" Usage="System.Windows.Media.ArcSegment.SweepDirectionProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="P:System.Windows.Media.ArcSegment.SweepDirection" /> 依赖项属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>