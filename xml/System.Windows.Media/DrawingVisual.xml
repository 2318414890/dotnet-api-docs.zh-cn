<Type Name="DrawingVisual" FullName="System.Windows.Media.DrawingVisual">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="99dc3c30e48b3d0a4c8e87df9c61a3bfc4cce898" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30667771" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DrawingVisual : System.Windows.Media.ContainerVisual" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DrawingVisual extends System.Windows.Media.ContainerVisual" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.DrawingVisual" />
  <TypeSignature Language="VB.NET" Value="Public Class DrawingVisual&#xA;Inherits ContainerVisual" />
  <TypeSignature Language="C++ CLI" Value="public ref class DrawingVisual : System::Windows::Media::ContainerVisual" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.ContainerVisual</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see cref="T:System.Windows.Media.DrawingVisual" /> 是可用于在屏幕上呈现矢量图形的视觉对象。 内容由系统保留。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.DrawingVisual> 是用于呈现形状、 图像或文本的轻量绘制类。 此类是被视为轻量，因为它不提供布局、 输入、 焦点或事件处理中，这将提高其性能。 因此，绘图非常适用于背景和剪贴画。  
  
 若要使用<xref:System.Windows.Media.DrawingVisual>你需要创建主机容器对象的对象。 主机容器对象必须源自<xref:System.Windows.FrameworkElement>类，该类提供的布局和事件处理支持<xref:System.Windows.Media.DrawingVisual>类不支持。 主机容器对象不显示任何可视属性，因为其主要用途是以包含子对象。 有关详细信息，请参阅[使用 DrawingVisual 对象](~/docs/framework/wpf/graphics-multimedia/using-drawingvisual-objects.md)。  
  
 有关完整的示例演示如何创建<xref:System.Windows.Media.DrawingVisual>对象与主机容器，请参阅[命中测试使用 DrawingVisuals 示例](http://go.microsoft.com/fwlink/?LinkID=159994)。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DrawingVisual ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.DrawingVisual.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DrawingVisual();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Media.DrawingVisual" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当你创建<xref:System.Windows.Media.DrawingVisual>对象，它不包含任何绘制内容。 可以通过检索对象的绘图上下文，并在其中绘制添加文本、 图形或映像内容。 绘制上下文返回通过调用<xref:System.Windows.Media.DrawingVisual.RenderOpen%2A>方法<xref:System.Windows.Media.DrawingVisual>对象。  
  
   
  
## Examples  
 在下面的示例中，<xref:System.Windows.Media.DrawingVisual>创建对象时，控件，矩形绘制到它的绘图上下文。 请注意，必须调用<xref:System.Windows.Media.DrawingContext.Close%2A>方法<xref:System.Windows.Media.DrawingContext>将绘制内容保留。  
  
 [!code-csharp[DrawingVisualSample#101](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingVisualSample/CSharp/Window1.xaml.cs#101)]
 [!code-vb[DrawingVisualSample#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingVisualSample/visualbasic/window1.xaml.vb#101)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Drawing">
      <MemberSignature Language="C#" Value="public System.Windows.Media.DrawingGroup Drawing { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.DrawingGroup Drawing" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.DrawingVisual.Drawing" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Drawing As DrawingGroup" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::DrawingGroup ^ Drawing { System::Windows::Media::DrawingGroup ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.DrawingGroup</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Windows.Media.DrawingVisual" /> 对象的绘图内容。</summary>
        <value>获取一个 <see cref="T:System.Windows.Media.DrawingGroup" /> 类型的值，该值表示 <see cref="T:System.Windows.Media.Drawing" /> 中 <see cref="T:System.Windows.Media.DrawingVisual" /> 对象的集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 视觉对象将其呈现的数据存储为向量图形指令列表。 指令列表中的每一项表示一组低级别图形中的数据序列化格式。 有关如何将视觉对象的详细信息将图形数据存储，请参阅[WPF 图形呈现概述](~/docs/framework/wpf/graphics-multimedia/wpf-graphics-rendering-overview.md)。  
  
 对返回的任何更改<xref:System.Windows.Media.DrawingGroup>值不会通过保存<xref:System.Windows.Media.DrawingVisual>。  
  
   
  
## Examples  
 在下面的示例中，<xref:System.Windows.Media.DrawingGroup>每个值<xref:System.Windows.Media.DrawingVisual>visual 枚举宿主中。  
  
 [!code-csharp[VisualSnippets#DrawingVisualSnippet1](~/samples/snippets/csharp/VS_Snippets_Wpf/VisualSnippets/CSharp/DrawingVisual.xaml.cs#drawingvisualsnippet1)]
 [!code-vb[VisualSnippets#DrawingVisualSnippet1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VisualSnippets/visualbasic/drawingvisual.xaml.vb#drawingvisualsnippet1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HitTestCore">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="Overload:System.Windows.Media.DrawingVisual.HitTestCore" /> 确定是否已命中可视对象的边界。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HitTestCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.GeometryHitTestResult HitTestCore (System.Windows.Media.GeometryHitTestParameters hitTestParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.GeometryHitTestResult HitTestCore(class System.Windows.Media.GeometryHitTestParameters hitTestParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.DrawingVisual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HitTestCore (hitTestParameters As GeometryHitTestParameters) As GeometryHitTestResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::GeometryHitTestResult ^ HitTestCore(System::Windows::Media::GeometryHitTestParameters ^ hitTestParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.GeometryHitTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hitTestParameters" Type="System.Windows.Media.GeometryHitTestParameters" />
      </Parameters>
      <Docs>
        <param name="hitTestParameters">一个 <see cref="T:System.Windows.Media.GeometryHitTestParameters" /> 类型的值，指定命中测试所依据的 <see cref="T:System.Windows.Media.Geometry" />。</param>
        <summary>确定可视对象的边界中是否存在几何图形值。</summary>
        <returns>一个 <see cref="T:System.Windows.Media.GeometryHitTestResult" /> 类型的值。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HitTestCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.HitTestResult HitTestCore (System.Windows.Media.PointHitTestParameters hitTestParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.HitTestResult HitTestCore(class System.Windows.Media.PointHitTestParameters hitTestParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.DrawingVisual.HitTestCore(System.Windows.Media.PointHitTestParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HitTestCore (hitTestParameters As PointHitTestParameters) As HitTestResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::HitTestResult ^ HitTestCore(System::Windows::Media::PointHitTestParameters ^ hitTestParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.HitTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hitTestParameters" Type="System.Windows.Media.PointHitTestParameters" />
      </Parameters>
      <Docs>
        <param name="hitTestParameters">一个 <see cref="T:System.Windows.Media.PointHitTestParameters" /> 类型的值，指定命中测试所依据的 <see cref="T:System.Windows.Point" />。</param>
        <summary>确定在 <see cref="T:System.Windows.Media.DrawingVisual" /> 对象的边界中是否存在点坐标值。</summary>
        <returns>一个 <see cref="T:System.Windows.Media.HitTestResult" /> 类型的值，表示从命中测试中返回的 <see cref="T:System.Windows.Media.Visual" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.HitTestResult.VisualHit%2A>属性的返回值表示命中的视觉对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderOpen">
      <MemberSignature Language="C#" Value="public System.Windows.Media.DrawingContext RenderOpen ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Media.DrawingContext RenderOpen() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.DrawingVisual.RenderOpen" />
      <MemberSignature Language="VB.NET" Value="Public Function RenderOpen () As DrawingContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Media::DrawingContext ^ RenderOpen();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.DrawingContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>打开用于呈现的 <see cref="T:System.Windows.Media.DrawingVisual" /> 对象。 返回的 <see cref="T:System.Windows.Media.DrawingContext" /> 值可用于呈现为 <see cref="T:System.Windows.Media.DrawingVisual" />。</summary>
        <returns>一个 <see cref="T:System.Windows.Media.DrawingContext" /> 类型的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当调用<xref:System.Windows.Media.DrawingContext.Close%2A>方法<xref:System.Windows.Media.DrawingContext>、 绘图为定义的任何先前的绘制内容的内容将替换当前<xref:System.Windows.Media.DrawingVisual>。 这意味着将没有办法将新的绘制内容追加到现有的绘制内容。  
  
   
  
## Examples  
 在下面的示例中，<xref:System.Windows.Media.DrawingVisual>创建对象，并将其<xref:System.Windows.Media.DrawingContext>返回。  
  
 [!code-csharp[DrawingVisualSample#101](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingVisualSample/CSharp/Window1.xaml.cs#101)]
 [!code-vb[DrawingVisualSample#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingVisualSample/visualbasic/window1.xaml.vb#101)]  
  
 你绘图上下文中绘制的顺序非常重要 — 每个后续绘图绘制在其他之上。 在下面的示例中，在该矩形是绘制第一个，则文本。  
  
 [!code-csharp[VisualSnippets#RenderOrderSnippet1](~/samples/snippets/csharp/VS_Snippets_Wpf/VisualSnippets/CSharp/Snippets.cs#renderordersnippet1)]
 [!code-vb[VisualSnippets#RenderOrderSnippet1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VisualSnippets/visualbasic/snippets.vb#renderordersnippet1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>