<Type Name="SqlContext" FullName="Microsoft.SqlServer.Server.SqlContext">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="925c62c41e322e116fd365bf090d9efd2a63835d" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36730208" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SqlContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.SqlContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlContext sealed" />
  <TypeSignature Language="F#" Value="type SqlContext = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示调用方上下文的抽象，该上下文提供对 <see cref="T:Microsoft.SqlServer.Server.SqlPipe" />、<see cref="T:Microsoft.SqlServer.Server.SqlTriggerContext" /> 和 <see cref="T:System.Security.Principal.WindowsIdentity" /> 对象的访问。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.SqlServer.Server.SqlContext>对象可以用于获取的触发器上下文 （在触发器中执行代码） 和管道对象 （如果可用，如存储过程中）。 此外可以用于获取<xref:System.Security.Principal.WindowsIdentity>对象，表示调用的客户端的 Microsoft Windows 标识，如果在客户端验证服务器使用集成身份验证。  
  
   
  
## Examples  
 下面的示例创建一个新<xref:Microsoft.SqlServer.Server.SqlDataRecord>及其<xref:Microsoft.SqlServer.Server.SqlMetaData>。 该示例然后标记的一个结果集，使用开始<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>方法，将使用示例数据的记录发送回客户端使用<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>方法，并标记的末尾结果集与<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>方法。  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsAvailable">
      <MemberSignature Language="C#" Value="public static bool IsAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsAvailable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlContext.IsAvailable" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsAvailable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsAvailable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAvailable : bool" Usage="Microsoft.SqlServer.Server.SqlContext.IsAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定调用代码是否在 SQL Server 中运行，以及上下文连接是否可访问。</summary>
        <value>如果上下文连接可用，并且其他 <see cref="T:Microsoft.SqlServer.Server.SqlContext" /> 成员可访问，则为 <see langword="True" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果此属性返回 false，所有其他<xref:Microsoft.SqlServer.Server.SqlContext>成员引发<xref:System.InvalidOperationException>如果使用。  
  
 如果此属性返回 false，任何尝试打开连接对象具有"上下文连接 = true"连接字符串中无法正常工作。  
  
 此属性是只读的。  
  
 当使用 ADO.NET，数据访问的如果一种代码可能会运行 （使用公共语言运行时集成） 的 SQL Server 内部和外部 SQL Server，此属性可以用于检查上下文连接是否可用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pipe">
      <MemberSignature Language="C#" Value="public static Microsoft.SqlServer.Server.SqlPipe Pipe { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Microsoft.SqlServer.Server.SqlPipe Pipe" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlContext.Pipe" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Pipe As SqlPipe" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Microsoft::SqlServer::Server::SqlPipe ^ Pipe { Microsoft::SqlServer::Server::SqlPipe ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Pipe : Microsoft.SqlServer.Server.SqlPipe" Usage="Microsoft.SqlServer.Server.SqlContext.Pipe" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Server.SqlPipe</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取允许调用方将结果集、消息和命令的执行结果发送回客户端的管道对象。</summary>
        <value>如果管道可用，则为 <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> 的实例；如果在管道不可用的上下文中（如在用户定义的函数中）调用，则为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果从外部的 SQL Server，调用<xref:System.NotSupportedException>引发。  
  
 此属性是只读的。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TriggerContext">
      <MemberSignature Language="C#" Value="public static Microsoft.SqlServer.Server.SqlTriggerContext TriggerContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Microsoft.SqlServer.Server.SqlTriggerContext TriggerContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlContext.TriggerContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TriggerContext As SqlTriggerContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Microsoft::SqlServer::Server::SqlTriggerContext ^ TriggerContext { Microsoft::SqlServer::Server::SqlTriggerContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TriggerContext : Microsoft.SqlServer.Server.SqlTriggerContext" Usage="Microsoft.SqlServer.Server.SqlContext.TriggerContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Server.SqlTriggerContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取触发器上下文，该上下文用于向调用方提供有关导致触发器激发的原因的信息，以及被更新的列的映射。</summary>
        <value>如果触发器上下文可用，则为 <see cref="T:Microsoft.SqlServer.Server.SqlTriggerContext" /> 的实例；如果在触发器调用之外调用，则为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.SqlServer.Server.SqlTriggerContext>对象只能从在公共语言运行时触发器检索。  
  
 如果<xref:Microsoft.SqlServer.Server.SqlContext.TriggerContext%2A>从 SQL Server 外部访问属性<xref:System.NotSupportedException>引发。  
  
 此属性是只读的。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowsIdentity">
      <MemberSignature Language="C#" Value="public static System.Security.Principal.WindowsIdentity WindowsIdentity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Security.Principal.WindowsIdentity WindowsIdentity" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlContext.WindowsIdentity" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property WindowsIdentity As WindowsIdentity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Security::Principal::WindowsIdentity ^ WindowsIdentity { System::Security::Principal::WindowsIdentity ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WindowsIdentity : System.Security.Principal.WindowsIdentity" Usage="Microsoft.SqlServer.Server.SqlContext.WindowsIdentity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Principal.WindowsIdentity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>调用方的 Microsoft Windows 标识。</summary>
        <value>表示调用方的 Windows 标识的 <see cref="T:System.Security.Principal.WindowsIdentity" /> 实例；如果客户端是使用“SQL Server 身份验证”进行身份验证的，则为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 SQL Server 的公共语言运行时 (CLR) 代码始终调用进程帐户的上下文中。 如果需要进行执行而不 SQL Server 进程标识使用调用用户的标识操作的代码，应通过此属性获取的模拟令牌。 在获取了 <xref:System.Security.Principal.WindowsIdentity> 对象之后，调用方可以模拟客户端帐户并代表它们执行操作。  
  
 如果从外部的 SQL Server，调用<xref:System.NotSupportedException>引发。  
  
 只有使用 `EXTERNAL_ACCESS` 或 `UNSAFE` 权限标记的程序集可以访问此属性。  
  
 此属性是只读的。  
  
   
  
## Examples  
 下面的示例演示如何获取其 Windows 标识的调用的客户端和模拟客户端。 请参见"模拟示例"SQL Server 联机丛书中有关的模拟使用示例<xref:Microsoft.SqlServer.Server.SqlContext.WindowsIdentity%2A>属性。  
  
 [!code-csharp[DataWorks SqlContext.WindowsIdentity Sample#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlContext.WindowsIdentity Sample/CS/source.cs#1)]
 [!code-vb[DataWorks SqlContext.WindowsIdentity Sample#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlContext.WindowsIdentity Sample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>