<Type Name="IBinarySerialize" FullName="Microsoft.SqlServer.Server.IBinarySerialize">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="aa6d2af7371832ccbdde5ed90bb40f43e554dba4" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IBinarySerialize" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IBinarySerialize" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.IBinarySerialize" />
  <TypeSignature Language="VB.NET" Value="Public Interface IBinarySerialize" />
  <TypeSignature Language="C++ CLI" Value="public interface class IBinarySerialize" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="82295-101">为用户定义类型 (UDT) 和用户定义聚合的序列化和反序列化提供自定义实现。</span>
      <span class="sxs-lookup">
        <span data-stu-id="82295-101">Provides custom implementation for user-defined type (UDT) and user-defined aggregate serialization and deserialization.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82295-102">用户定义的类型 (Udt) 和用户定义聚合所需定义一种存储格式，可以是<xref:Microsoft.SqlServer.Server.Format>。`Native`</span><span class="sxs-lookup"><span data-stu-id="82295-102">User-defined types (UDTs) and user-defined aggregates are required to define a storage format, which can be either <xref:Microsoft.SqlServer.Server.Format>.`Native`</span></span> <span data-ttu-id="82295-103">或<xref:Microsoft.SqlServer.Server.Format>。`UserDefined`。</span><span class="sxs-lookup"><span data-stu-id="82295-103">or <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`.</span></span>  
  
 <span data-ttu-id="82295-104"><xref:Microsoft.SqlServer.Server.Format>.`Native`</span><span class="sxs-lookup"><span data-stu-id="82295-104"><xref:Microsoft.SqlServer.Server.Format>.`Native`</span></span> <span data-ttu-id="82295-105">允许 SQL Server 处理序列化和反序列化自动，但该格式具有它可以处理的类型的类型的限制。</span><span class="sxs-lookup"><span data-stu-id="82295-105">allows SQL Server to handle serialization and deserialization automatically, but the format has restrictions on the kind of types it can handle.</span></span> <span data-ttu-id="82295-106"><xref:Microsoft.SqlServer.Server.Format>.`UserDefined`</span><span class="sxs-lookup"><span data-stu-id="82295-106"><xref:Microsoft.SqlServer.Server.Format>.`UserDefined`</span></span> <span data-ttu-id="82295-107">允许用户定义的类型和聚合处理它们自己的序列化。</span><span class="sxs-lookup"><span data-stu-id="82295-107">allows user-defined types and aggregates to handle their own serialization.</span></span> <span data-ttu-id="82295-108">用户定义的类型和聚合都必须标记为<xref:Microsoft.SqlServer.Server.Format>。`UserDefined`</span><span class="sxs-lookup"><span data-stu-id="82295-108">User-defined types and aggregates must be marked with <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`</span></span> <span data-ttu-id="82295-109">在`SqlUserDefinedType`或`SqlUserDefinedAggregate`特性，而必须实现<xref:Microsoft.SqlServer.Server.IBinarySerialize>接口。</span><span class="sxs-lookup"><span data-stu-id="82295-109">in the `SqlUserDefinedType` or `SqlUserDefinedAggregate` attribute, and must implement the <xref:Microsoft.SqlServer.Server.IBinarySerialize> interface.</span></span>  
  
 <span data-ttu-id="82295-110">请注意，即使使用自定义序列化，每个实例的总大小必须低于允许的限制，当前 8000 个字节最高。</span><span class="sxs-lookup"><span data-stu-id="82295-110">Note that even with custom serialization, the total size of each instance must be under the maximum allowed limit, currently 8000 bytes.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public void Read (System.IO.BinaryReader r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Read(class System.IO.BinaryReader r) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Read(System.IO.BinaryReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Read (r As BinaryReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Read(System::IO::BinaryReader ^ r);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.IO.BinaryReader" />
      </Parameters>
      <Docs>
        <param name="r">
          <span data-ttu-id="82295-111">对象从中进行反序列化的 <see cref="T:System.IO.BinaryReader" /> 流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="82295-111">The <see cref="T:System.IO.BinaryReader" /> stream from which the object is deserialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="82295-112">从用户定义类型 (UDT) 或用户定义聚合的二进制格式生成用户定义的类型或用户定义的聚合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="82295-112">Generates a user-defined type (UDT) or user-defined aggregate from its binary form.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82295-113"><xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A>方法必须重建你使用由编写的信息的对象<xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="82295-113">The <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> method must reconstitute your object using the information written by the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82295-114">下面的示例演示的实现<xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A>UDT，使用的方法<xref:System.IO.BinaryReader>进行反序列化先前保持的 UDT。</span><span class="sxs-lookup"><span data-stu-id="82295-114">The following example shows the implementation of the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> method of a UDT, which uses a <xref:System.IO.BinaryReader> to de-serialize a previously persisted UDT.</span></span> <span data-ttu-id="82295-115">此示例假定 UDT 具有两个数据属性：`StringValue`和`DoubleValue`。</span><span class="sxs-lookup"><span data-stu-id="82295-115">This example assumes that the UDT has two data properties: `StringValue` and `DoubleValue`.</span></span>  
  
 [!code-csharp[DataWorks IBinarySerialize Samples#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#1)]
 [!code-vb[DataWorks IBinarySerialize Samples#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.IO.BinaryWriter w);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.IO.BinaryWriter w) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Write(System.IO.BinaryWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (w As BinaryWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::IO::BinaryWriter ^ w);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="w" Type="System.IO.BinaryWriter" />
      </Parameters>
      <Docs>
        <param name="w">
          <span data-ttu-id="82295-116">UDT 或用户定义聚合所序列化到的 <see cref="T:System.IO.BinaryWriter" /> 流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="82295-116">The <see cref="T:System.IO.BinaryWriter" /> stream to which the UDT or user-defined aggregate is serialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="82295-117">将用户定义的类型 (UDT) 或用户定义的聚合转换为其二进制格式，以便保留。</span>
          <span class="sxs-lookup">
            <span data-stu-id="82295-117">Converts a user-defined type (UDT) or user-defined aggregate into its binary format so that it may be persisted.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82295-118">足够的信息写入二进制流以允许<xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A>方法，以便重建 UDT 或用户定义聚合。</span><span class="sxs-lookup"><span data-stu-id="82295-118">Write sufficient information to the binary stream to allow the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> method to reconstitute your UDT or user-defined aggregate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82295-119">下面的示例演示的实现<xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A>UDT，使用的方法<xref:System.IO.BinaryWriter>要序列化用户定义的二进制格式的 UDT。</span><span class="sxs-lookup"><span data-stu-id="82295-119">The following example shows the implementation of the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> method of a UDT, which uses a <xref:System.IO.BinaryWriter> to serialize the UDT in the user-defined binary format.</span></span> <span data-ttu-id="82295-120">Null 字符填充的目的是确保以便与 TRANSACT-SQL 代码中的另一个 UDT 进行比较、 字符串字节相比字符串字节和双字节进行比较为双精度，字符串值完全分隔的双精度值，从字节数。</span><span class="sxs-lookup"><span data-stu-id="82295-120">The purpose of the null character padding is to ensure that the string value is completely separated from the double value, so that one UDT is compared to another in Transact-SQL code, string bytes are compared to string bytes and double bytes are compared to double bytes.</span></span>  
  
 [!code-csharp[DataWorks IBinarySerialize Samples#2](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#2)]
 [!code-vb[DataWorks IBinarySerialize Samples#2](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>