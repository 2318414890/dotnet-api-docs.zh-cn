<Namespace Name="System.Transactions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="27e12b25390a72364c77196a34eae502971d0d2b" /><Meta Name="ms.sourcegitcommit" Value="2982b8c4cce02c2542285fcaf172f7544d6b80bc" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/09/2019" /><Meta Name="ms.locfileid" Value="59353273" /></Metadata><Docs>
    <summary>使用 <see cref="N:System.Transactions" /> 命名空间包含的类可以编写自己的事务应用程序和资源管理器。 具体地说，可以创建和参与（与一个或多个参与者）本地或分布式事务。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
 `System.Transactions`基础结构使事务编程简单和高效整个平台通过支持在 SQL Server、 ADO.NET、 MSMQ 和 Microsoft 分布式事务处理协调器 (MSDTC) 启动的事务。 它提供了这两个的显式编程模型基于<xref:System.Transactions.Transaction>类，以及隐式编程模型使用<xref:System.Transactions.TransactionScope>类，在其中事务自动管理的基础结构。 强烈建议使用隐式模型变得更容易进行开发。 若要开始，请参阅[实现隐式 Transaction Using Transaction Scope](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.0/ms172152(v=vs.85))主题。 编写事务应用程序的详细信息，请参阅[Writing A Transactional Application](~/docs/framework/data/transactions/writing-a-transactional-application.md)。
  
 `System.Transactions` 此外提供了实现资源管理器的类型。 事务管理器的本机`System.Transactions`基础结构允许易失性资源或单个持久资源登记，若要提交或回滚高效。 有关实现资源管理器的详细信息，请参阅[Implementing A Resource Manager](https://msdn.microsoft.com/library/81509719-d579-4530-831e-42e1acdef63e)。  
  
 事务管理器还以透明方式将为分布式事务的本地事务升级通过其他持久资源管理器会将自身登记事务时协调通过如 DTC，基于磁盘的事务管理器。 `System.Transactions` 基础结构提供增强性能的关键方式有两种。  
  
-   动态升级，这意味着`System.Transactions`基础结构仅使用 MSDTC 事务实际需要时。 中的深度中介绍了这一领域[Transaction Management Escalation](https://msdn.microsoft.com/library/5b87ae58-8ccf-4b9b-9715-41e4aade89b7)主题。  
  
-   可提升的登记，如果某个资源是参与事务的唯一实体，则允许该资源（如数据库）取得事务的所有权。 更高版本，如果需要`System.Transactions`基础结构仍可升级到 MSDTC 事务的管理。 这样进一步减少了使用 MSDTC 的机会。 中的深度中介绍了这一领域[优化使用单个 Phase Commit and Promotable Single Phase Notification](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.0/ms229980(v=vs.85))主题。  
  
 `System.Transactions` 定义限制它公开的资源类型的访问权限的三个级别的信任。 具体而言， *System.Transactions*程序集可以由部分受信任代码调用，因为它已标记有`AllowPartiallyTrustedCallers`特性 (APTCA)。 此特性实质上是移除了 <xref:System.Security.Permissions.SecurityAction.LinkDemand> 权限集的隐式 `FullTrust` 权限，该权限在其他情况下会被自动置于每个类型的每个可公共访问的方法上。 但是，某些类型和成员还是需要更强的权限。  
  
 以下是类型的列表，因为它们使用下面的声明性安全特性进行修饰成员部分不是可被调用的受信任的代码：  
  
 `PermissionSetAttribute(SecurityAction.LinkDemand, Name := "FullTrust")`  
  
 System.Transactions.Transaction.EnlistDurable  
  
 System.Transactions.Transaction.EnlistPromotableSinglePhase  
  
 System.Transactions.TransactionInterop  
  
 System.Transactions.TransactionManager.DistributedTransactionStarted  
  
 System.Transactions.TransactionManager.HostCurrentTransactionCallback  
  
 System.Transactions.TransactionManager.Reenlist  
  
 System.Transactions.TransactionManager.RecoveryComplete  
  
 System.Transactions.TransactionScope.TransactionScope (System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)  
  
 M:System.Transactions.TransactionScope.TransactionScope(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)  
  
 有关详细信息的各种信任级别，请参阅[中访问资源的安全信任级别](https://msdn.microsoft.com/library/8e45acbc-0d81-4f64-9da7-8f766aebff51)。  
  
 核心开发技术 Access\Transaction Processing\  
  
 有关如何使用的详细信息`System.Transactions`命名空间，可以参考的相关概念性文档[事务处理](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.0/w97s6fw4(v=vs.85))下的"核心开发技术 Access\Transaction 处理的\\"文档中的部分。 具体而言，您可以在以下主题中找到详细信息。  
  
 [由 System.Transactions 提供的功能](https://msdn.microsoft.com/library/99cc5ce0-b7fd-4d78-a553-a3dd3f17ed45)  
  
 [实现资源管理器](https://msdn.microsoft.com/library/81509719-d579-4530-831e-42e1acdef63e)  
  
 ]]></format>
    </remarks>
  </Docs>
</Namespace>