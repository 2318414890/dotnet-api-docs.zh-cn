<Type Name="RootedPathValidator" FullName="System.Xml.Serialization.Configuration.RootedPathValidator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="76311afd538bb8339c0baf35fc0c00a336cb44c1" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30718721" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RootedPathValidator : System.Configuration.ConfigurationValidatorBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RootedPathValidator extends System.Configuration.ConfigurationValidatorBase" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Serialization.Configuration.RootedPathValidator" />
  <TypeSignature Language="VB.NET" Value="Public Class RootedPathValidator&#xA;Inherits ConfigurationValidatorBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class RootedPathValidator : System::Configuration::ConfigurationValidatorBase" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationValidatorBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>验证控制 <c>tempFilesLocation</c> 配置开关的使用的规则。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 添加时`WebReference`到中的 Web 服务的对象[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]，Web 服务发现过程来创建文件。  
  
 Web 服务客户端了解在哪里可以找到 Web 服务说明 (WSDL) 文档通过添加`WebReference`对象。 Web 服务客户端然后将已发现的文档保存到磁盘，通过使用`WriteAll`方法。 例如，发现的文档可能.xsd 架构文件或服务说明。 在过程结束时，客户端中删除文件。 你可以通过更改临时文件夹中的文件的默认位置`tempFilesLocation`切入`<xmlSerializer>`在 Machine.config 配置文件中，如以下示例所示指定的元素。  
  
```  
<configuration>  
  <system.web>  
  <system.xml.serialization>  
    <xmlSerializer tempFilesLocation=".."/>  
  </system.xml.serialization>  
</configuration>  
```  
  
 值`tempFilesLocation`必须是绝对路径。 如果指定的路径不是绝对的[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]生成<xref:System.Configuration.ConfigurationErrorsException>引用的配置节时出现异常。  
  
 属性的值的截断以移除前导空格和尾随空格。  
  
 如果值`tempFilesLocation`属性组成的空白区域，默认 %TMP%位置用于编译。 相同的默认行为发生未`tempFilesLocation`指定开关。  
  
 <xref:System.Xml.Serialization.XmlSerializer>不会检查以查看该路径是否存在。 如果不是，请<xref:System.IO.DirectoryNotFoundException>生成。 这是默认行为的相同`XmlSerializer`如果 %TMP%路径不存在。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RootedPathValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.Configuration.RootedPathValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RootedPathValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.Serialization.Configuration.RootedPathValidator" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanValidate">
      <MemberSignature Language="C#" Value="public override bool CanValidate (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanValidate(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.Configuration.RootedPathValidator.CanValidate(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanValidate(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">对象的类型。</param>
        <summary>确定是否可以验证该对象的类型。</summary>
        <returns>
          如果 <paramref name="type" /> 参数与有效的 <see langword="true" /> 对象匹配，则为 <see langword="XMLSerializer" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public override void Validate (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Validate(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.Configuration.RootedPathValidator.Validate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Validate (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Validate(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">对象的值。</param>
        <summary>确定对象的值是否有效。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `XmlSerializer`对象以验证传递的参数`Validate`方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>