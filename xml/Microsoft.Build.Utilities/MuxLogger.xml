<Type Name="MuxLogger" FullName="Microsoft.Build.Utilities.MuxLogger">
  <TypeSignature Language="C#" Value="public class MuxLogger : Microsoft.Build.Framework.INodeLogger" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MuxLogger extends System.Object implements class Microsoft.Build.Framework.ILogger, class Microsoft.Build.Framework.INodeLogger" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Build.Utilities.MuxLogger" />
  <TypeSignature Language="VB.NET" Value="Public Class MuxLogger&#xA;Implements INodeLogger" />
  <TypeSignature Language="C++ CLI" Value="public ref class MuxLogger : Microsoft::Build::Framework::INodeLogger" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Build.Framework.INodeLogger</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="50dc6-101">表示多路复用记录器。</span><span class="sxs-lookup"><span data-stu-id="50dc6-101">Represents a multiplexing logger.</span></span> <span data-ttu-id="50dc6-102">在生成过程中，该记录器的用途是注册和注销多个记录器。</span><span class="sxs-lookup"><span data-stu-id="50dc6-102">The purpose of this logger is to register and unregister multiple loggers during the build.</span></span> <span data-ttu-id="50dc6-103">支持 Visual Studio 集成开发环境方案，其中为每个项目系统的生成请求注册和注销记录器。</span><span class="sxs-lookup"><span data-stu-id="50dc6-103">Supports the Visual Studio IDE scenario in which loggers are registered and unregistered for each project system’s build request.</span></span> <span data-ttu-id="50dc6-104">一个物理生成能拥有多个逻辑生成，每个都带有它自己的记录器集。</span><span class="sxs-lookup"><span data-stu-id="50dc6-104">One physical build can have multiple logical builds, each with its own set of loggers.</span></span>  
  
 <span data-ttu-id="50dc6-105"><see langword="MuxLogger" /> 作为一般中心/l 样式记录器向生成管理器注册自身。</span><span class="sxs-lookup"><span data-stu-id="50dc6-105">The <see langword="MuxLogger" /> registers itself with the build manager as a regular central /l style logger.</span></span> <span data-ttu-id="50dc6-106">根据消息来自的逻辑生成，它从生成管理器中接收消息并将它们发送到正确的记录器上。</span><span class="sxs-lookup"><span data-stu-id="50dc6-106">It receives messages from the build manager and routes them to the correct logger, based on the logical build that the message came from.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50dc6-107">`MuxLogger`通常函数，如下所示：</span><span class="sxs-lookup"><span data-stu-id="50dc6-107">The `MuxLogger` generally functions as follows:</span></span>  
  
-   <span data-ttu-id="50dc6-108">`MuxLogger`注册生成管理器的开始生成开头。</span><span class="sxs-lookup"><span data-stu-id="50dc6-108">The `MuxLogger` is registered at the beginning of the build manager’s Begin build.</span></span>  
  
     <span data-ttu-id="50dc6-109">注册，然后生成管理器启动生成任何记录器获取生成开始事件在同一时间`MuxLogger`。</span><span class="sxs-lookup"><span data-stu-id="50dc6-109">Any loggers registered before the build manager starts the build get the build-started event at the same time as the `MuxLogger`.</span></span>  
  
     <span data-ttu-id="50dc6-110">注册后生成管理器启动生成任何记录器会获得合成的生成开始事件。</span><span class="sxs-lookup"><span data-stu-id="50dc6-110">Any loggers registered after the build manager starts the build get a synthesized build-started event.</span></span> <span data-ttu-id="50dc6-111">无法缓存事件，因为生成开始事件的时间戳在创建的事件，并缓存该事件将在注册到的记录器中为不正确的生成时间时确定`MuxLogger`。</span><span class="sxs-lookup"><span data-stu-id="50dc6-111">The event cannot be cached because the timestamp of the build-started event is determined when the event is created, and caching the event would give incorrect build times in the loggers registered to the `MuxLogger`.</span></span>  
  
-   <span data-ttu-id="50dc6-112">`MuxLogger`初始化生成管理器</span><span class="sxs-lookup"><span data-stu-id="50dc6-112">The `MuxLogger` is initialized by the build manager</span></span>  
  
     <span data-ttu-id="50dc6-113">`MuxLogger`侦听从生成管理器上的事件源的所有事件，并将事件正确路由到已注册的记录器。</span><span class="sxs-lookup"><span data-stu-id="50dc6-113">The `MuxLogger` listens to all events on the event source from the build manager and routes events correctly to the registered loggers.</span></span>  
  
-   <span data-ttu-id="50dc6-114">`MuxLogger`完成生成后端生成中已关闭。</span><span class="sxs-lookup"><span data-stu-id="50dc6-114">The `MuxLogger` is shutdown when the build is finished in end build.</span></span> <span data-ttu-id="50dc6-115">在此期间，它将注销附加到它的任何记录器。</span><span class="sxs-lookup"><span data-stu-id="50dc6-115">At this time, it unregisters any loggers attached to it.</span></span>  
  
-   <span data-ttu-id="50dc6-116">`MuxLogger`记录生成完成事件时每个记录器观察到的第一个项目启动事件的项目完成事件。</span><span class="sxs-lookup"><span data-stu-id="50dc6-116">The `MuxLogger` logs the build-finished event when the project-finished event for the first project-started event is seen for each logger.</span></span>  
  
 <span data-ttu-id="50dc6-117">`MuxLogger`注册记录器方式如下：</span><span class="sxs-lookup"><span data-stu-id="50dc6-117">The `MuxLogger` registers loggers in the following way:</span></span>  
  
1.  <span data-ttu-id="50dc6-118">记录器传递给`MuxLogger.RegisterLogger`提交 id 用于将消息路由到该记录器的方法。</span><span class="sxs-lookup"><span data-stu-id="50dc6-118">The logger is passed to the `MuxLogger.RegisterLogger` method with a submission ID that is used to route a message to that logger.</span></span>  
  
2.  <span data-ttu-id="50dc6-119">`MuxLogger`注册的记录器`MuxLogger`事件源。</span><span class="sxs-lookup"><span data-stu-id="50dc6-119">The `MuxLogger` registers the logger to the `MuxLogger` event source.</span></span>  
  
3.  <span data-ttu-id="50dc6-120">如果已记录生成开始事件、`MuxLogger`创建一个新的生成开始事件并将其发送到记录器的事件源。</span><span class="sxs-lookup"><span data-stu-id="50dc6-120">If the build-started event has already been logged, the `MuxLogger` creates a new build-started event and sends it to the logger’s event source.</span></span>  
  
 <span data-ttu-id="50dc6-121">`MuxLogger`注销记录器方式如下：</span><span class="sxs-lookup"><span data-stu-id="50dc6-121">The `MuxLogger` unregisters loggers in the following way:</span></span>  
  
1.  <span data-ttu-id="50dc6-122">完成生成提交后，`MuxLogger.UnregisterLogger`调用方法时，提交 ID 为记录器。</span><span class="sxs-lookup"><span data-stu-id="50dc6-122">When a build submission is completed, the `MuxLogger.UnregisterLogger` method is called with the submission ID for the logger.</span></span>  
  
2.  <span data-ttu-id="50dc6-123">`MuxLogger`提交 id 查找项目完成事件的成功状态并将生成完成的事件记录到记录器。</span><span class="sxs-lookup"><span data-stu-id="50dc6-123">The `MuxLogger` looks up the success state of the project-finished event for the submission ID and logs a build-finished event to the logger.</span></span>  
  
3.  <span data-ttu-id="50dc6-124">`MuxLogger`清理事件源。</span><span class="sxs-lookup"><span data-stu-id="50dc6-124">The `MuxLogger` cleans up the event source.</span></span>  
  
     <span data-ttu-id="50dc6-125">请注意，注销来自日志记录线程外的线程，并且如果注销称为将记录事件时，可能出现同步问题。</span><span class="sxs-lookup"><span data-stu-id="50dc6-125">Note that the unregister comes from a thread other than the logging thread and a synchronization issue could occur if unregister is called while events are being logged.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MuxLogger ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.MuxLogger.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MuxLogger();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="50dc6-126">创建多路记录器的新实例。</span><span class="sxs-lookup"><span data-stu-id="50dc6-126">Creates a new instance of the multiplexing logger.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Initialize">
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="50dc6-127">初始化 <see langword="MuxLogger" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="50dc6-127">Initializes the <see langword="MuxLogger" /> instance.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public void Initialize (Microsoft.Build.Framework.IEventSource eventSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize(class Microsoft.Build.Framework.IEventSource eventSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.MuxLogger.Initialize(Microsoft.Build.Framework.IEventSource)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Initialize (eventSource As IEventSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Initialize(Microsoft::Build::Framework::IEventSource ^ eventSource);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Build.Framework.ILogger.Initialize(Microsoft.Build.Framework.IEventSource)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSource" Type="Microsoft.Build.Framework.IEventSource" />
      </Parameters>
      <Docs>
        <param name="eventSource"><span data-ttu-id="50dc6-128">事件源。</span><span class="sxs-lookup"><span data-stu-id="50dc6-128">The event source.</span></span></param>
        <summary><span data-ttu-id="50dc6-129">用指定的事件源初始化该 <see langword="MuxLogger" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="50dc6-129">Initialize the <see langword="MuxLogger" /> instance with the specified event source.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public void Initialize (Microsoft.Build.Framework.IEventSource eventSource, int maxNodeCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize(class Microsoft.Build.Framework.IEventSource eventSource, int32 maxNodeCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.MuxLogger.Initialize(Microsoft.Build.Framework.IEventSource,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Initialize (eventSource As IEventSource, maxNodeCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Initialize(Microsoft::Build::Framework::IEventSource ^ eventSource, int maxNodeCount);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Build.Framework.INodeLogger.Initialize(Microsoft.Build.Framework.IEventSource,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSource" Type="Microsoft.Build.Framework.IEventSource" />
        <Parameter Name="maxNodeCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="eventSource"><span data-ttu-id="50dc6-130">事件源。</span><span class="sxs-lookup"><span data-stu-id="50dc6-130">The event source.</span></span></param>
        <param name="maxNodeCount"><span data-ttu-id="50dc6-131">最大节点数。</span><span class="sxs-lookup"><span data-stu-id="50dc6-131">The maximum number of nodes.</span></span></param>
        <summary><span data-ttu-id="50dc6-132">用指定事件源和指定节点的最大数目来初始化该 <see langword="MuxLogger" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="50dc6-132">Initialize the <see langword="MuxLogger" /> instance with the specified event source and specified maximum number of nodes.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameters">
      <MemberSignature Language="C#" Value="public string Parameters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Parameters" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Build.Utilities.MuxLogger.Parameters" />
      <MemberSignature Language="VB.NET" Value="Public Property Parameters As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Parameters { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Build.Framework.ILogger.Parameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="50dc6-133">获取和设置 <see langword="ILogger" /> 接口需要的参数属性。</span><span class="sxs-lookup"><span data-stu-id="50dc6-133">Gets and sets the Parameters attribute, required by the <see langword="ILogger" /> interface.</span></span></summary>
        <value><span data-ttu-id="50dc6-134">返回参数特性。</span><span class="sxs-lookup"><span data-stu-id="50dc6-134">Returns the Parameters attribute.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterLogger">
      <MemberSignature Language="C#" Value="public void RegisterLogger (int submissionId, Microsoft.Build.Framework.ILogger logger);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterLogger(int32 submissionId, class Microsoft.Build.Framework.ILogger logger) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.MuxLogger.RegisterLogger(System.Int32,Microsoft.Build.Framework.ILogger)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterLogger (submissionId As Integer, logger As ILogger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterLogger(int submissionId, Microsoft::Build::Framework::ILogger ^ logger);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="submissionId" Type="System.Int32" />
        <Parameter Name="logger" Type="Microsoft.Build.Framework.ILogger" />
      </Parameters>
      <Docs>
        <param name="submissionId"><span data-ttu-id="50dc6-135">注册的记录器的提交 ID。</span><span class="sxs-lookup"><span data-stu-id="50dc6-135">The submission ID of the logger being registered.</span></span></param>
        <param name="logger"><span data-ttu-id="50dc6-136">要注册的记录器。</span><span class="sxs-lookup"><span data-stu-id="50dc6-136">The logger to register.</span></span></param>
        <summary><span data-ttu-id="50dc6-137">注册在 <see langword="MuxLogger" /> 的一个记录器和引发一个生成开始的事件，如果该生成开始的事件已记录了。</span><span class="sxs-lookup"><span data-stu-id="50dc6-137">Registers a logger on the <see langword="MuxLogger" /> and raises a build-started event if the build-started event has already been logged.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public void Shutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Shutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.MuxLogger.Shutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub Shutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Shutdown();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Build.Framework.ILogger.Shutdown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="50dc6-138">关闭 <see langword="MuxLogger" /> 并清除任何状态。</span><span class="sxs-lookup"><span data-stu-id="50dc6-138">Shuts down the <see langword="MuxLogger" /> and clears out any state.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterLoggers">
      <MemberSignature Language="C#" Value="public bool UnregisterLoggers (int submissionId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool UnregisterLoggers(int32 submissionId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.MuxLogger.UnregisterLoggers(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function UnregisterLoggers (submissionId As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool UnregisterLoggers(int submissionId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="submissionId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="submissionId"><span data-ttu-id="50dc6-139">要移除的记录器的提交 ID。</span><span class="sxs-lookup"><span data-stu-id="50dc6-139">The submission ID of the logger to be removed.</span></span></param>
        <summary><span data-ttu-id="50dc6-140">从 MuxLogger 中移除指定的记录器。</span><span class="sxs-lookup"><span data-stu-id="50dc6-140">Removes the specified logger from the MuxLogger.</span></span></summary>
        <returns><span data-ttu-id="50dc6-141">如果方法成功移除记录器，则返回 <see langword="true" />；否则，返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="50dc6-141">Returns <see langword="true" /> if the method is successful in removing the logger, otherwise, returns <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Verbosity">
      <MemberSignature Language="C#" Value="public Microsoft.Build.Framework.LoggerVerbosity Verbosity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Build.Framework.LoggerVerbosity Verbosity" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Build.Utilities.MuxLogger.Verbosity" />
      <MemberSignature Language="VB.NET" Value="Public Property Verbosity As LoggerVerbosity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Build::Framework::LoggerVerbosity Verbosity { Microsoft::Build::Framework::LoggerVerbosity get(); void set(Microsoft::Build::Framework::LoggerVerbosity value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Build.Framework.ILogger.Verbosity</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Build.Framework.LoggerVerbosity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="50dc6-142">获取和设置 <see langword="ILogger" /> 接口需要的详细级别属性。</span><span class="sxs-lookup"><span data-stu-id="50dc6-142">Gets and sets the Verbosity attribute, required by the <see langword="ILogger" /> interface.</span></span></summary>
        <value><span data-ttu-id="50dc6-143">返回“详细程度”特性值。</span><span class="sxs-lookup"><span data-stu-id="50dc6-143">Returns the Verbosity attribute.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>