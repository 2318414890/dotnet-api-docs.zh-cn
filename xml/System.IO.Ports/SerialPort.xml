<Type Name="SerialPort" FullName="System.IO.Ports.SerialPort">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="edb46f25768209ef7558903ea96c655667e2e21a" />
    <Meta Name="ms.sourcegitcommit" Value="3507e865a3613c00760f25ad1045aaa11bae4dd8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/23/2018" />
    <Meta Name="ms.locfileid" Value="31781038" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SerialPort : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SerialPort extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.IO.Ports.SerialPort" />
  <TypeSignature Language="VB.NET" Value="Public Class SerialPort&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class SerialPort : System::ComponentModel::Component" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.IO.Ports</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示串行端口资源。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此类用于控制串行端口文件资源。 此类提供同步和事件驱动 I/O、 对插针和中断状态的访问和对串行驱动程序属性的访问。 此外，此类的功能可以包装在内部<xref:System.IO.Stream>对象，可通过访问<xref:System.IO.Ports.SerialPort.BaseStream%2A>属性，并将传递给包装或使用流的类。  
  
 <xref:System.IO.Ports.SerialPort>类支持以下编码： <xref:System.Text.ASCIIEncoding>， <xref:System.Text.UTF8Encoding>， <xref:System.Text.UnicodeEncoding>， <xref:System.Text.UTF32Encoding>，并在其中的代码页是小于 50000 或代码页是 54936 mscorlib.dll 中定义任何编码。  你可以使用备用编码，但必须使用<xref:System.IO.Ports.SerialPort.ReadByte%2A>或<xref:System.IO.Ports.SerialPort.Write%2A>方法并执行自己的编码。  
  
 你使用<xref:System.IO.Ports.SerialPort.GetPortNames%2A>方法来检索当前计算机的有效端口。  
  
 如果<xref:System.IO.Ports.SerialPort>对象将成为在读取操作过程中阻止、 不中止此线程。 相反，请关闭基流处理或释放<xref:System.IO.Ports.SerialPort>对象。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.IO.Ports.SerialPort>类以允许两个用户聊天从通过空调制解调器缆线连接的两个单独的计算机。 在此示例中，将提示用户输入的端口设置和用户名之前的聊天。 这两台计算机必须执行该程序才能实现此示例的完整功能。  
  
 [!code-cpp[System.IO.Ports.SerialPort#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cpp/serialport.cpp#10)]
 [!code-csharp[System.IO.Ports.SerialPort#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cs/SerialPort.cs#10)]
 [!code-vb[System.IO.Ports.SerialPort#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/vb/SerialPort.vb#10)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">表示调用非托管的代码的能力。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.IO.Ports.SerialPort" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SerialPort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SerialPort();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.IO.Ports.SerialPort" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 未指定时，此构造函数将使用默认属性值。 例如，<xref:System.IO.Ports.SerialPort.DataBits%2A>属性默认值为 8，<xref:System.IO.Ports.SerialPort.Parity%2A>属性默认为`None`枚举值<xref:System.IO.Ports.SerialPort.StopBits%2A>属性默认为 1，且默认端口名称为 COM1。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.IO.Ports.SerialPort>类以允许两个用户聊天从通过空调制解调器缆线连接的两个单独的计算机。 在此示例中，将提示用户输入的端口设置和用户名之前的聊天。 此代码示例是为提供一个更大的代码示例的一部分<xref:System.IO.Ports.SerialPort>类。  
  
 [!code-cpp[System.IO.Ports.SerialPort#01](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cpp/serialport.cpp#01)]
 [!code-csharp[System.IO.Ports.SerialPort#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cs/SerialPort.cs#01)]
 [!code-vb[System.IO.Ports.SerialPort#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/vb/SerialPort.vb#01)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SerialPort (System.ComponentModel.IContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.IContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.#ctor(System.ComponentModel.IContainer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (container As IContainer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SerialPort(System::ComponentModel::IContainer ^ container);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="container" Type="System.ComponentModel.IContainer" />
      </Parameters>
      <Docs>
        <param name="container">容器的接口。</param>
        <summary>使用指定的 <see cref="T:System.ComponentModel.IContainer" /> 对象初始化 <see cref="T:System.IO.Ports.SerialPort" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 未指定时，此构造函数将使用默认属性值。 例如，<xref:System.IO.Ports.SerialPort.DataBits%2A>属性默认值为 8，<xref:System.IO.Ports.SerialPort.Parity%2A>属性默认为`None`枚举值<xref:System.IO.Ports.SerialPort.StopBits%2A>属性默认为 1，且默认端口名称为 COM1。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">未能找到或打开指定的端口。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SerialPort (string portName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string portName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (portName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SerialPort(System::String ^ portName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="portName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="portName">要使用的端口（例如 COM1）。</param>
        <summary>使用指定的端口名初始化 <see cref="T:System.IO.Ports.SerialPort" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此构造函数创建的新实例<xref:System.IO.Ports.SerialPort>类在你想要指定的端口名称。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">未能找到或打开指定的端口。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SerialPort (string portName, int baudRate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string portName, int32 baudRate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.#ctor(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (portName As String, baudRate As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SerialPort(System::String ^ portName, int baudRate);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="portName" Type="System.String" />
        <Parameter Name="baudRate" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="portName">要使用的端口（例如 COM1）。</param>
        <param name="baudRate">波特率。</param>
        <summary>使用指定的端口名和波特率初始化 <see cref="T:System.IO.Ports.SerialPort" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此构造函数创建的新实例<xref:System.IO.Ports.SerialPort>类在你想要指定的端口名和波特率。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">未能找到或打开指定的端口。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SerialPort (string portName, int baudRate, System.IO.Ports.Parity parity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string portName, int32 baudRate, valuetype System.IO.Ports.Parity parity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.#ctor(System.String,System.Int32,System.IO.Ports.Parity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SerialPort(System::String ^ portName, int baudRate, System::IO::Ports::Parity parity);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="portName" Type="System.String" />
        <Parameter Name="baudRate" Type="System.Int32" />
        <Parameter Name="parity" Type="System.IO.Ports.Parity" />
      </Parameters>
      <Docs>
        <param name="portName">要使用的端口（例如 COM1）。</param>
        <param name="baudRate">波特率。</param>
        <param name="parity">
          <see cref="P:System.IO.Ports.SerialPort.Parity" /> 值之一。</param>
        <summary>使用指定的端口名、波特率和奇偶校验位初始化 <see cref="T:System.IO.Ports.SerialPort" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此构造函数创建的新实例<xref:System.IO.Ports.SerialPort>类在你想要指定的端口名、 波特率和奇偶校验位。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">未能找到或打开指定的端口。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SerialPort (string portName, int baudRate, System.IO.Ports.Parity parity, int dataBits);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string portName, int32 baudRate, valuetype System.IO.Ports.Parity parity, int32 dataBits) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SerialPort(System::String ^ portName, int baudRate, System::IO::Ports::Parity parity, int dataBits);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="portName" Type="System.String" />
        <Parameter Name="baudRate" Type="System.Int32" />
        <Parameter Name="parity" Type="System.IO.Ports.Parity" />
        <Parameter Name="dataBits" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="portName">要使用的端口（例如 COM1）。</param>
        <param name="baudRate">波特率。</param>
        <param name="parity">
          <see cref="P:System.IO.Ports.SerialPort.Parity" /> 值之一。</param>
        <param name="dataBits">数据位值。</param>
        <summary>使用指定的端口名、波特率、奇偶校验位和数据位初始化 <see cref="T:System.IO.Ports.SerialPort" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此构造函数创建的新实例<xref:System.IO.Ports.SerialPort>类在你想要指定的端口名、 波特率、 奇偶校验位和数据位。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">未能找到或打开指定的端口。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SerialPort (string portName, int baudRate, System.IO.Ports.Parity parity, int dataBits, System.IO.Ports.StopBits stopBits);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string portName, int32 baudRate, valuetype System.IO.Ports.Parity parity, int32 dataBits, valuetype System.IO.Ports.StopBits stopBits) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32,System.IO.Ports.StopBits)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SerialPort(System::String ^ portName, int baudRate, System::IO::Ports::Parity parity, int dataBits, System::IO::Ports::StopBits stopBits);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="portName" Type="System.String" />
        <Parameter Name="baudRate" Type="System.Int32" />
        <Parameter Name="parity" Type="System.IO.Ports.Parity" />
        <Parameter Name="dataBits" Type="System.Int32" />
        <Parameter Name="stopBits" Type="System.IO.Ports.StopBits" />
      </Parameters>
      <Docs>
        <param name="portName">要使用的端口（例如 COM1）。</param>
        <param name="baudRate">波特率。</param>
        <param name="parity">
          <see cref="P:System.IO.Ports.SerialPort.Parity" /> 值之一。</param>
        <param name="dataBits">数据位值。</param>
        <param name="stopBits">
          <see cref="P:System.IO.Ports.SerialPort.StopBits" /> 值之一。</param>
        <summary>使用指定的端口名、波特率、奇偶校验位、数据位和停止位初始化 <see cref="T:System.IO.Ports.SerialPort" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此构造函数创建的新实例<xref:System.IO.Ports.SerialPort>类在你想要指定的端口名、 波特率、 奇偶校验位、 数据位和停止位。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">未能找到或打开指定的端口。</exception>
      </Docs>
    </Member>
    <Member MemberName="BaseStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream BaseStream { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream BaseStream" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.BaseStream" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseStream As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Stream ^ BaseStream { System::IO::Stream ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.IO.Stream" /> 对象的基础 <see cref="T:System.IO.Ports.SerialPort" /> 对象。</summary>
        <value>
          <see cref="T:System.IO.Stream" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此属性，用于显式异步 I/O 操作，还是将<xref:System.IO.Ports.SerialPort>对象传递给<xref:System.IO.Stream>包装类，如<xref:System.IO.StreamWriter>。  
  
 任何打开的串行端口<xref:System.IO.Ports.SerialPort.BaseStream%2A>属性返回一个对象，派生自抽象<xref:System.IO.Stream>类，并实现读取和写入方法使用继承自的原型<xref:System.IO.Stream>类： <xref:System.IO.Stream.BeginRead%2A>， <xref:System.IO.Stream.BeginWrite%2A>， <xref:System.IO.Stream.Read%2A><xref:System.IO.Stream.ReadByte%2A>， <xref:System.IO.Stream.Write%2A>，和<xref:System.IO.Stream.WriteByte%2A>。 如果传递到包装的串行资源，这些方法可<xref:System.IO.Stream>包装类。  
  
 由于无法访问经过的已包装的文件句柄，<xref:System.IO.Stream.Length%2A>和<xref:System.IO.Stream.Position%2A>不支持属性，与<xref:System.IO.Stream.Seek%2A>和<xref:System.IO.Stream.SetLength%2A>不支持的方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">流已关闭。 这可能会因为尚未调用 <see cref="M:System.IO.Ports.SerialPort.Open" /> 方法或已调用了 <see cref="M:System.IO.Ports.SerialPort.Close" /> 方法而发生。</exception>
        <exception cref="T:System.NotSupportedException">该流位于 .NET Compact Framework 应用程序中，并调用了以下方法之一：  
  
 <see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /><see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /><see cref="M:System.IO.Stream.EndRead(System.IAsyncResult)" /><see cref="M:System.IO.Stream.EndWrite(System.IAsyncResult)" />  
  
 .NET Compact Framework 不支持带有基流的异步模型。</exception>
      </Docs>
    </Member>
    <Member MemberName="BaudRate">
      <MemberSignature Language="C#" Value="public int BaudRate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BaudRate" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.BaudRate" />
      <MemberSignature Language="VB.NET" Value="Public Property BaudRate As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BaudRate { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(9600)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置串行波特率。</summary>
        <value>波特率。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 用户的串行驱动程序必须支持波特率。 默认值为 9600 每秒位数 (bps)。  
  
   
  
## Examples  
 下面的示例演示如何设置<xref:System.IO.Ports.SerialPort.BaudRate%2A>属性`9600`。  
  
 [!code-cpp[System.IO.Ports.SerialPort#20](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cpp/datareceived.cpp#20)]
 [!code-csharp[System.IO.Ports.SerialPort#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cs/datareceived.cs#20)]
 [!code-vb[System.IO.Ports.SerialPort#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/vb/datareceived.vb#20)]  
  
 下面的示例演示了利用<xref:System.IO.Ports.SerialPort>类以允许两个用户聊天从通过空调制解调器缆线连接的两个单独的计算机。 在此示例中，将提示用户输入的端口设置和用户名之前的聊天。 此代码示例是为提供一个更大的代码示例的一部分<xref:System.IO.Ports.SerialPort>类。  
  
 [!code-cpp[System.IO.Ports.SerialPort#01](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cpp/serialport.cpp#01)]
 [!code-csharp[System.IO.Ports.SerialPort#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cs/SerialPort.cs#01)]
 [!code-vb[System.IO.Ports.SerialPort#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/vb/SerialPort.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定的波特率小于或等于零，或者大于设备所允许的最大波特率。</exception>
        <exception cref="T:System.IO.IOException">此端口处于无效状态。  
  
 \- 或 -  
  
 尝试设置基础端口状态失败。 例如，从此 <see cref="T:System.IO.Ports.SerialPort" /> 对象传递的参数无效。</exception>
      </Docs>
    </Member>
    <Member MemberName="BreakState">
      <MemberSignature Language="C#" Value="public bool BreakState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BreakState" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.BreakState" />
      <MemberSignature Language="VB.NET" Value="Public Property BreakState As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BreakState { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置中断信号状态。</summary>
        <value>
          如果端口处于中断状态，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果传输已挂起，行处于中断状态 （无停止位中的所有低） 会出现中断信号状态直到释放。 若要输入中断状态，请将此属性设置为`true`。 如果端口处于中断状态已为，再次设置此属性`true`不会导致异常。 不能写入<xref:System.IO.Ports.SerialPort>对象时<xref:System.IO.Ports.SerialPort.BreakState%2A>是`true`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">此端口处于无效状态。  
  
 \- 或 -  
  
 尝试设置基础端口状态失败。 例如，从此 <see cref="T:System.IO.Ports.SerialPort" /> 对象传递的参数无效。</exception>
        <exception cref="T:System.InvalidOperationException">流已关闭。 这可能会因为尚未调用 <see cref="M:System.IO.Ports.SerialPort.Open" /> 方法或已调用了 <see cref="M:System.IO.Ports.SerialPort.Close" /> 方法而发生。</exception>
      </Docs>
    </Member>
    <Member MemberName="BytesToRead">
      <MemberSignature Language="C#" Value="public int BytesToRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BytesToRead" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.BytesToRead" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesToRead As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BytesToRead { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取接收缓冲区中数据的字节数。</summary>
        <value>接收缓冲区中数据的字节数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 接收缓冲区包括串行驱动程序的接收缓冲区，以及在内部缓冲<xref:System.IO.Ports.SerialPort>对象本身。  
  
 因为<xref:System.IO.Ports.SerialPort.BytesToRead%2A>属性表示同时<xref:System.IO.Ports.SerialPort>缓冲区和 Windows 创建缓冲区，它可返回较大的值，比<xref:System.IO.Ports.SerialPort.ReadBufferSize%2A>属性，它表示仅 Windows 创建的缓冲区。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">端口未打开。</exception>
      </Docs>
    </Member>
    <Member MemberName="BytesToWrite">
      <MemberSignature Language="C#" Value="public int BytesToWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BytesToWrite" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.BytesToWrite" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesToWrite As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BytesToWrite { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取发送缓冲区中数据的字节数。</summary>
        <value>发送缓冲区中数据的字节数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 发送缓冲区包括串行驱动程序的发送缓冲区，以及在内部缓冲<xref:System.IO.Ports.SerialPort>对象本身。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">此端口处于无效状态。</exception>
        <exception cref="T:System.InvalidOperationException">流已关闭。 这可能会因为尚未调用 <see cref="M:System.IO.Ports.SerialPort.Open" /> 方法或已调用了 <see cref="M:System.IO.Ports.SerialPort.Close" /> 方法而发生。</exception>
      </Docs>
    </Member>
    <Member MemberName="CDHolding">
      <MemberSignature Language="C#" Value="public bool CDHolding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CDHolding" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.CDHolding" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CDHolding As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CDHolding { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取端口的载波检测行的状态。</summary>
        <value>
          如果检测到载波，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性可以用于监视端口的载波检测行的状态。 没有承运人通常指示接收方已挂断且载波已被丢弃。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">此端口处于无效状态。  
  
 \- 或 -  
  
 尝试设置基础端口状态失败。 例如，从此 <see cref="T:System.IO.Ports.SerialPort" /> 对象传递的参数无效。</exception>
        <exception cref="T:System.InvalidOperationException">流已关闭。 这可能会因为尚未调用 <see cref="M:System.IO.Ports.SerialPort.Open" /> 方法或已调用了 <see cref="M:System.IO.Ports.SerialPort.Close" /> 方法而发生。</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>关闭端口连接，将 <see cref="P:System.IO.Ports.SerialPort.IsOpen" /> 属性设置为 <see langword="false" />，并释放内部 <see cref="T:System.IO.Stream" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法关闭<xref:System.IO.Ports.SerialPort>对象并清除这两个接收并传输缓冲区。 此方法调用<xref:System.ComponentModel.Component.Dispose?displayProperty=nameWithType>方法，该调用受保护方法<xref:System.IO.Ports.SerialPort.Dispose%28System.Boolean%29?displayProperty=nameWithType>方法替换`disposing`参数设置为`true`。  
  
 任何应用程序的最佳做法是等待一定的时间之后调用<xref:System.IO.Ports.SerialPort.Close%2A>方法，然后再尝试调用<xref:System.IO.Ports.SerialPort.Open%2A>方法，为端口可能不会关闭立即。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.IO.Ports.SerialPort>类以允许两个用户聊天从通过空调制解调器缆线连接的两个单独的计算机。 在此示例中，将提示用户输入的端口设置和用户名之前的聊天。 此代码示例是为提供一个更大的代码示例的一部分<xref:System.IO.Ports.SerialPort>类。  
  
 [!code-cpp[System.IO.Ports.SerialPort#01](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cpp/serialport.cpp#01)]
 [!code-csharp[System.IO.Ports.SerialPort#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cs/SerialPort.cs#01)]
 [!code-vb[System.IO.Ports.SerialPort#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/vb/SerialPort.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">此端口处于无效状态。  
  
 \- 或 -  
  
 尝试设置基础端口状态失败。 例如，从此 <see cref="T:System.IO.Ports.SerialPort" /> 对象传递的参数无效。</exception>
      </Docs>
    </Member>
    <Member MemberName="CtsHolding">
      <MemberSignature Language="C#" Value="public bool CtsHolding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CtsHolding" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.CtsHolding" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CtsHolding As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CtsHolding { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取“可以发送”行的状态。</summary>
        <value>
          如果检测到“可以发送”行，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 清除到发送 (CTS) 行用于发送/清除的请求中发送 (RTS/CTS) 硬件握手。 发送数据前，将通过非端口查询 CTS 行。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">此端口处于无效状态。  
  
 \- 或 -  
  
 尝试设置基础端口状态失败。 例如，从此 <see cref="T:System.IO.Ports.SerialPort" /> 对象传递的参数无效。</exception>
        <exception cref="T:System.InvalidOperationException">流已关闭。 这可能会因为尚未调用 <see cref="M:System.IO.Ports.SerialPort.Open" /> 方法或已调用了 <see cref="M:System.IO.Ports.SerialPort.Close" /> 方法而发生。</exception>
      </Docs>
    </Member>
    <Member MemberName="DataBits">
      <MemberSignature Language="C#" Value="public int DataBits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DataBits" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.DataBits" />
      <MemberSignature Language="VB.NET" Value="Public Property DataBits As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DataBits { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置每个字节的标准数据位长度。</summary>
        <value>数据位长度。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性的值范围是从 5 至 8。 默认值为 8。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.IO.Ports.SerialPort>类以允许两个用户聊天从通过空调制解调器缆线连接的两个单独的计算机。 在此示例中，将提示用户输入的端口设置和用户名之前的聊天。 此代码示例是为提供一个更大的代码示例的一部分<xref:System.IO.Ports.SerialPort>类。  
  
 [!code-cpp[System.IO.Ports.SerialPort#01](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cpp/serialport.cpp#01)]
 [!code-csharp[System.IO.Ports.SerialPort#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cs/SerialPort.cs#01)]
 [!code-vb[System.IO.Ports.SerialPort#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/vb/SerialPort.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">此端口处于无效状态。  
  
 \- 或 -  
  
 尝试设置基础端口状态失败。 例如，从此 <see cref="T:System.IO.Ports.SerialPort" /> 对象传递的参数无效。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">数据位的值小于 5 或大于 8。</exception>
      </Docs>
    </Member>
    <Member MemberName="DataReceived">
      <MemberSignature Language="C#" Value="public event System.IO.Ports.SerialDataReceivedEventHandler DataReceived;" />
      <MemberSignature Language="ILAsm" Value=".event class System.IO.Ports.SerialDataReceivedEventHandler DataReceived" />
      <MemberSignature Language="DocId" Value="E:System.IO.Ports.SerialPort.DataReceived" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DataReceived As SerialDataReceivedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::IO::Ports::SerialDataReceivedEventHandler ^ DataReceived;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Ports.SerialDataReceivedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指示已通过由 <see cref="T:System.IO.Ports.SerialPort" /> 对象表示的端口接收了数据。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数据事件可以由任何中的项<xref:System.IO.Ports.SerialData>枚举。 由于操作系统决定是否以引发此事件，或不，并非所有的奇偶校验错误可能会报告。  
  
 <xref:System.IO.Ports.SerialPort.DataReceived>如果收到 Eof 字符，而不考虑内部输入缓冲区中的字节数和的值，也会引发事件<xref:System.IO.Ports.SerialPort.ReceivedBytesThreshold%2A>属性。  
  
 <xref:System.IO.Ports.SerialPort.PinChanged><xref:System.IO.Ports.SerialPort.DataReceived>，和<xref:System.IO.Ports.SerialPort.ErrorReceived>事件可能被调用无序，并且可能有基础流时报告错误和事件处理程序执行时之间稍有延迟。 只能有一个事件处理程序可以执行一次。  
  
 <xref:System.IO.Ports.SerialPort.DataReceived>事件不能保证为每个接收的字节引发。 使用<xref:System.IO.Ports.SerialPort.BytesToRead%2A>属性来确定多少数据会保留在缓冲区中读取。  
  
 <xref:System.IO.Ports.SerialPort.DataReceived>从收到数据时，事件将在辅助线程中引发<xref:System.IO.Ports.SerialPort>对象。 因为在辅助线程和非主线程，尝试修改主线程，如 UI 元素中的某些元素上引发此事件可能会产生线程处理的异常。 如果需要修改当中，该元素<xref:System.Windows.Forms.Form>或<xref:System.Windows.Forms.Control>和返回使用 post 更改请求<xref:System.Windows.Forms.Control.Invoke%2A>，这将执行在合适的线程上工作。  
  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 此示例将添加<xref:System.IO.Ports.SerialDataReceivedEventHandler>到<xref:System.IO.Ports.SerialPort.DataReceived>读取 COM1 端口上接收的所有可用的数据。 请注意，若要测试此代码需要附加到 COM1 将发送数据的硬件。  
  
 [!code-cpp[System.IO.Ports.SerialPort#06](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cpp/datareceived.cpp#06)]
 [!code-csharp[System.IO.Ports.SerialPort#06](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cs/datareceived.cs#06)]
 [!code-vb[System.IO.Ports.SerialPort#06](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/vb/datareceived.vb#06)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DiscardInBuffer">
      <MemberSignature Language="C#" Value="public void DiscardInBuffer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DiscardInBuffer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.DiscardInBuffer" />
      <MemberSignature Language="VB.NET" Value="Public Sub DiscardInBuffer ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DiscardInBuffer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>丢弃来自串行驱动程序的接收缓冲区的数据。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法等效于以下 Visual Basic 代码： `MSComm1.InBufferCount = 0`。 就会清除接收缓冲区中，但不会影响传输缓冲区。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">此端口处于无效状态。  
  
 \- 或 -  
  
 尝试设置基础端口状态失败。 例如，从此 <see cref="T:System.IO.Ports.SerialPort" /> 对象传递的参数无效。</exception>
        <exception cref="T:System.InvalidOperationException">流已关闭。 这可能会因为尚未调用 <see cref="M:System.IO.Ports.SerialPort.Open" /> 方法或已调用了 <see cref="M:System.IO.Ports.SerialPort.Close" /> 方法而发生。</exception>
      </Docs>
    </Member>
    <Member MemberName="DiscardNull">
      <MemberSignature Language="C#" Value="public bool DiscardNull { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DiscardNull" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.DiscardNull" />
      <MemberSignature Language="VB.NET" Value="Public Property DiscardNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DiscardNull { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO("Not implemented")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 null 字节在端口和接收缓冲区之间传输时是否被忽略。</summary>
        <value>
          如果忽略 Null 字节，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此值通常应设置为`false`，尤其是对于二进制传输。  此属性设置为`true`会导致意外的结果 UTF32 和 UTF16 编码的字节数。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">此端口处于无效状态。  
  
 \- 或 -  
  
 尝试设置基础端口状态失败。 例如，从此 <see cref="T:System.IO.Ports.SerialPort" /> 对象传递的参数无效。</exception>
        <exception cref="T:System.InvalidOperationException">流已关闭。 这可能会因为尚未调用 <see cref="M:System.IO.Ports.SerialPort.Open" /> 方法或已调用了 <see cref="M:System.IO.Ports.SerialPort.Close" /> 方法而发生。</exception>
      </Docs>
    </Member>
    <Member MemberName="DiscardOutBuffer">
      <MemberSignature Language="C#" Value="public void DiscardOutBuffer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DiscardOutBuffer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.DiscardOutBuffer" />
      <MemberSignature Language="VB.NET" Value="Public Sub DiscardOutBuffer ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DiscardOutBuffer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>丢弃来自串行驱动程序的传输缓冲区的数据。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法等效于以下 Visual Basic 代码： `MSComm1.OutBufferCount = 0`。 就会清除传输缓冲区，但不会影响接收缓冲区。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">此端口处于无效状态。  
  
 \- 或 -  
  
 尝试设置基础端口状态失败。 例如，从此 <see cref="T:System.IO.Ports.SerialPort" /> 对象传递的参数无效。</exception>
        <exception cref="T:System.InvalidOperationException">流已关闭。 这可能会因为尚未调用 <see cref="M:System.IO.Ports.SerialPort.Open" /> 方法或已调用了 <see cref="M:System.IO.Ports.SerialPort.Close" /> 方法而发生。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
        <summary>释放由 <see cref="T:System.IO.Ports.SerialPort" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法称为由公共<xref:System.ComponentModel.Component.Dispose%2A>方法和<xref:System.Object.Finalize%2A>方法。 <xref:System.ComponentModel.Component.Dispose%2A> 调用受保护<xref:System.IO.Ports.SerialPort.Dispose%2A>方法替换`disposing`参数设置为`true`。 <xref:System.Object.Finalize%2A> 调用<xref:System.IO.Ports.SerialPort.Dispose%2A>与`disposing`设置为`false`。  
  
 当 `disposing` 参数为 `true` 时，此方法释放该 <xref:System.IO.Ports.SerialPort> 引用的、由任何托管对象持有的全部资源。 此方法调用每个引用对象的 <xref:System.ComponentModel.Component.Dispose%2A> 方法。  
  
 此方法刷新，并关闭的流对象<xref:System.IO.Ports.SerialPort.BaseStream%2A>属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">此端口处于无效状态。  
  
 \- 或 -  
  
 尝试设置基础端口状态失败。 例如，从此 <see cref="T:System.IO.Ports.SerialPort" /> 对象传递的参数无效。</exception>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.ComponentModel.Component.Dispose" /> 可以由其他对象多次调用。 重写 <see cref="M:System.IO.Ports.SerialPort.Dispose(System.Boolean)" /> 时，请注意不要引用在以前调用 <see cref="M:System.ComponentModel.Component.Dispose" /> 时已释放的对象。 有关如何实现详细信息<see cref="M:System.IO.Ports.SerialPort.Dispose(System.Boolean)" />，请参阅[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。  
  
 有关详细信息<see cref="M:System.ComponentModel.Component.Dispose" />和<see cref="M:System.Object.Finalize" />，请参阅[清洗向上非托管资源](~/docs/standard/garbage-collection/unmanaged.md)。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="DsrHolding">
      <MemberSignature Language="C#" Value="public bool DsrHolding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DsrHolding" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.DsrHolding" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DsrHolding As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DsrHolding { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取数据设置就绪 (DSR) 信号的状态。</summary>
        <value>
          如果“数据设置就绪”信号已发送到端口，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性用于数据设置就绪/数据终端就绪 (DSR/DTR) 握手。 数据设置就绪 (DSR) 信号通常由发送调制解调器到端口以指示它是准备好进行数据传输或接收数据的步骤。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">此端口处于无效状态。  
  
 \- 或 -  
  
 尝试设置基础端口状态失败。 例如，从此 <see cref="T:System.IO.Ports.SerialPort" /> 对象传递的参数无效。</exception>
        <exception cref="T:System.InvalidOperationException">流已关闭。 这可能会因为尚未调用 <see cref="M:System.IO.Ports.SerialPort.Open" /> 方法或已调用了 <see cref="M:System.IO.Ports.SerialPort.Close" /> 方法而发生。</exception>
      </Docs>
    </Member>
    <Member MemberName="DtrEnable">
      <MemberSignature Language="C#" Value="public bool DtrEnable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DtrEnable" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.DtrEnable" />
      <MemberSignature Language="VB.NET" Value="Public Property DtrEnable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DtrEnable { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值在串行通信过程中启用数据终端就绪 (DTR) 信号。</summary>
        <value>
          如果为 <see langword="true" />，则启用数据终端就绪 (DTR)；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XON/XOFF 软件握手和发送/清除请求发送 (RTS/CTS) 硬件握手和调制解调器通信过程中通常会启用数据终端就绪 (DTR)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">此端口处于无效状态。  
  
 \- 或 -  
  
 尝试设置基础端口状态失败。 例如，从此 <see cref="T:System.IO.Ports.SerialPort" /> 对象传递的参数无效。</exception>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置传输前后文本转换的字节编码。</summary>
        <value>一个 <see cref="T:System.Text.Encoding" /> 对象。 默认值为 <see cref="T:System.Text.ASCIIEncoding" />。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="P:System.IO.Ports.SerialPort.Encoding" /> 属性已设置为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.IO.Ports.SerialPort.Encoding" /> 属性被设置为的编码不是 <see cref="T:System.Text.ASCIIEncoding" />、<see cref="T:System.Text.UTF8Encoding" />、<see cref="T:System.Text.UTF32Encoding" />、<see cref="T:System.Text.UnicodeEncoding" />、Windows 单字节编码之一或 Windows 双字节编码之一。</exception>
      </Docs>
    </Member>
    <Member MemberName="ErrorReceived">
      <MemberSignature Language="C#" Value="public event System.IO.Ports.SerialErrorReceivedEventHandler ErrorReceived;" />
      <MemberSignature Language="ILAsm" Value=".event class System.IO.Ports.SerialErrorReceivedEventHandler ErrorReceived" />
      <MemberSignature Language="DocId" Value="E:System.IO.Ports.SerialPort.ErrorReceived" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ErrorReceived As SerialErrorReceivedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::IO::Ports::SerialErrorReceivedEventHandler ^ ErrorReceived;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Ports.SerialErrorReceivedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指示由 <see cref="T:System.IO.Ports.SerialPort" /> 对象表示的端口上发生了错误。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 错误事件可以由任何中的项原因引起<xref:System.IO.Ports.SerialError>枚举。 由于操作系统决定是否以引发此事件，或不，并非所有的奇偶校验错误可能会报告。  
  
 <xref:System.IO.Ports.SerialPort.PinChanged><xref:System.IO.Ports.SerialPort.DataReceived>，和<xref:System.IO.Ports.SerialPort.ErrorReceived>事件可能被调用无序，并且可能有基础流时报告错误，并且当代码可以执行事件处理程序时之间稍有延迟。 只能有一个事件处理程序可以执行一次。  
  
 如果流的尾随字节在发生奇偶校验错误，将向输入一个值为 126 缓冲区添加的额外字节。  
  
 <xref:System.IO.Ports.SerialPort.ErrorReceived>时从接收到的错误事件辅助线程上引发<xref:System.IO.Ports.SerialPort>对象。 因为在辅助线程和非主线程，尝试修改主线程，如 UI 元素中的某些元素上引发此事件可能会产生线程处理的异常。 如果需要修改当中，该元素<xref:System.Windows.Forms.Form>或<xref:System.Windows.Forms.Control>和返回使用 post 更改请求<xref:System.Windows.Forms.Control.Invoke%2A>，这将执行在合适的线程上工作。  
  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPortNames">
      <MemberSignature Language="C#" Value="public static string[] GetPortNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetPortNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.GetPortNames" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetPortNames () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetPortNames();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取当前计算机的串行端口名的数组。</summary>
        <returns>当前计算机的串行端口名的数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 从返回的端口名的顺序<xref:System.IO.Ports.SerialPort.GetPortNames%2A>未指定。  
  
 使用<xref:System.IO.Ports.SerialPort.GetPortNames%2A>方法来查询当前计算机有关的有效的串行端口名的列表。 例如，此方法可用于确定 COM1 和 COM2 是否为当前计算机的有效串行端口。  
  
 从系统注册表 (例如，HKEY_LOCAL_MACHINE\HARDWARE\DEVICEMAP\SERIALCOMM) 获取的端口名称。 如果该注册表包含过时或不正确的数据则<xref:System.IO.Ports.SerialPort.GetPortNames%2A>方法将返回不正确的数据。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.IO.Ports.SerialPort.GetPortNames%2A>方法来向控制台显示串行端口名称。  
  
 [!code-cpp[IO.Ports.GetPortNames#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.Ports.GetPortNames/cpp/example.cpp#1)]
 [!code-csharp[IO.Ports.GetPortNames#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.Ports.GetPortNames/CS/example.cs#1)]
 [!code-vb[IO.Ports.GetPortNames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.Ports.GetPortNames/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">未能查询串行端口名称。</exception>
      </Docs>
    </Member>
    <Member MemberName="Handshake">
      <MemberSignature Language="C#" Value="public System.IO.Ports.Handshake Handshake { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Ports.Handshake Handshake" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.Handshake" />
      <MemberSignature Language="VB.NET" Value="Public Property Handshake As Handshake" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Ports::Handshake Handshake { System::IO::Ports::Handshake get(); void set(System::IO::Ports::Handshake value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Ports.Handshake</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>使用 <see cref="T:System.IO.Ports.Handshake" /> 中的值获取或设置串行端口数据传输的握手协议。</summary>
        <value>
          <see cref="T:System.IO.Ports.Handshake" /> 值之一。 默认值为 <see langword="None" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当使用握手时，该设备已连接到<xref:System.IO.Ports.SerialPort>对象指示以停止在没有至少时才发送数据 (<xref:System.IO.Ports.SerialPort.ReadBufferSize%2A>-1024) 缓冲区中的字节。 设备将指示重新开始发送数据时缓冲区中有 1024年或更少字节。 如果设备在大于 1024 个字节的块中发送数据，这可能导致缓冲区溢出。  
  
 如果<xref:System.IO.Ports.SerialPort.Handshake%2A>属性设置为<xref:System.IO.Ports.Handshake.RequestToSendXOnXOff>和<xref:System.IO.Ports.SerialPort.CtsHolding%2A>设置为`false`，将不会发送 XOff 字符。 如果<xref:System.IO.Ports.SerialPort.CtsHolding%2A>然后将设置为`true`，将发送 XOff 字符之前必须发送更多的数据。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.IO.Ports.SerialPort>类以允许两个用户聊天从通过空调制解调器缆线连接的两个单独的计算机。 在此示例中，将提示用户输入的端口设置和用户名之前的聊天。 此代码示例是为提供一个更大的代码示例的一部分<xref:System.IO.Ports.SerialPort>类。  
  
 [!code-cpp[System.IO.Ports.SerialPort#01](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cpp/serialport.cpp#01)]
 [!code-csharp[System.IO.Ports.SerialPort#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cs/SerialPort.cs#01)]
 [!code-vb[System.IO.Ports.SerialPort#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/vb/SerialPort.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">此端口处于无效状态。  
  
 \- 或 -  
  
 尝试设置基础端口状态失败。 例如，从此 <see cref="T:System.IO.Ports.SerialPort" /> 对象传递的参数无效。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">传递的值不是 <see cref="T:System.IO.Ports.Handshake" /> 枚举中的有效值。</exception>
      </Docs>
    </Member>
    <Member MemberName="InfiniteTimeout">
      <MemberSignature Language="C#" Value="public const int InfiniteTimeout = -1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 InfiniteTimeout = (-1)" />
      <MemberSignature Language="DocId" Value="F:System.IO.Ports.SerialPort.InfiniteTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Const InfiniteTimeout As Integer  = -1" />
      <MemberSignature Language="C++ CLI" Value="public: int InfiniteTimeout = -1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary>指示不应该发生超时。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此值用于<xref:System.IO.Ports.SerialPort.ReadTimeout%2A>和<xref:System.IO.Ports.SerialPort.WriteTimeout%2A>属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOpen">
      <MemberSignature Language="C#" Value="public bool IsOpen { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOpen" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.IsOpen" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOpen As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOpen { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see cref="T:System.IO.Ports.SerialPort" /> 对象的打开或关闭状态。</summary>
        <value>
          如果串行端口已打开，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Ports.SerialPort.IsOpen%2A>属性跟踪是否端口处于打开状态以供调用方，不端口是否被任何应用程序在计算机上打开。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">已传递的 <see cref="P:System.IO.Ports.SerialPort.IsOpen" /> 值为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">已传递的 <see cref="P:System.IO.Ports.SerialPort.IsOpen" /> 值为空字符串。</exception>
      </Docs>
    </Member>
    <Member MemberName="NewLine">
      <MemberSignature Language="C#" Value="public string NewLine { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NewLine" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.NewLine" />
      <MemberSignature Language="VB.NET" Value="Public Property NewLine As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NewLine { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("\n")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于解释 <see cref="M:System.IO.Ports.SerialPort.ReadLine" /> 和 <see cref="M:System.IO.Ports.SerialPort.WriteLine(System.String)" /> 方法调用结束的值。</summary>
        <value>表示行尾的值。 默认值为换行符，<see cref="P:System.Environment.NewLine" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性确定哪些值 （字节） 定义的行的末尾<xref:System.IO.Ports.SerialPort.ReadLine%2A>和<xref:System.IO.Ports.SerialPort.WriteLine%2A>方法。 默认情况下结束的行值是<xref:System.Environment.NewLine%2A>。 如果你正在使用的特定串行设备实现同一目的使用不同的值，将更改为不同的值这种情况。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">属性值为空。</exception>
        <exception cref="T:System.ArgumentNullException">属性值为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public void Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Open() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.Open" />
      <MemberSignature Language="VB.NET" Value="Public Sub Open ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Open();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>打开一个新的串行端口连接。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每个只能存在一个打开的连接<xref:System.IO.Ports.SerialPort>对象。  
  
 任何应用程序的最佳做法是等待一定的时间之后调用<xref:System.IO.Ports.SerialPort.Close%2A>方法，然后再尝试调用<xref:System.IO.Ports.SerialPort.Open%2A>方法，为端口可能不会关闭立即。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.IO.Ports.SerialPort>类以允许两个用户聊天从通过空调制解调器缆线连接的两个单独的计算机。 在此示例中，将提示用户输入的端口设置和用户名之前的聊天。 此代码示例是为提供一个更大的代码示例的一部分<xref:System.IO.Ports.SerialPort>类。  
  
 [!code-cpp[System.IO.Ports.SerialPort#01](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cpp/serialport.cpp#01)]
 [!code-csharp[System.IO.Ports.SerialPort#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cs/SerialPort.cs#01)]
 [!code-vb[System.IO.Ports.SerialPort#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/vb/SerialPort.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">对端口的访问被拒绝。  
  
 \- 或 -  
  
 当前进程或系统上的另一个进程已经打开了指定的 COM 端口（通过 <see cref="T:System.IO.Ports.SerialPort" /> 实例或在非托管代码中）。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">此实例的一个或多个属性无效。 例如，<see cref="P:System.IO.Ports.SerialPort.Parity" />、<see cref="P:System.IO.Ports.SerialPort.DataBits" /> 或 <see cref="P:System.IO.Ports.SerialPort.Handshake" /> 属性不是有效值；<see cref="P:System.IO.Ports.SerialPort.BaudRate" /> 小于或等于零；<see cref="P:System.IO.Ports.SerialPort.ReadTimeout" /> 或 <see cref="P:System.IO.Ports.SerialPort.WriteTimeout" /> 属性小于零且不是 <see cref="F:System.IO.Ports.SerialPort.InfiniteTimeout" />。</exception>
        <exception cref="T:System.ArgumentException">端口名称不是以“COM”开始的。  
  
 \- 或 -  
  
 端口的文件类型不受支持。</exception>
        <exception cref="T:System.IO.IOException">此端口处于无效状态。  
  
 \- 或 -  
  
 尝试设置基础端口状态失败。 例如，从此 <see cref="T:System.IO.Ports.SerialPort" /> 对象传递的参数无效。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.IO.Ports.SerialPort" /> 的当前实例上的指定端口已经打开。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于调用非托管的代码。 关联的枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />安全操作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Parity">
      <MemberSignature Language="C#" Value="public System.IO.Ports.Parity Parity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Ports.Parity Parity" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.Parity" />
      <MemberSignature Language="VB.NET" Value="Public Property Parity As Parity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Ports::Parity Parity { System::IO::Ports::Parity get(); void set(System::IO::Ports::Parity value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Ports.Parity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置奇偶校验检查协议。</summary>
        <value>表示奇偶校验检查协议的枚举值之一。 默认值为 <see cref="F:System.IO.Ports.Parity.None" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 奇偶校验是在其中为 1 的数必须始终是相同的错误检查的过程-偶数还是奇数-每个组的 bits 传输而未出现错误。 在调制解调器的通信，奇偶校验通常是必须同意通过发送方和接收方传输才能使放置的参数之一。  
  
 如果流的尾随字节在发生奇偶校验错误，将向输入一个值为 126 缓冲区添加的额外字节。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.IO.Ports.SerialPort>类以允许两个用户聊天从通过空调制解调器缆线连接的两个单独的计算机。 在此示例中，将提示用户输入的端口设置和用户名之前的聊天。 此代码示例是为提供一个更大的代码示例的一部分<xref:System.IO.Ports.SerialPort>类。  
  
 [!code-cpp[System.IO.Ports.SerialPort#01](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cpp/serialport.cpp#01)]
 [!code-csharp[System.IO.Ports.SerialPort#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cs/SerialPort.cs#01)]
 [!code-vb[System.IO.Ports.SerialPort#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/vb/SerialPort.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">此端口处于无效状态。  
  
 \- 或 -  
  
 尝试设置基础端口状态失败。 例如，从此 <see cref="T:System.IO.Ports.SerialPort" /> 对象传递的参数无效。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">传递的 <see cref="P:System.IO.Ports.SerialPort.Parity" /> 值不是 <see cref="T:System.IO.Ports.Parity" /> 枚举中的有效值。</exception>
      </Docs>
    </Member>
    <Member MemberName="ParityReplace">
      <MemberSignature Language="C#" Value="public byte ParityReplace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8 ParityReplace" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.ParityReplace" />
      <MemberSignature Language="VB.NET" Value="Public Property ParityReplace As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Byte ParityReplace { System::Byte get(); void set(System::Byte value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(63)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO("Not implemented")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个字节，该字节在发生奇偶校验错误时替换数据流中的无效字节。</summary>
        <value>替换无效字节的字节。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果值设置为 null 字符，奇偶校验替换被禁用。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">此端口处于无效状态。  
  
 \- 或 -  
  
 尝试设置基础端口状态失败。 例如，从此 <see cref="T:System.IO.Ports.SerialPort" /> 对象传递的参数无效。</exception>
      </Docs>
    </Member>
    <Member MemberName="PinChanged">
      <MemberSignature Language="C#" Value="public event System.IO.Ports.SerialPinChangedEventHandler PinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.IO.Ports.SerialPinChangedEventHandler PinChanged" />
      <MemberSignature Language="DocId" Value="E:System.IO.Ports.SerialPort.PinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PinChanged As SerialPinChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::IO::Ports::SerialPinChangedEventHandler ^ PinChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Ports.SerialPinChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指示由 <see cref="T:System.IO.Ports.SerialPort" /> 对象表示的端口上发生了非数据信号事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 串行 pin 更改事件可以由任何中的项<xref:System.IO.Ports.SerialPinChange>枚举。 由于操作系统决定是否以引发此事件，或不，并非所有的奇偶校验错误可能会报告。 作为事件的一部分，设置 pin 的新值。  
  
 <xref:System.IO.Ports.SerialPort.PinChanged>引发事件时<xref:System.IO.Ports.SerialPort>对象进入<xref:System.IO.Ports.SerialPort.BreakState%2A>，但端口退出时不<xref:System.IO.Ports.SerialPort.BreakState%2A>。 此行为不适用于中的其他值<xref:System.IO.Ports.SerialPinChange>枚举。  
  
 <xref:System.IO.Ports.SerialPort.PinChanged><xref:System.IO.Ports.SerialPort.DataReceived>，和<xref:System.IO.Ports.SerialPort.ErrorReceived>事件可能被调用无序，并且可能有基础流时报告错误和事件处理程序执行时之间稍有延迟。 只能有一个事件处理程序可以执行一次。  
  
 <xref:System.IO.Ports.SerialPort.PinChanged>在辅助线程上引发事件。 因为在辅助线程和非主线程，尝试修改主线程，如 UI 元素中的某些元素上引发此事件可能会产生线程处理的异常。 如果需要修改当中，该元素<xref:System.Windows.Forms.Form>或<xref:System.Windows.Forms.Control>和返回使用 post 更改请求<xref:System.Windows.Forms.Control.Invoke%2A>，这将执行在合适的线程上工作。  
  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PortName">
      <MemberSignature Language="C#" Value="public string PortName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PortName" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.PortName" />
      <MemberSignature Language="VB.NET" Value="Public Property PortName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PortName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("COM1")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置通信端口，包括但不限于所有可用的 COM 端口。</summary>
        <value>通信端口。 默认值为 COM1。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以通过获取有效的端口名称的列表<xref:System.IO.Ports.SerialPort.GetPortNames%2A>方法。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.IO.Ports.SerialPort>类以允许两个用户聊天从通过空调制解调器缆线连接的两个单独的计算机。 在此示例中，将提示用户输入的端口设置和用户名之前的聊天。 此代码示例是为提供一个更大的代码示例的一部分<xref:System.IO.Ports.SerialPort>类。  
  
 [!code-cpp[System.IO.Ports.SerialPort#01](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cpp/serialport.cpp#01)]
 [!code-csharp[System.IO.Ports.SerialPort#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cs/SerialPort.cs#01)]
 [!code-vb[System.IO.Ports.SerialPort#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/vb/SerialPort.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.IO.Ports.SerialPort.PortName" /> 属性已设置为长度为零的值。  
  
 或  
  
 <see cref="P:System.IO.Ports.SerialPort.PortName" /> 属性已设置为以“\\\\”开头的值。  
  
 或  
  
 端口名称无效。</exception>
        <exception cref="T:System.ArgumentNullException">
          <see cref="P:System.IO.Ports.SerialPort.PortName" /> 属性已设置为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">指定的端口已打开。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Read">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>从 <see cref="T:System.IO.Ports.SerialPort" /> 输入缓冲区中读取。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public int Read (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Read(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Read (buffer As Byte(), offset As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Read(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">将输入写入到其中的字节数组。</param>
        <param name="offset">要写入字节的 <c>buffer</c> 中的偏移量。</param>
        <param name="count">最多读取的字节数。 如果 <c>count</c> 大于输入缓冲区中的字节数，则读取较少的字节。</param>
        <summary>从 <see cref="T:System.IO.Ports.SerialPort" /> 输入缓冲区读取一些字节并将那些字节写入字节数组中指定的偏移量处。</summary>
        <returns>读取的字节数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果有必要读取文本和从流中读取二进制数据之间进行切换，选择一种协议，仔细定义文本和二进制数据，如手动读取字节和解码数据之间的边界。  
  
 因为<xref:System.IO.Ports.SerialPort>类放入缓冲区的数据，而流中包含<xref:System.IO.Ports.SerialPort.BaseStream%2A>属性不，这两个可能冲突有关可用读取字节数。  <xref:System.IO.Ports.SerialPort.BytesToRead%2A>属性可以指示字节读取，但不是能访问到流中包含这些字节<xref:System.IO.Ports.SerialPort.BaseStream%2A>属性原因已缓冲到<xref:System.IO.Ports.SerialPort>类。  
  
 <xref:System.IO.Ports.SerialPort.Read%2A>方法不会阻止其他操作时读取的字节数等于`count`但有仍未读的字节可用的串行端口。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">传递的 buffer 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">指定的端口未打开。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> 或 <paramref name="count" /> 参数超出了所传递的 <paramref name="buffer" /> 的有效区域。 <paramref name="offset" /> 或 <paramref name="count" /> 小于零。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> 加上 <paramref name="count" /> 大于 <paramref name="buffer" /> 的长度。</exception>
        <exception cref="T:System.TimeoutException">没有可以读取的字节。</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public int Read (char[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Read(char[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.Read(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Read (buffer As Char(), offset As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Read(cli::array &lt;char&gt; ^ buffer, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">将输入写入到其中的字符数组。</param>
        <param name="offset">要写入字符的 <c>buffer</c> 中的偏移量。</param>
        <param name="count">要读取的最大字符数。 如果 <c>count</c> 大于输入缓冲区中的字符数，则读取较少的字符。</param>
        <summary>从 <see cref="T:System.IO.Ports.SerialPort" /> 输入缓冲区中读取一些字符，然后将这些字符写入字符数组中指定的偏移量处。</summary>
        <returns>读取的字符数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法用于从串行端口中读取字符。  
  
 如果有必要读取文本和从流中读取二进制数据之间进行切换，选择一种协议，仔细定义文本和二进制数据，如手动读取字节和解码数据之间的边界。  
  
 因为<xref:System.IO.Ports.SerialPort>类放入缓冲区的数据，而流中包含<xref:System.IO.Ports.SerialPort.BaseStream%2A>属性不、 两个可能会有可用于读取多少个字符不一致。  <xref:System.IO.Ports.SerialPort.BytesToRead%2A>属性可以指示的字符可读取，但这些字符可能无法访问包含中的流<xref:System.IO.Ports.SerialPort.BaseStream%2A>属性原因已缓冲到<xref:System.IO.Ports.SerialPort>类。  
  
 <xref:System.IO.Ports.SerialPort.Read%2A>方法不会阻止其他操作时读取的字节数等于`count`但有仍未读的字节可用的串行端口。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> 加上 <paramref name="count" /> 大于缓冲区的长度。  
  
 \- 或 -  
  
 <paramref name="count" /> 为 1 并且缓冲区中有一个代理项字符。</exception>
        <exception cref="T:System.ArgumentNullException">传递的 <paramref name="buffer" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> 或 <paramref name="count" /> 参数超出了所传递的 <paramref name="buffer" /> 的有效区域。 <paramref name="offset" /> 或 <paramref name="count" /> 小于零。</exception>
        <exception cref="T:System.InvalidOperationException">指定的端口未打开。</exception>
        <exception cref="T:System.TimeoutException">没有可以读取的字符。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadBufferSize">
      <MemberSignature Language="C#" Value="public int ReadBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.ReadBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property ReadBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ReadBufferSize { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(4096)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.IO.Ports.SerialPort" /> 输入缓冲区的大小。</summary>
        <value>缓冲区大小（以字节为单位）。 默认值为 4096；最大值为正整数，即 2147483647。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Ports.SerialPort.ReadBufferSize%2A>属性将忽略小于 4096 任何值。  
  
 因为<xref:System.IO.Ports.SerialPort.ReadBufferSize%2A>属性表示仅 Windows 创建的缓冲区，它可返回较小的值比<xref:System.IO.Ports.SerialPort.BytesToRead%2A>属性，表示同时<xref:System.IO.Ports.SerialPort>缓冲区和 Windows 创建缓冲区。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">设置的 <see cref="P:System.IO.Ports.SerialPort.ReadBufferSize" /> 值小于或等于零。</exception>
        <exception cref="T:System.InvalidOperationException">打开流时设置 <see cref="P:System.IO.Ports.SerialPort.ReadBufferSize" /> 属性。</exception>
        <exception cref="T:System.IO.IOException">
          <see cref="P:System.IO.Ports.SerialPort.ReadBufferSize" /> 属性已设置为一个奇整数值。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadByte">
      <MemberSignature Language="C#" Value="public int ReadByte ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReadByte() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.ReadByte" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadByte () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReadByte();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从 <see cref="T:System.IO.Ports.SerialPort" /> 输入缓冲区中同步读取一个字节。</summary>
        <returns>强制转换为 <see cref="T:System.Int32" /> 的字节；或者，如果已读取到流的末尾，则为 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法读取一个字节。  
  
 请小心使用<xref:System.IO.Ports.SerialPort.ReadByte%2A>和<xref:System.IO.Ports.SerialPort.ReadChar%2A>在一起。 读取的字节和中读取字符之间切换可能会导致额外的数据要读取和/或其他意外的行为。 如果有必要读取文本和从流中读取二进制数据之间进行切换，选择一种协议，仔细定义文本和二进制数据，如手动读取字节和解码数据之间的边界。  
  
> [!NOTE]
>  因为<xref:System.IO.Ports.SerialPort>类放入缓冲区的数据，而流中包含<xref:System.IO.Ports.SerialPort.BaseStream%2A>属性不，这两个可能冲突有关可用读取字节数。  <xref:System.IO.Ports.SerialPort.BytesToRead%2A>属性可以指示字节读取，但不是能访问到流中包含这些字节<xref:System.IO.Ports.SerialPort.BaseStream%2A>属性原因已缓冲到<xref:System.IO.Ports.SerialPort>类。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">指定的端口未打开。</exception>
        <exception cref="T:System.ServiceProcess.TimeoutException">该操作未在超时时间到期之前完成。  
  
 \- 或 -  
  
 未读取任何字节。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadChar">
      <MemberSignature Language="C#" Value="public int ReadChar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReadChar() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.ReadChar" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadChar () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReadChar();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从 <see cref="T:System.IO.Ports.SerialPort" /> 输入缓冲区中同步读取一个字符。</summary>
        <returns>读取的字符。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法读取一个完整的字符编码的基础。  
  
 请小心使用<xref:System.IO.Ports.SerialPort.ReadByte%2A>和<xref:System.IO.Ports.SerialPort.ReadChar%2A>在一起。 读取的字节和中读取字符之间切换可能会导致额外的数据要读取和/或其他意外的行为。 如果有必要读取文本和从流中读取二进制数据之间进行切换，选择一种协议，仔细定义文本和二进制数据，如手动读取字节和解码数据之间的边界。  
  
> [!NOTE]
>  因为<xref:System.IO.Ports.SerialPort>类放入缓冲区的数据，而流中包含<xref:System.IO.Ports.SerialPort.BaseStream%2A>属性不，这两个可能冲突有关可用读取字节数。  <xref:System.IO.Ports.SerialPort.BytesToRead%2A>属性可以指示字节读取，但不是能访问到流中包含这些字节<xref:System.IO.Ports.SerialPort.BaseStream%2A>属性原因已缓冲到<xref:System.IO.Ports.SerialPort>类。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">指定的端口未打开。</exception>
        <exception cref="T:System.ServiceProcess.TimeoutException">该操作未在超时时间到期之前完成。  
  
 \- 或 -  
  
 在分配的超时时间内没有可用的字符。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadExisting">
      <MemberSignature Language="C#" Value="public string ReadExisting ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ReadExisting() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.ReadExisting" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadExisting () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadExisting();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在编码的基础上，读取 <see cref="T:System.IO.Ports.SerialPort" /> 对象的流和输入缓冲区中所有立即可用的字节。</summary>
        <returns>
          <see cref="T:System.IO.Ports.SerialPort" /> 对象的流和输入缓冲区的内容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法返回的流和内部缓冲区的内容<xref:System.IO.Ports.SerialPort>字符串形式的对象。 此方法不使用超时。请注意，此方法可以保留尾部内部缓冲区，这样中的前导字节<xref:System.IO.Ports.SerialPort.BytesToRead%2A>大于零的值。  
  
 如果有必要读取文本和从流中读取二进制数据之间进行切换，选择一种协议，仔细定义文本和二进制数据，如手动读取字节和解码数据之间的边界。  
  
> [!NOTE]
>  <xref:System.IO.Ports.SerialPort>类缓冲数据，但的流对象包含在<xref:System.IO.Ports.SerialPort.BaseStream%2A?displayProperty=nameWithType>属性却没有。 因此，<xref:System.IO.Ports.SerialPort>对象和流对象可能会与不同的可读取的字节数。 当将字节缓冲到<xref:System.IO.Ports.SerialPort>对象，<xref:System.IO.Ports.SerialPort.BytesToRead%2A>属性的值中包括这些字节; 但是，这些字节可能无法访问包含中的流<xref:System.IO.Ports.SerialPort.BaseStream%2A>属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">指定的端口未打开。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadLine">
      <MemberSignature Language="C#" Value="public string ReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ReadLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.ReadLine" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadLine () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadLine();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>一直读取到输入缓冲区中的 <see cref="P:System.IO.Ports.SerialPort.NewLine" /> 值。</summary>
        <returns>输入缓冲区中直到首次出现 <see cref="P:System.IO.Ports.SerialPort.NewLine" /> 值的内容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 请注意，虽然此方法不返回<xref:System.IO.Ports.SerialPort.NewLine%2A>值，<xref:System.IO.Ports.SerialPort.NewLine%2A>该值会从输入缓冲区中删除。  
  
 默认情况下，<xref:System.IO.Ports.SerialPort.ReadLine%2A>方法将阻塞，直到收到一条线。 如果不需要此行为，设置<xref:System.IO.Ports.SerialPort.ReadTimeout%2A>为任何非零值，以强制属性<xref:System.IO.Ports.SerialPort.ReadLine%2A>方法会引发<xref:System.TimeoutException>如果行在端口上不可用。  
  
 如果有必要读取文本和从流中读取二进制数据之间进行切换，选择一种协议，仔细定义文本和二进制数据，如手动读取字节和解码数据之间的边界。  
  
> [!NOTE]
>  因为<xref:System.IO.Ports.SerialPort>类放入缓冲区的数据，而流中包含<xref:System.IO.Ports.SerialPort.BaseStream%2A>属性不，这两个可能冲突有关可用读取字节数。  <xref:System.IO.Ports.SerialPort.BytesToRead%2A>属性可以指示字节读取，但不是能访问到流中包含这些字节<xref:System.IO.Ports.SerialPort.BaseStream%2A>属性原因已缓冲到<xref:System.IO.Ports.SerialPort>类。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.IO.Ports.SerialPort>类以允许两个用户聊天从通过空调制解调器缆线连接的两个单独的计算机。 此代码示例是为提供一个更大的代码示例的一部分<xref:System.IO.Ports.SerialPort>类。  
  
 [!code-cpp[System.IO.Ports.SerialPort#01](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cpp/serialport.cpp#01)]
 [!code-csharp[System.IO.Ports.SerialPort#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cs/SerialPort.cs#01)]
 [!code-vb[System.IO.Ports.SerialPort#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/vb/SerialPort.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">指定的端口未打开。</exception>
        <exception cref="T:System.TimeoutException">该操作未在超时时间到期之前完成。  
  
 \- 或 -  
  
 未读取任何字节。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadTimeout">
      <MemberSignature Language="C#" Value="public int ReadTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadTimeout" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.ReadTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property ReadTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ReadTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置读取操作未完成时发生超时之前的毫秒数。</summary>
        <value>操作未完成时发生超时之前的毫秒数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 最初，读取的超时值被设置为在 Win32 通信 API 中的 500 毫秒。 此属性，可将此值设置。 可以设置为任何值大于零，超时，或将其设置为<xref:System.IO.Ports.SerialPort.InfiniteTimeout>，在这种情况下不会发生超时。 默认为 <xref:System.IO.Ports.SerialPort.InfiniteTimeout>。  
  
> [!NOTE]
>  用户的非托管`COMMTIMEOUTS`结构可能希望将超时值设置为零，以禁止超时。 若要禁止显示的超时时间<xref:System.IO.Ports.SerialPort.ReadTimeout%2A>属性，但是，你必须指定<xref:System.IO.Ports.SerialPort.InfiniteTimeout>。  
  
 此属性不会影响<xref:System.IO.Stream.BeginRead%2A>方法返回的流<xref:System.IO.Ports.SerialPort.BaseStream%2A>属性。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.IO.Ports.SerialPort>类以允许两个用户聊天从通过空调制解调器缆线连接的两个单独的计算机。 在此示例中，将提示用户输入的端口设置和用户名之前的聊天。 此代码示例是为提供一个更大的代码示例的一部分<xref:System.IO.Ports.SerialPort>类。  
  
 [!code-cpp[System.IO.Ports.SerialPort#01](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cpp/serialport.cpp#01)]
 [!code-csharp[System.IO.Ports.SerialPort#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cs/SerialPort.cs#01)]
 [!code-vb[System.IO.Ports.SerialPort#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/vb/SerialPort.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">此端口处于无效状态。  
  
 \- 或 -  
  
 尝试设置基础端口状态失败。 例如，从此 <see cref="T:System.IO.Ports.SerialPort" /> 对象传递的参数无效。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">读取超时值小于零，且不等于 <see cref="F:System.IO.Ports.SerialPort.InfiniteTimeout" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadTo">
      <MemberSignature Language="C#" Value="public string ReadTo (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ReadTo(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.ReadTo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadTo (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadTo(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">指示读取操作停止位置的值。</param>
        <summary>一直读取到输入缓冲区中的指定 <paramref name="value" /> 的字符串。</summary>
        <returns>输入缓冲区中直到指定 <paramref name="value" /> 的内容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法读取直到达到了指定的字符串`value`。 时返回的字符串未包含`value`、`value`从输入缓冲区中删除。  
  
 如果有必要读取文本和从流中读取二进制数据之间进行切换，选择一种协议，仔细定义文本和二进制数据，如手动读取字节和解码数据之间的边界。  
  
> [!NOTE]
>  因为<xref:System.IO.Ports.SerialPort>类放入缓冲区的数据，而流中包含<xref:System.IO.Ports.SerialPort.BaseStream%2A>属性不，这两个可能冲突有关可用读取字节数。  <xref:System.IO.Ports.SerialPort.BytesToRead%2A>属性可以指示字节读取，但不是能访问到流中包含这些字节<xref:System.IO.Ports.SerialPort.BaseStream%2A>属性原因已缓冲到<xref:System.IO.Ports.SerialPort>类。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> 参数的长度为 0。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">指定的端口未打开。</exception>
        <exception cref="T:System.TimeoutException">该操作未在超时时间到期之前完成。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReceivedBytesThreshold">
      <MemberSignature Language="C#" Value="public int ReceivedBytesThreshold { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReceivedBytesThreshold" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.ReceivedBytesThreshold" />
      <MemberSignature Language="VB.NET" Value="Public Property ReceivedBytesThreshold As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ReceivedBytesThreshold { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO("Not implemented")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="E:System.IO.Ports.SerialPort.DataReceived" /> 事件发生前内部输入缓冲区中的字节数。</summary>
        <value>
          <see cref="E:System.IO.Ports.SerialPort.DataReceived" /> 事件触发前内部输入缓冲区中的字节数。 默认值为 1。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Ports.SerialPort.DataReceived>事件也会引发如果<xref:System.IO.Ports.SerialData.Eof>收到字符时，而不考虑内部输入缓冲区中的字节数和的值<xref:System.IO.Ports.SerialPort.ReceivedBytesThreshold%2A>属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.IO.Ports.SerialPort.ReceivedBytesThreshold" /> 值小于或等于零。</exception>
      </Docs>
    </Member>
    <Member MemberName="RtsEnable">
      <MemberSignature Language="C#" Value="public bool RtsEnable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RtsEnable" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.RtsEnable" />
      <MemberSignature Language="VB.NET" Value="Public Property RtsEnable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RtsEnable { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示在串行通信中是否启用请求发送 (RTS) 信号。</summary>
        <value>
          如果为 <see langword="true" />，则启用请求发送 (RTS)；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 请求发送 (RTS) 信号是通常用于发送/清除的请求中发送 (RTS/CTS) 硬件握手。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在 <see cref="P:System.IO.Ports.SerialPort.RtsEnable" /> 属性设置为 <see cref="P:System.IO.Ports.SerialPort.Handshake" /> 值或 <see cref="F:System.IO.Ports.Handshake.RequestToSend" /> 值时设置或检索 <see cref="F:System.IO.Ports.Handshake.RequestToSendXOnXOff" /> 属性。</exception>
        <exception cref="T:System.IO.IOException">此端口处于无效状态。  
  
 \- 或 -  
  
 尝试设置基础端口状态失败。 例如，从此 <see cref="T:System.IO.Ports.SerialPort" /> 对象传递的参数无效。</exception>
      </Docs>
    </Member>
    <Member MemberName="StopBits">
      <MemberSignature Language="C#" Value="public System.IO.Ports.StopBits StopBits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Ports.StopBits StopBits" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.StopBits" />
      <MemberSignature Language="VB.NET" Value="Public Property StopBits As StopBits" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Ports::StopBits StopBits { System::IO::Ports::StopBits get(); void set(System::IO::Ports::StopBits value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Ports.StopBits</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置每个字节的标准停止位数。</summary>
        <value>
          <see cref="T:System.IO.Ports.StopBits" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Ports.SerialPort.StopBits%2A> 的默认值为 <xref:System.IO.Ports.StopBits.One>。  
  
 <xref:System.IO.Ports.StopBits.None?displayProperty=nameWithType>不支持值。  
  
   
  
## Examples  
 下面的示例演示如何设置<xref:System.IO.Ports.SerialPort.StopBits%2A>属性`One`。  
  
 [!code-cpp[System.IO.Ports.SerialPort#20](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cpp/datareceived.cpp#20)]
 [!code-csharp[System.IO.Ports.SerialPort#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cs/datareceived.cs#20)]
 [!code-vb[System.IO.Ports.SerialPort#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/vb/datareceived.vb#20)]  
  
 下面的示例演示了利用<xref:System.IO.Ports.SerialPort>类以允许两个用户聊天从通过空调制解调器缆线连接的两个单独的计算机。 在此示例中，将提示用户输入的端口设置和用户名之前的聊天。 此代码示例摘自更大的示例为提供<xref:System.IO.Ports.SerialPort>类。  
  
 [!code-cpp[System.IO.Ports.SerialPort#01](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cpp/serialport.cpp#01)]
 [!code-csharp[System.IO.Ports.SerialPort#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cs/SerialPort.cs#01)]
 [!code-vb[System.IO.Ports.SerialPort#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/vb/SerialPort.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.IO.Ports.SerialPort.StopBits" /> 值为<see cref="F:System.IO.Ports.StopBits.None" />。</exception>
        <exception cref="T:System.IO.IOException">此端口处于无效状态。  
  
 \- 或 -  
  
 尝试设置基础端口状态失败。 例如，从此 <see cref="T:System.IO.Ports.SerialPort" /> 对象传递的参数无效。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将数据写入串行端口输出缓冲区。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (string text);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Write(string text) cil managed" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (text As String)" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::String ^ text);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public void Write (string str);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Write(string str) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.Write(System.String)" FrameworkAlternate="xamarinmac-3.0;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (str As String)" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::String ^ str);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <param name="str">To be added.</param>
        <summary>将指定的字符串写入串行端口。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当你想要作为输出将字符串写入串行端口，请使用此方法。  
  
 输出缓冲区中是否存在太多字节和<xref:System.IO.Ports.SerialPort.Handshake%2A>设置为<xref:System.IO.Ports.Handshake.XOnXOff>则<xref:System.IO.Ports.SerialPort>对象可能会引起<xref:System.ServiceProcess.TimeoutException>等待设备在准备好接受更多的数据时。  
  
 默认情况下，<xref:System.IO.Ports.SerialPort>使用<xref:System.Text.ASCIIEncoding>字符进行编码。 <xref:System.Text.ASCIIEncoding> 将大于 127 的所有字符都编码为 (char) 63 或？。 若要支持该范围中的其他字符，将设置<xref:System.IO.Ports.SerialPort.Encoding%2A>到<xref:System.Text.UTF8Encoding>， <xref:System.Text.UTF32Encoding>，或<xref:System.Text.UnicodeEncoding>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">指定的端口未打开。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="text" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ServiceProcess.TimeoutException">该操作未在超时时间到期之前完成。</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Write(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (buffer As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">包含要写入端口的数据的字节数组。</param>
        <param name="offset">
          <c>buffer</c> 参数中从零开始的字节偏移量，从此处开始将字节复制到端口。</param>
        <param name="count">要写入的字节数。</param>
        <summary>使用缓冲区中的数据将指定数量的字节写入串行端口。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当你想要写入字节缓冲区来创建到串行端口输出，请使用此方法。  
  
 输出缓冲区中是否存在太多字节和<xref:System.IO.Ports.SerialPort.Handshake%2A>设置为<xref:System.IO.Ports.Handshake.XOnXOff>则<xref:System.IO.Ports.SerialPort>对象可能会引起<xref:System.ServiceProcess.TimeoutException>等待设备在准备好接受更多的数据时。  
  
 默认情况下，<xref:System.IO.Ports.SerialPort>使用<xref:System.Text.ASCIIEncoding>字符进行编码。 <xref:System.Text.ASCIIEncoding> 将大于 127 的所有字符都编码为 (char) 63 或？。 若要支持该范围中的其他字符，将设置<xref:System.IO.Ports.SerialPort.Encoding%2A>到<xref:System.Text.UTF8Encoding>， <xref:System.Text.UTF32Encoding>，或<xref:System.Text.UnicodeEncoding>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">传递的 <paramref name="buffer" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">指定的端口未打开。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> 或 <paramref name="count" /> 参数超出了所传递的 <paramref name="buffer" /> 的有效区域。 <paramref name="offset" /> 或 <paramref name="count" /> 小于零。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> 加上 <paramref name="count" /> 大于 <paramref name="buffer" /> 的长度。</exception>
        <exception cref="T:System.ServiceProcess.TimeoutException">该操作未在超时时间到期之前完成。</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (char[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Write(char[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.Write(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (buffer As Char(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(cli::array &lt;char&gt; ^ buffer, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">包含要写入端口的数据的字符数组。</param>
        <param name="offset">
          <c>buffer</c> 参数中从零开始的字节偏移量，从此处开始将字节复制到端口。</param>
        <param name="count">要写入的字符数。</param>
        <summary>使用缓冲区中的数据将指定数量的字符写入串行端口。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当你想要写入字符缓冲区来创建到串行端口输出，请使用此方法。  
  
 输出缓冲区中是否存在太多字节和<xref:System.IO.Ports.SerialPort.Handshake%2A>设置为<xref:System.IO.Ports.Handshake.XOnXOff>则<xref:System.IO.Ports.SerialPort>对象可能会引起<xref:System.ServiceProcess.TimeoutException>等待设备在准备好接受更多的数据时。  
  
 默认情况下，<xref:System.IO.Ports.SerialPort>使用<xref:System.Text.ASCIIEncoding>字符进行编码。 <xref:System.Text.ASCIIEncoding> 将大于 127 的所有字符都编码为 (char) 63 或？。 若要支持该范围中的其他字符，将设置<xref:System.IO.Ports.SerialPort.Encoding%2A>到<xref:System.Text.UTF8Encoding>， <xref:System.Text.UTF32Encoding>，或<xref:System.Text.UnicodeEncoding>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">传递的 <paramref name="buffer" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">指定的端口未打开。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> 或 <paramref name="count" /> 参数超出了所传递的 <paramref name="buffer" /> 的有效区域。 <paramref name="offset" /> 或 <paramref name="count" /> 小于零。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> 加上 <paramref name="count" /> 大于 <paramref name="buffer" /> 的长度。</exception>
        <exception cref="T:System.ServiceProcess.TimeoutException">该操作未在超时时间到期之前完成。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBufferSize">
      <MemberSignature Language="C#" Value="public int WriteBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriteBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.WriteBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property WriteBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WriteBufferSize { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(2048)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置串行端口输出缓冲区的大小。</summary>
        <value>输出缓冲区的大小。 默认值为 2048。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Ports.SerialPort.WriteBufferSize%2A>属性将忽略小于 2048年任何值。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.IO.Ports.SerialPort.WriteBufferSize" /> 值小于或等于零。</exception>
        <exception cref="T:System.InvalidOperationException">打开流时设置 <see cref="P:System.IO.Ports.SerialPort.WriteBufferSize" /> 属性。</exception>
        <exception cref="T:System.IO.IOException">
          <see cref="P:System.IO.Ports.SerialPort.WriteBufferSize" /> 属性已设置为一个奇整数值。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public void WriteLine (string text);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteLine(string text) cil managed" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLine (text As String)" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteLine(System::String ^ text);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public void WriteLine (string str);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteLine(string str) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.WriteLine(System.String)" FrameworkAlternate="xamarinmac-3.0;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLine (str As String)" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteLine(System::String ^ str);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <param name="str">To be added.</param>
        <summary>将指定的字符串和 <see cref="P:System.IO.Ports.SerialPort.NewLine" /> 值写入输出缓冲区。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果输入缓冲区中有太多字节和<xref:System.IO.Ports.SerialPort.Handshake%2A>设置为<xref:System.IO.Ports.Handshake.XOnXOff>则<xref:System.IO.Ports.SerialPort>对象可能会引起<xref:System.ServiceProcess.TimeoutException>等待设备在准备好接受更多的数据时。  
  
 写入的输出包括<xref:System.IO.Ports.SerialPort.NewLine%2A>字符串。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.IO.Ports.SerialPort>类以允许两个用户聊天从通过空调制解调器缆线连接的两个单独的计算机。 此代码示例是为提供一个更大的代码示例的一部分<xref:System.IO.Ports.SerialPort>类。  
  
 [!code-cpp[System.IO.Ports.SerialPort#01](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cpp/serialport.cpp#01)]
 [!code-csharp[System.IO.Ports.SerialPort#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cs/SerialPort.cs#01)]
 [!code-vb[System.IO.Ports.SerialPort#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/vb/SerialPort.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="text" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">指定的端口未打开。</exception>
        <exception cref="T:System.TimeoutException">
          <see cref="M:System.IO.Ports.SerialPort.WriteLine(System.String)" /> 方法未能写入流。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteTimeout">
      <MemberSignature Language="C#" Value="public int WriteTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriteTimeout" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.WriteTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property WriteTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WriteTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置写入操作未完成时发生超时之前的毫秒数。</summary>
        <value>发生超时之前的毫秒数。 默认值为 <see cref="F:System.IO.Ports.SerialPort.InfiniteTimeout" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 最初，写入超时值被设置为在 Win32 通信 API 中的 500 毫秒。 此属性，可将此值设置。 可以设置为任何值大于零，超时，或将其设置为<xref:System.IO.Ports.SerialPort.InfiniteTimeout>，在这种情况下不会发生超时。 默认为 <xref:System.IO.Ports.SerialPort.InfiniteTimeout>。  
  
> [!NOTE]
>  用户的非托管`COMMTIMEOUTS`结构可能希望将超时值设置为零，以禁止超时。 若要禁止显示的超时时间<xref:System.IO.Ports.SerialPort.WriteTimeout%2A>属性，但是，你必须指定<xref:System.IO.Ports.SerialPort.InfiniteTimeout>。  
  
 此属性不会影响<xref:System.IO.Stream.BeginWrite%2A>方法返回的流<xref:System.IO.Ports.SerialPort.BaseStream%2A>属性。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.IO.Ports.SerialPort>类以允许两个用户聊天从通过空调制解调器缆线连接的两个单独的计算机。 在此示例中，将提示用户输入的端口设置和用户名之前的聊天。 此代码示例是为提供一个更大的代码示例的一部分<xref:System.IO.Ports.SerialPort>类。  
  
 [!code-cpp[System.IO.Ports.SerialPort#01](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cpp/serialport.cpp#01)]
 [!code-csharp[System.IO.Ports.SerialPort#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cs/SerialPort.cs#01)]
 [!code-vb[System.IO.Ports.SerialPort#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/vb/SerialPort.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">此端口处于无效状态。  
  
 \- 或 -  
  
 尝试设置基础端口状态失败。 例如，从此 <see cref="T:System.IO.Ports.SerialPort" /> 对象传递的参数无效。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.IO.Ports.SerialPort.WriteTimeout" /> 值小于零且不等于 <see cref="F:System.IO.Ports.SerialPort.InfiniteTimeout" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>